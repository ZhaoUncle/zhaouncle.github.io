[{"categories":["k8s"],"content":"K8s环境 Helm部署skywalking","date":"2021-04-11","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/","tags":["k8s","skywalking"],"title":"K8s环境 Helm部署skywalking","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/"},{"categories":["k8s"],"content":"前言 本实验文档基于单机 es7 作为 skywalking 的后端存储，使用 nfs 动态卷 storageclass，es 没有使用账号密码。 环境 k8s 集群：v1.20.4 版本 k8s-master1 192.168.110.235 k8s-node1 192.168.110.236 k8s-node2 192.168.110.237 nfs 192.168.110.239 elasticsearch：7.12.0 skywalking： oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。 skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。 agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。 DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。 #nfs 安装 参考：K8s环境 nfs 动态存储卷部署 elasticsearch 安装 ","date":"2021-04-11","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/:0:0","tags":["k8s","skywalking"],"title":"K8s环境 Helm部署skywalking","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/"},{"categories":["k8s"],"content":"安装 es 7.12.0 cat \u003e elasticsearch-single.yaml \u003c\u003c EOF apiVersion: apps/v1 kind: Deployment metadata: name: elasticsearch-single namespace: efk labels: k8s-app: elasticsearch-single spec: replicas: 1 selector: matchLabels: k8s-app: elasticsearch-single template: metadata: labels: k8s-app: elasticsearch-single spec: containers: - image: elasticsearch:7.12.0 name: elasticsearch-single resources: limits: cpu: 2 memory: 3Gi requests: cpu: 0.5 memory: 500Mi env: - name: \"discovery.type\" value: \"single-node\" - name: ES_JAVA_OPTS value: \"-Xms512m -Xmx2g\" ports: - containerPort: 9200 name: db protocol: TCP volumeMounts: - name: elasticsearch-data mountPath: /usr/share/elasticsearch/data volumes: - name: elasticsearch-data persistentVolumeClaim: claimName: es-pvc --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: es-pvc namespace: efk spec: #指定动态PV 名称 storageClassName: \"elastic-nfs-client\" accessModes: - ReadWriteMany resources: requests: storage: 10Gi --- apiVersion: v1 kind: Service metadata: name: elasticsearch-single namespace: efk spec: ports: - port: 9200 protocol: TCP targetPort: 9200 selector: k8s-app: elasticsearch-single EOF kubectl apply -f elasticsearch-single.yaml 安装 skywalking ","date":"2021-04-11","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/:1:0","tags":["k8s","skywalking"],"title":"K8s环境 Helm部署skywalking","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/"},{"categories":["k8s"],"content":"安装 helm curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash ##初始化 skywalking 的 charts 配置 # clone helm 仓库 git clone https://github.com/apache/skywalking-kubernetes cd skywalking-kubernetes/chart # 即使使用外部 ES 也要添加这个 repo，否则会导致依赖错误 helm repo add elastic https://helm.elastic.co helm dep up skywalking # 创建 skywalking 的 namespace kubectl create namespace skywalking ##配置 skywalking 的 vaules 配置参数： 初始化完成后需要自行调整配置文件，配置 oap-server 使用外部 ES，当然你也可以使用 values 自带的 es 的配置示例，这里不做过多介绍 cat \u003e skywalking/values-my-es-01.yaml \u003c\u003cEOF oap: image: tag: 8.4.0-es7 storageType: elasticsearch7 ui: image: tag: 8.4.0 service: type: NodePort externalPort: 80 internalPort: 8080 nodePort: 30008 elasticsearch: enabled: false config: host: elasticsearch-single.efk port: http: 9200 #user: \"\" # [optional] #password: \"xxx\" # [optional] EOF ##helm 安装 skywalking 8.4.0 helm install skywalking skywalking -n skywalking -f ./skywalking/values-my-es-01.yaml ###卸载方式： helm uninstall skywalking -n skywalking ###持续查看 pod 安装进度 kubectl get pod -n skywalking -w ###对外暴露 skywalking 端口，临时，但是本篇我用了 NodePort 的方法开放了端口，生产中也可以使用 ingress 的方式开放 export POD_NAME=$(kubectl get pods --namespace skywalking -l \"app=skywalking,release=skywalking,component=ui\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl port-forward $POD_NAME 8080:8080 --namespace skywalking ###查看 skywalking 的访问：其实就是 k8s master/node ip + nodeport export NODE_PORT=$(kubectl get --namespace skywalking -o jsonpath=\"{.spec.ports[0].nodePort}\" services skywalking-ui) export NODE_IP=$(kubectl get nodes --namespace skywalking -o jsonpath=\"{.items[0].status.addresses[0].address}\") echo http://$NODE_IP:$NODE_PORT ##运行状态检查 [root@node01 chart]# kubectl get pod,svc -n skywalking NAME READY STATUS RESTARTS AGE pod/skywalking-es-init-22g88 0/1 Completed 0 115s pod/skywalking-oap-687f98bd9b-p5d69 1/1 Running 0 114s pod/skywalking-oap-687f98bd9b-wxffb 1/1 Running 0 114s pod/skywalking-ui-6fd5544496-cmmf9 1/1 Running 0 115s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/skywalking-oap ClusterIP 10.0.0.88 \u003cnone\u003e 12800/TCP,11800/TCP 115s service/skywalking-ui NodePort 10.0.0.87 \u003cnone\u003e 80:30553/TCP 115s ##结果： es 多了一堆 index skywalking 访问状态 #部署一个 java 微服务示例，并接入 skywalking 参考：K8s java 微服务部署示例 #参考： https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==\u0026mid=2247495145\u0026idx=1\u0026sn=87c5ff37f836d53c98304a88870d2e6d\u0026chksm=eac6ccc0ddb145d6192df1ec738b885f979a868f96dbd6116eb05953989e64a67713d78f039e\u0026mpshare=1\u0026scene=1\u0026srcid=04098L9gzve10EptJBFeLVHq\u0026sharer_sharetime=1617928300892\u0026sharer_shareid=09464b4a0389b967659ba78076a1ef58#rd ","date":"2021-04-11","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/:2:0","tags":["k8s","skywalking"],"title":"K8s环境 Helm部署skywalking","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E9%83%A8%E7%BD%B2skywalking/"},{"categories":["k8s"],"content":"K8s环境 允许 master 节点运行 pod","date":"2021-04-10","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/","tags":["k8s"],"title":"K8s环境 允许 master 节点运行 pod","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/"},{"categories":["k8s"],"content":"查看 所有 node 节点的调度 [root@node01 efk]# kubectl describe node|grep -E \"Name:|Taints:\" Name: k8s-master1 Taints: node-role.kubernetes.io/master:NoSchedule Name: k8s-node1 Taints: \u003cnone\u003e Name: k8s-node2 Taints: \u003cnone\u003e ","date":"2021-04-10","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/:0:1","tags":["k8s"],"title":"K8s环境 允许 master 节点运行 pod","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/"},{"categories":["k8s"],"content":"去除 k8s-master1 节点不允许配置的 label kubectl taint node k8s-master1 node-role.kubernetes.io/master- ","date":"2021-04-10","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/:0:2","tags":["k8s"],"title":"K8s环境 允许 master 节点运行 pod","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/"},{"categories":["k8s"],"content":"所有节点不允许调度的 label 去除 kubectl taint nodes --all node-role.kubernetes.io/master- ###重新设置 master 节点不允许调度 pod kubectl taint node k8s-master1 node-role.kubernetes.io/master=:NoSchedule 污点可选参数 NoSchedule: 一定不能被调度 PreferNoSchedule: 尽量不要调度 NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod ","date":"2021-04-10","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/:0:3","tags":["k8s"],"title":"K8s环境 允许 master 节点运行 pod","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%85%81%E8%AE%B8master%E8%8A%82%E7%82%B9%E8%BF%90%E8%A1%8Cpod/"},{"categories":["k8s"],"content":"Helm 安装 mysql 多版本","date":"2021-04-06","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/","tags":["helm","k8s"],"title":"K8s环境 Helm 安装 mysql 多版本","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/"},{"categories":["k8s"],"content":"#1. helm 下载 mysql charts 模板 ##1.1 查看有哪些 helm 版本 helm search repo mysql [root@node01 helm]# helm search repo mysql WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /root/.kube/config WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /root/.kube/config NAME CHART VERSION APP VERSION DESCRIPTION aliyun/mysql 0.3.5 Fast, reliable, scalable, and easy to use open-... stable/mysql 1.6.9 5.7.30 DEPRECATED - Fast, reliable, scalable, and easy... stable/mysqldump 2.6.2 2.4.1 DEPRECATED! - A Helm chart to help backup MySQL... stable/prometheus-mysql-exporter 0.7.1 v0.11.0 DEPRECATED A Helm chart for prometheus mysql ex... aliyun/percona 0.3.0 free, fully compatible, enhanced, open source d... aliyun/percona-xtradb-cluster 0.0.2 5.7.19 free, fully compatible, enhanced, open source d... stable/percona 1.2.3 5.7.26 DEPRECATED - free, fully compatible, enhanced, ... stable/percona-xtradb-cluster 1.0.8 5.7.19 DEPRECATED - free, fully compatible, enhanced, ... stable/phpmyadmin 4.3.5 5.0.1 DEPRECATED phpMyAdmin is an mysql administratio... aliyun/gcloud-sqlproxy 0.2.3 Google Cloud SQL Proxy aliyun/mariadb 2.1.6 10.1.31 Fast, reliable, scalable, and easy to use open-... stable/gcloud-sqlproxy 0.6.1 1.11 DEPRECATED Google Cloud SQL Proxy stable/mariadb 7.3.14 10.3.22 DEPRECATED Fast, reliable, scalable, and easy t... ","date":"2021-04-06","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/:0:0","tags":["helm","k8s"],"title":"K8s环境 Helm 安装 mysql 多版本","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/"},{"categories":["k8s"],"content":"1.2 helm 下载： helm pull repo/server，旧版本用helm fetch repo/server # 下载后解压为 mysql-5.6 的目录 helm pull stable/mysql --untar mv mysql mysql-5.6 # 下载后不解压 helm pull stable/mysql #会下载mysql-1.6.9.tgz # 下载 chart version 为1.6.0 的 stable/mysql helm pull stable/mysql --version 1.6.0 #会下载mysql-1.6.0.tgz ##2. 更改版本 **Tips：**由 1.1 可知，我们下载的 stable/mysql 是 mysql5.7 的版本，以下方式可以不记住 charts 版本号就可以修改 mysql 版本 ","date":"2021-04-06","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/:1:0","tags":["helm","k8s"],"title":"K8s环境 Helm 安装 mysql 多版本","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/"},{"categories":["k8s"],"content":"2.1 修改 Chart.yaml 修改 mysql 版本号appVersion 由原来的 5.7.30 改为 5.6.50和 chart 版本号version vi mysql-5.6/Chart.yaml apiVersion: v1 appVersion: 5.6.50 #更改为 mysql 你要的版本号 deprecated: true description: DEPRECATED - Fast, reliable, scalable, and easy to use open-source relational database system. home: https://www.mysql.com/ icon: https://www.mysql.com/common/logos/logo-mysql-170x115.png keywords: - mysql - database - sql name: mysql sources: - https://github.com/kubernetes/charts - https://github.com/docker-library/mysql version: 5.6.50 #这里是 mysql 的 chart 版本号，随意修改不重复即可 ##2.2 修改mysql 的配置参数 vi mysql-5.6/values.yaml，以下是我净化后的配置 image: \"mysql\" imageTag: \"5.6.50\" #这里要修改为 mysql 你需要的版本，与上面修改的版本保持一致 strategy: type: Recreate busybox: image: \"busybox\" tag: \"1.32\" testFramework: enabled: true image: \"bats/bats\" tag: \"1.2.1\" imagePullPolicy: IfNotPresent securityContext: {} mysqlRootPassword: mysql123456 #主动设置 root 密码，要大于 10 个字符串 mysqlUser: test # 设置一个初始账号哦 mysqlPassword: test123456 #👆🏻那个账号的密码，要大于 10 个字符串 imagePullPolicy: IfNotPresent args: [] extraVolumes: | extraVolumeMounts: | extraInitContainers: | nodeSelector: {} affinity: {} tolerations: [] livenessProbe: initialDelaySeconds: 30 periodSeconds: 10 timeoutSeconds: 5 successThreshold: 1 failureThreshold: 3 readinessProbe: initialDelaySeconds: 5 periodSeconds: 10 timeoutSeconds: 1 successThreshold: 1 failureThreshold: 3 persistence: enabled: true storageClass: \"managed-nfs-storage\" #我这里设置为 nfs 的动态 sc，会自动创建存储，可参考 nfs 那章节 accessMode: ReadWriteOnce size: 8Gi annotations: {} securityContext: enabled: false runAsUser: 999 fsGroup: 999 resources: requests: memory: 256Mi cpu: 100m configurationFilesPath: /etc/mysql/conf.d/ configurationFiles: {} initializationFiles: {} mysqlx: port: enabled: false metrics: enabled: false image: prom/mysqld-exporter imageTag: v0.10.0 imagePullPolicy: IfNotPresent resources: {} annotations: {} livenessProbe: initialDelaySeconds: 15 timeoutSeconds: 5 readinessProbe: initialDelaySeconds: 5 timeoutSeconds: 1 flags: [] serviceMonitor: enabled: false additionalLabels: {} service: annotations: {} type: NodePort # 我这里的 service 设置为 nodeport 模式，可以用 master或者 node ip+下面的 nodePort 32005 进行访问 nodePort: 32005 #宿主机访问的端口 port: 3306 serviceAccount: create: false ssl: enabled: false secret: mysql-ssl-certs certificates: deploymentAnnotations: {} podAnnotations: {} podLabels: {} initContainer: resources: requests: memory: 10Mi cpu: 10m 3. 安装 helm package mysql-5.6 helm install mydb mysql-5.6.50.tgz 行动结果： [root@node01 helm]# helm list WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /root/.kube/config WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /root/.kube/config NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION mysql56 default 1 2021-04-06 21:26:26.6483062 +0800 CST deployed mysql-5.6.50 5.6.50 [root@node01 helm]# kubectl get pod NAME READY STATUS RESTARTS AGE mysql56-6c856cff5b-xxrz6 1/1 Running 0 94s nfs-client-provisioner-cf84d684-brlfk 1/1 Running 11 2d7h 4.查看默认参数和变量 [root@node01 helm]# helm status mysql56 WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /root/.kube/config WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /root/.kube/config NAME: mysql56 LAST DEPLOYED: Tue Apr 6 21:26:26 2021 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: MySQL can be accessed via port 3306 on the following DNS name from within your cluster: mysql56.default.svc.cluster.local To get your root password run: MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mysql56 -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo) To connect to your database: 1. Run an Ubuntu pod that you can use as a client: kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il 2. Install the mysql client: $ apt-get update \u0026\u0026 apt-get install mysql-client -y 3. Connect using the mysql cli, then provide your password: $ mysql -h my","date":"2021-04-06","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/:2:0","tags":["helm","k8s"],"title":"K8s环境 Helm 安装 mysql 多版本","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-helm%E5%AE%89%E8%A3%85mysql%E5%A4%9A%E7%89%88%E6%9C%AC/"},{"categories":["k8s"],"content":"K8s java 微服务部署示例","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"1. 环境 k8s：1.20 k8s-master1 192.168.110.235 8s-node1 192.168.110.236 k8s-node2 192.168.110.237 harbor,nfs 192.168.110.239 java：1.8 2. java 微服务部署 ##2.1 安装 java jdk1.8 yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel maven ##2.2 下载代码示例： ###版本介绍： dev3 分支会 mysql 连接错误，暂时无法解决请抛弃 dev4 分支是加了 pinpoint APM 服务 dev4-skywalking 分支如所见 git clone git@github.com:ZhaoUncle/simple-microservice.git #切换dev4-skywalking 分支 cd simple-microservice git checkout remotes/origin/dev4-skywalking ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:0:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"部署须知 导入db目录下数据库文件到自己的MySQL服务器 默认的 db 文件，没有 use DATABASES；所以会导致报错，参考 2.4 做法。 k8s/docker_build.sh 这个是部署脚本，可以参考2.6来使用，用来推送 build 好的 images，然后启动 deployment。 修改配置环境（xxx-service/src/main/resources/application.yml，active值决定启用环境配置文件） 默认使用 fat 文件调用 mysql 和 eureka 链接，无需更改。 修改连接数据库配置（xxx-service/src/main/resources/application-fat.yml） 参考 2.5 做法 修改前端页面连接网关地址（portal-service/src/main/resources/static/js/productList.js和orderList.js） 默认无需修改，不过当你访问 portal，配置的是 ingress 暴露的域名，具体可以看 k8s/目录下的 yaml 文件。 服务启动顺序：eureka -\u003e mysql -\u003e product,stock,order -\u003e gateway -\u003e portal 访问办法： kubectl get pod,svc,ing -n ms可以看出是由 nginx-ingress-controller暴露的域名访问， 绑定 hosts进行访问，192.168.110.235是我的 master IP，你也可以绑定为 node IP：192.168.110.235 eureka.ctnrs.com gateway.ctnrs.com portal.ctnrs.com ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:1:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"构建 java 命令介绍 mvn clean package -D maven.test.skip=true mvn clean package：清除目录中生成的结果，做一个清除，重新打新的包。 -D maven.test.skip: 跳过单元测试，写的测试用例，如果写的有问题，是编译不过去的 ##2.3 helm 安装 mysql 介绍 mkdir -p /root/helm/mysql cd /root/helm/mysql # vi config.yaml persistence: #如果你只是简单测试，可以把 persistence 这里的所有配置都去掉，只保留 service 的配置即可。 enabled: true storageClass: \"managed-nfs-storage\" accessMode: ReadWriteOnce size: 8Gi service: type: NodePort #暴露 nodeport，可以用宿主机 ip+port 访问 nodePort: 32000 #helm 创建 db helm install db -f config.yaml stable/mysql #查看发布状态，这里会显示获取密码、host、port 的命令，下面那条获取 root 密码的命令就是在这里面看到的 helm status db #查看mysql 的 root 密码： kubectl get secret --namespace default db-mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo 一步登录 mysql：这里的命令和下面的一步登录 mysql 步骤不能与你通用，具体要由上面那条helm status得出，因为 pod name 不一定一样，如果你创建的不是这个名字的话。 MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default db-mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo) MYSQL_HOST=$(kubectl get nodes --namespace default -o jsonpath='{.items[0].status.addresses[0].address}') MYSQL_PORT=$(kubectl get svc --namespace default db-mysql -o jsonpath='{.spec.ports[0].nodePort}') mysql -h ${MYSQL_HOST} -P${MYSQL_PORT} -u root -p${MYSQL_ROOT_PASSWORD} 创建结果： [root@node01 mysql]# kubectl get secret --namespace default db-mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo W5hcn4PvTI [root@node01 mysql]# kubectl get pod,svc |grep db-mysql pod/db-mysql-7f897f4d95-bc7js 1/1 Running 0 80s service/db-mysql NodePort 10.0.0.121 \u003cnone\u003e 3306:32000/TCP 80s [root@node01 mysql]# helm list|grep db db default 1 2021-04-06 22:04:19.545636699 +0800 CST deployed mysql-1.6.9 5.7.30 删除你所创建的 db 数据库 helm delete db #kubectl get pod 就会就看不见了 ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:1:1","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"2.4 mysql 登录然后创建 db 和 tables 数据 MySQL [(none)]\u003e CREATE DATABASE /*!32312 IF NOT EXISTS*/`tb_order` /*!40100 DEFAULT CHARACTER SET utf8mb4 */; MySQL [(none)]\u003e use tb_order; MySQL [(none)]\u003e source /data/simple-microservice/db/order.sql MySQL [(none)]\u003e CREATE DATABASE /*!32312 IF NOT EXISTS*/`tb_product` /*!40100 DEFAULT CHARACTER SET utf8mb4 */; MySQL [(none)]\u003e use tb_product; MySQL [(none)]\u003e source /data/simple-microservice/db/product.sql MySQL [(none)]\u003e CREATE DATABASE /*!32312 IF NOT EXISTS*/`tb_stock` /*!40100 DEFAULT CHARACTER SET utf8mb4 */; MySQL [(none)]\u003e use tb_stock; MySQL [(none)]\u003e source /data/simple-microservice/db/stock.sql 虽然 sql 文件介绍说使用的mysql5.6 的版本，但是经过测试 5.7 这里是正常使用，所以你想用 helm 安装 mysql5.6，可以参考另一篇文章K8s环境 Helm 安装 mysql 多版本 ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:2:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"2.5 修改配置文件密码和 mysql ip 端口，创建 namesapce 语法介绍：sed -i 's#abc#def#g' filename，将 filename 文件里面所有的 abc 替换成 def。 cd /data/simple-microservice ### 修改 docker_build.sh 里面的 register 为我们创建的 harbor 仓库地址 sed -i 's#docker_registry=192.168.31.90#docker_registry=192.168.110.239#g' k8s/docker_build.sh ### 创建 namespace ms kubectl create namespace ms ### 修改 jdbc 的 mysql 连接 for i in `find ./ -name \"application-fat.yml\"`;do sed -i 's#mysql:3306#192.168.110.235:32000#g' $i;done ###修改 root 密码，2.3有告诉我们 root 密码是多少哦，当然，你也可以进 mysql 或者修改 helm 的 config.yaml 定义自己的初始密码，这里就不多做介绍了 for i in `find ./ -name \"application-fat.yml\"`;do sed -i 's#password: 123456#password: W5hcn4PvTI#g' $i;done ### 我们还要修改 skywalking 的 ip+端口，skywalking 用的是 nodeport 的部署方式，skywalking 尽管在 java 启动命令中被调用，但是就算不存在，java 服务也不会退出。 for i in `find ./ -name \"Dockerfile\"`;do sed -i 's#192.168.31.90:11800#192.168.110.235:11800#g' $i;done ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:3:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"2.6 docker_build.sh 介绍 vi /data/simple-microservice/k8s/docker_build.sh #!/bin/bash ###这里是 harbor 地址 docker_registry=192.168.110.239 ###创建 harbor 登录secret，以后就不需要每次都手动登录了 kubectl create secret docker-registry registry-pull-secret --docker-server=$docker_registry --docker-username=admin --docker-p assword=Harbor12345 --docker-email=admin@ctnrs.com -n ms ### 下面是构建 mvn jar 包然后上传到 harbor，在部署 k8s yaml service_list=\"eureka-service gateway-service order-service product-service stock-service portal-service\" service_list=${1:-${service_list}} work_dir=$(dirname $PWD) current_dir=$PWD cd $work_dir mvn clean package -Dmaven.test.skip=true for service in $service_list; do cd $work_dir/$service if ls |grep biz \u0026\u003e/dev/null; then cd ${service}-biz fi service=${service%-*} image_name=$docker_registry/microservice/${service}:$(date +%F-%H-%M-%S) docker build -t ${image_name} . docker push ${image_name} sed -i -r \"s#(image: )(.*)#\\1$image_name#\" ${current_dir}/${service}.yaml kubectl apply -f ${current_dir}/${service}.yaml done ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:4:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["k8s"],"content":"2.7 部署 ms java 服务 部署： cd /data/simple-microservice/k8s sh docker_build.sh 删除： cd /data/simple-microservice/k8s kubectl delete -f *.yaml 部署结果： [root@node01 k8s]# kubectl get pod,svc,ing -n ms NAME READY STATUS RESTARTS AGE pod/eureka-0 0/1 Running 0 3s pod/eureka-1 1/1 Running 0 3m2s pod/eureka-2 1/1 Running 0 6m53s pod/gateway-7b47c8d997-znkfx 1/1 Running 0 7m49s pod/order-59f6d5d786-htxtg 1/1 Running 0 7m36s pod/portal-6c79b876c9-h8vsd 1/1 Running 0 6m27s pod/product-8c88fbf8-hm7k6 1/1 Running 0 6m51s pod/stock-8944b6585-ccp8w 1/1 Running 0 6m51s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/eureka ClusterIP None \u003cnone\u003e 8888/TCP 6h17m service/gateway ClusterIP 10.0.0.113 \u003cnone\u003e 9999/TCP 6h17m service/portal ClusterIP 10.0.0.104 \u003cnone\u003e 8080/TCP 6h15m NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/eureka \u003cnone\u003e eureka.ctnrs.com 80 6h17m ingress.networking.k8s.io/gateway \u003cnone\u003e gateway.ctnrs.com 80 6h17m ingress.networking.k8s.io/portal \u003cnone\u003e portal.ctnrs.com 80 6h15m 由 ing 那里得知，需要绑定的 hosts 如下； 192.168.110.235 eureka.ctnrs.com gateway.ctnrs.com portal.ctnrs.com ","date":"2021-04-05","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/:5:0","tags":["k8s","微服务部署"],"title":"K8s java 微服务部署示例","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/"},{"categories":["gitlab"],"content":"Gitlab 安装","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/","tags":["gitlab"],"title":"Gitlab安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/"},{"categories":["gitlab"],"content":"使用 docker-compose 安装 我这里简单直接用 http+ip 访问，不做过多配置，如有需要请另行修改 mkdir /data/gitlab vi docker-compose.yml web: image: 'gitlab/gitlab-ce:latest' restart: always hostname: 'gitlab.example.com' container_name: gitlab environment: GITLAB_OMNIBUS_CONFIG: | external_url 'http://192.168.110.238' gitlab_rails['gitlab_shell_ssh_port'] = 622 ports: - '80:80' - '443:443' - '622:22' volumes: - '/data/gitlab/src/config:/etc/gitlab' - '/data/gitlab/src/logs:/var/log/gitlab' - '/data/gitlab/src/data:/var/opt/gitlab' 启动 docker-compose up -d 如果要修改配置，然后重新docker-compose restart就可以了 vi src/config/gitlab.rb ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/:0:0","tags":["gitlab"],"title":"Gitlab安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/"},{"categories":["gitlab"],"content":"首次访问 gitlab 使用域名gitlab.test.com或者该主机 IP 首次登录时会要求设置 root 用户的密码，完成后就可以用 root 和新设密码登录；然后按需创建 Group, User, Projects等，还有相关配置。 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/:1:0","tags":["gitlab"],"title":"Gitlab安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/"},{"categories":["gitlab"],"content":"gitlab 数据备份 因为是基于 docker-compose 把配置和数据都挂载本地路径了，所以其实只要把本地路径用 rsync 进行同步就可以达到备份的效果。 比如以下的备份方式：用crontab 去定时同步，不过这个脚本用了 delete，会删除源目录不存在，但是目的目录存在的文件 方法一：rsync 同步，好处是如果故障了，可以直接 docker-compose 直接起一个 gitalb # 创建备份脚本 cat \u003e /root/gitlab-backup.sh \u003c\u003c EOF #!/bin/bash # 请事先配置 gitlab 服务器到备份服务器的免密码 ssh 登录 rsync -av --delete /srv/gitlab/config '-e ssh -l root' 192.168.1.xx:/backup_gitlab/config rsync -av --delete /srv/gitlab/data '-e ssh -l root' 192.168.1.xx:/backup_gitlab/data EOF # 创建并应用 crontab cat \u003e /etc/cron.d/gitlab-backup \u003c\u003c EOF ## 每3个小时同步备份一次，具体根据需要修改 11 */3 * * * root bash /root/gitlab-backup.sh \u003e /root/gitlab/sync.log 2\u003e\u00261 EOF 方法二：gitlab 的备份命令直接创建备份文件，可以直接新起一个 gitlab 然后进行导入，版本必须和原来一致 docker exec -t \u003ccontainer name\u003e gitlab-backup create 如果 gitlab 服务器真的出现不可恢复的故障，丢失数据，那么至少保留有3小时前的备份，利用备份的文件，同样再用 docker 挂载 volume的方式运行，这样就可以恢复原 gitlab 服务运行。 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/:2:0","tags":["gitlab"],"title":"Gitlab安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/"},{"categories":["gitlab"],"content":"升级 gitlab 因为前面使用了 docker-compose 方式安装，因此 gitlab 升级很方便。 升级前停止/删除容器：docker-compose stop 如上节执行备份数据 修改 docker-compose.yml 的 images，然后docker-compose up -d #参考： https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose 备份还原请参考：https://docs.gitlab.com/ee/raketasks/backup_restore.html ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/:3:0","tags":["gitlab"],"title":"Gitlab安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-gitlab%E5%AE%89%E8%A3%85/"},{"categories":["k8s"],"content":"Harbor安装","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/","tags":["harbor","k8s"],"title":"Harbor安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/"},{"categories":["k8s"],"content":"环境 系统：centos7 docker：19.03.9 docker-compose：1.28.6 Harbor: 2.2.1 安装 docker yum remove docker docker-common docker-selinux docker-engine yum install -y yum-utils device-mapper-persistent-data lvm2 wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo sed -i 's+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo yum makecache fast yum install docker-ce 配置 docker 镜像加速和日志分割 cat \u003c\u003c EOF \u003e /etc/docker/daemon.json { \"registry-mirrors\": [\"http://f1361db2.m.daocloud.io\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF 安装 docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose docker-compose --version 安装 harbor **Tips：**为什么要用 https 而不用 http访问 harbor 镜像仓库呢，因为如果用 http 的话，必须在访问的客户端更改 docker 的 daemon.json 文件添加--insecure-registry，如果你客户端机器多的话，改起来麻烦还得重启 docker，但是用 https 访问，就无须更改 daemon.json 配置文件了，这是好处，如果你重启不受影响，那就随你 http 或者 https 了。 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/:0:0","tags":["harbor","k8s"],"title":"Harbor安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/"},{"categories":["k8s"],"content":"生成 https 证书 我为了测试方便，直接使用 IP 方式作为访问，如果要改成域名，直接一键替换就好，还要 在步骤 2.3 要把 v3.ext 的IP=192.168.110.239`改成 以下方式： [alt_names] DNS.1=yourdomain.com DNS.2=yourdomain DNS.3=hostname 实际步骤： mkdir /root/harbor/cert/harbor -p cd /root/harbor/cert ###1. 生成证书颁发机构证书 #1.1 生成CA证书私钥 openssl genrsa -out ca.key 4096 #1.2 生成CA证书 openssl req -x509 -new -nodes -sha512 -days 365000 \\ -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.110.239\" \\ -key ca.key \\ -out ca.crt ###2. 生成服务器证书 #2.1 生成私钥 openssl genrsa -out 192.168.110.239.key 4096 #2.2 生成证书签名请求（CSR） openssl req -sha512 -new \\ -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.110.239\" \\ -key 192.168.110.239.key \\ -out 192.168.110.239.csr #2.3 生成一个x509 v3扩展文件 cat \u003e v3.ext \u003c\u003c-EOF authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment extendedKeyUsage = serverAuth subjectAltName = @alt_names [alt_names] IP=192.168.110.239 EOF #2.4 使用该v3.ext文件为您的Harbor主机生成证书 openssl x509 -req -sha512 -days 365000 \\ -extfile v3.ext \\ -CA ca.crt -CAkey ca.key -CAcreateserial \\ -in 192.168.110.239.csr \\ -out 192.168.110.239.crt ###3. 提供证书给Harbor和Docker #3.1 将服务器证书和密钥复制到Harbor主机上的certficates文件夹中 cp 192.168.110.239.crt /data/harbor/certs/harbor cp 192.168.110.239.key /data/harbor/certs/harbor #3.2 转换yourdomain.com.crt为yourdomain.com.cert，供Docker使用 openssl x509 -inform PEM -in 192.168.110.239.crt -out 192.168.110.239.cert #3.3 将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中，如果将默认nginx端口443映射到其他端口，请创建文件夹/etc/docker/certs.d/yourdomain.com:port或/etc/docker/certs.d/harbor_IP:port。 mkdir -p /etc/docker/certs.d/192.168.110.239/ cp 192.168.110.239.cert /etc/docker/certs.d/192.168.110.239/ cp 192.168.110.239.key /etc/docker/certs.d/192.168.110.239/ cp ca.crt /etc/docker/certs.d/192.168.110.239/ #重新启动Docker Engine systemctl restart docker 证书位置说明； [root@node05 data]# tree /data/harbor/certs/ /data/harbor/certs/ ├── 192.168.110.239.cert ├── 192.168.110.239.crt ├── 192.168.110.239.csr ├── 192.168.110.239.key ├── ca.crt ├── ca.key ├── ca.srl ├── harbor │ ├── 192.168.110.239.crt │ └── 192.168.110.239.key └── v3.ext [root@node05 data]# tree /etc/docker/certs.d/ /etc/docker/certs.d/ └── 192.168.110.239 ├── 192.168.110.239.cert ├── 192.168.110.239.key └── ca.crt 部署说明： 如果还没有部署 harbor，在生成证书之后，修改 harbo.yml 的配置hostname 和 https 的属性就好，然后./install 如果已经部署好 harbor，那么也是要修改 harbor.yml 的配置hostname 和 https 的属性， #2.1 运行prepare脚本以启用HTTPS ./prepare #2.2 如果Harbor正在运行，请停止并删除现有实例,图像数据保留在文件系统中，因此不会丢失任何数据 docker-compose down -v #2.3 重新启动 harbor docker-compose up -d 验证： 浏览器打开 https://192.168.110.239，账号密码 admin/Harbor12345 修改 docker 的 daemon.json 把 \"insecure-registries\": [\"https://192.168.110.239\"], 添加进去，然后 docker login https://192.168.110.239 ，如果你用的不是默认的 443 端口，记得要用 https://92.168.110.239:888 就是+端口号哦，不然会默认走 80 或者 443 的，导致验证出了问题。 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/:1:0","tags":["harbor","k8s"],"title":"Harbor安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/"},{"categories":["k8s"],"content":"安装harbor harbor 分为在线安装和下线安装两种，其实就是你的安装包完不完整的问题而已啦，我这里用下线安装方式 cd /data/ wget https://github.com/goharbor/harbor/releases/download/v2.2.1/harbor-offline-installer-v2.2.1.tgz tar xf harbor-offline-installer-v2.2.1.tgz cd /data/harbor cp harbor.yml.tmpl harbor.yml 修改 harbor 配置文件 [root@node05 harbor]# cat harbor.yml|grep -Ev '#|^$' hostname: 192.168.110.239 #如果 https 证书用的域名，这里要改为域名方式 http: port: 80 #如果你想简单点不走 https，直接把 https 关掉，就可以省去上面配置 https 证书的问题了。 https: port: 443 certificate: /data/harbor/certs/harbor/192.168.110.239.crt private_key: /data/harbor/certs/harbor/192.168.110.239.key harbor_admin_password: Harbor12345 #登录账号 admin 的默认密码 database: password: root123 #数据库密码 max_idle_conns: 50 max_open_conns: 1000 data_volume: /data #这里是默认的 docker-compose 的挂载数据的路径，保存在本地 trivy: ignore_unfixed: false skip_update: false insecure: false jobservice: max_job_workers: 10 notification: webhook_job_max_retry: 10 chart: absolute_url: disabled log: level: info local: rotate_count: 50 rotate_size: 200M location: /var/log/harbor _version: 2.2.0 proxy: http_proxy: https_proxy: no_proxy: components: - core - jobservice - trivy ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/:2:0","tags":["harbor","k8s"],"title":"Harbor安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/"},{"categories":["k8s"],"content":"harbor 开启 helm 的 charts 仓库配置 ./install.sh --with-chartmuseum ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/:3:0","tags":["harbor","k8s"],"title":"Harbor安装","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-harbor%E5%AE%89%E8%A3%85/"},{"categories":[],"content":"环境 k8s 1.20 kube-prometheus release-0.7 在过去的几年中，云计算已经成为及分布式计算最火热的技术之一，其中 Docker、Kubernetes、Prometheus 等开源软件的发展极大地推动了云计算的发展。本文首先从 Prometheus 是如何监控 Kubernetes 入手，介绍 Prometheus Operator 组件。接着详细介绍基于 Kubernetes 的两种 Prometheus 部署方式，最后介绍服务配置、监控对象以及数据展示和告警。通过本文，大家可以在 Kubernetes 集群的基础上学习和搭建完善的 Prometheus 监控系统。 #对比 开源监控方式有kube-prometheus和prometheus-operator 两者的参考文档地址：https://prometheus-operator.dev/docs/prologue/introduction/ 监控对比： Prometheus Operator Prometheus Operator 使用 Kubernetes 定制资源来简化 Prometheus、Alertmanager和相关监控组件的部署和配置。 kube-prometheus kube-prometheus 提供了基于 Prometheus 和 Prometheus Operator 的完整集群监控堆栈的配置示例。这包括部署多个 Prometheus和 Alertmanager 实例、metrics exporters(如用于收集节点 metrics 的 node_exporters)、将 Prometheus 链接到各种度量端点的目标配置，以及用于通知集群中潜在问题的示例警报规则。 helm chart The prometheus-community/kube-prometheus-stack 提供了与 kube-prometheus 类似的功能集。该图表由Prometheus社区维护。有关更多信息，请参见图表的自述文件 chart’s readme #kube-prometheus安装 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/:0:0","tags":[],"title":"K8s环境 监控之kube Prometheus","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/"},{"categories":[],"content":"先决条件 默认情况下，假定kubelet使用令牌身份验证和授权，否则Prometheus需要一个客户端证书，它可以完全访问kubelet，而不仅仅是度量。令牌身份验证和授权允许更细粒度和更容易的访问控制。 kubelet配置必须包含以下标志： --authentication-token-webhook=true： 通过此标志，可以使用ServiceAccount令牌对kubelet进行身份验证。也可以通过将kubelet配置值authentication.webhook.enabled设置为true来启用它。 --authorization-mode=Webhook：这个标志允许kubelet使用API执行一个RBAC请求，以确定是否允许请求实体(在本例中是Prometheus)访问资源，特别是这个项目的/metrics端点。这也可以通过设置kubelet配置值授权来启用。Webhook模式。 该堆栈通过部署Prometheus适配器提供资源指标。该适配器是扩展API服务器，需要启用Kubernetes的此功能，否则适配器无效，但仍在部署中。 安装 commit 版本：f5f72e1b5011830da821a7f6afff667c27b6fc37 git clone https://github.com/prometheus-operator/kube-prometheus.git cd kube-prometheus kubectl create -f manifests/setup until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo \"\"; done kubectl create -f manifests/ 临时暴露 web 页面： Prometheus kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090 Then access via http://localhost:9090 Grafana $ kubectl --namespace monitoring port-forward svc/grafana 3000 Then access via http://localhost:3000 and use the default grafana user:password of admin:admin. Alert Manager $ kubectl --namespace monitoring port-forward svc/alertmanager-main 9093 Then access via http://localhost:9093 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/:1:0","tags":[],"title":"K8s环境 监控之kube Prometheus","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/"},{"categories":[],"content":" 改为 NodePort 类型，然后访问 改动方法一：直接在service.yaml 添加type: NodePort cd kube-prometheus/manifests sed -i '/selector:/i\\\\ type:\\ NodePort' grafana-service.yaml sed -i '/selector:/i\\\\ type:\\ NodePort' alertmanager-service.yaml sed -i '/selector:/i\\\\ type:\\ NodePort' prometheus-service.yaml kubectl apply -f alertmanager-service.yaml kubectl apply -f grafana-service.yaml kubectl apply -f prometheus-service.yaml 方法二：命令行在线修改 kubectl edit svc grafana -n monitoring kubectl edit svc prometheus-k8s -n monitoring kubectl edit svc alertmanager-main -n monitoring 结果： [root@node01 manifests]# kubectl get svc -n monitoring NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE alertmanager-main NodePort 10.0.0.137 \u003cnone\u003e 9093:31641/TCP 136m alertmanager-operated ClusterIP None \u003cnone\u003e 9093/TCP,9094/TCP,9094/UDP 136m blackbox-exporter ClusterIP 10.0.0.149 \u003cnone\u003e 9115/TCP,19115/TCP 136m grafana NodePort 10.0.0.216 \u003cnone\u003e 3000:30450/TCP 136m kube-state-metrics ClusterIP None \u003cnone\u003e 8443/TCP,9443/TCP 136m node-exporter ClusterIP None \u003cnone\u003e 9100/TCP 136m prometheus-adapter ClusterIP 10.0.0.115 \u003cnone\u003e 443/TCP 136m prometheus-k8s NodePort 10.0.0.180 \u003cnone\u003e 9090:31907/TCP 136m prometheus-operated ClusterIP None \u003cnone\u003e 9090/TCP 136m prometheus-operator ClusterIP None \u003cnone\u003e 8443/TCP 139m nginx ingress 暴露端口访问 参考：https://github.com/prometheus-operator/kube-prometheus/blob/main/docs/exposing-prometheus-alertmanager-grafana-ingress.md 安装htpasswd yum -y install httpd-tools 清除 kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup #prometheus-operator安装 参考 https://www.infoq.cn/article/uj12knworcwg0kke8zfv https://github.com/prometheus-operator/kube-prometheus https://huangzhongde.cn/post/Kubernetes/Using_kube-prometheus_deploy_monitor_system/ https://juejin.cn/post/6865504989695967245 https://huisebug.github.io/2019/08/27/Prometheus-Operator/ ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/:2:0","tags":[],"title":"K8s环境 监控之kube Prometheus","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E7%9B%91%E6%8E%A7%E4%B9%8Bkube-prometheus/"},{"categories":["k8s"],"content":"K8s环境命令行自动补全","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/","tags":["k8s"],"title":"K8s环境命令行自动补全","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"},{"categories":["k8s"],"content":"#kubectl， helm 命令自动补全 ##kubectl 命令自动补全： yum install -y bash-completion locate bash_completion echo \"source /usr/share/bash-completion/bash_completion\" \u003e\u003e /etc/profile echo \"source \u003c(kubectl completion bash)\" \u003e\u003e /etc/profile 若要马上生效，直接执行 source 的命令而不是添加到文件里面 ##helm 自动补全： echo \"source \u003c(helm completion bash)\" \u003e\u003e /etc/profile ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/:0:0","tags":["k8s"],"title":"K8s环境命令行自动补全","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"},{"categories":["k8s"],"content":"K8s环境 nfs 动态存储卷部署","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"环境 系统：CentOS7 K8s 1.20 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:1:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"预备知识 如果你不知道NFS是做什么的，那么请参考下面链接（包括但不限于）进行学习： NFS nfs 是基于网络共享存储，所以在大数据量场景下不适用，在环境搭建测试学习 k8s 阶段反而很合适，当然，小业务量场景下也非常合适使用。 NFS 允许系统将其目录和文件共享给网络上的其他系统。通过 NFS，用户和应用程序可以访问远程系统上的文件，就象它们是本地文件一样。 ##使用前要注意 k8s 版本 在v1.20.0中禁用了selfLink，在 v1.21 中将会彻底的移除，In k8s 1.20 they have removed selfLink as per release notes. 报错：selfLink was empty [root@node01 deploy]# kubectl logs -f nfs-client-provisioner-cf84d684-vtns2 ..... E0324 15:05:21.127112 1 controller.go:1004] provision \"default/test-claim\" class \"managed-nfs-storage\": unexpected error getting claim reference: selfLink was empty, can't make reference 参考： https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/issues/25 https://github.com/kubernetes/kubernetes/pull/94397 https://wqblogs.com/2021/01/27/k8s%E5%AF%B9%E6%8E%A5nfs%E5%AD%98%E5%82%A8/ 解决办法： 如果是 kubeadm 基于 yaml 安装 kube-apiserver方式安装： Current workaround is to edit /etc/kubernetes/manifests/kube-apiserver.yaml Under here: spec: containers: - command: - kube-apiserver Add this line: - --feature-gates=RemoveSelfLink=false The do this: kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml 如果是 二进制安装的话，add --feature-gates=RemoveSelfLink=false to /opt/kubernetes/cfg/kube-apiserver.conf，然后 restart 一下， (I had to do it twice to get it to work) ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:2:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"创建 NFS 服务器 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:3:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"安装nfs-utils 在集群每一个节点安装nfs-utils，master 和 node 节点等。 yum install -y nfs-utils ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:3:1","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"配置nfs-server 创建共享目录 mkdir -p /ifs/kubernetes/ 编辑/etc/exports文件添加需要共享目录，每个目录的设置独占一行，编写格式如下： NFS共享目录路径客户机IP段(参数1,参数2,...,参数n) 例如： /ifs/kubernetes 192.168.110.0/24(rw,no_root_squash) 参数说明: ro只读访问 rw读写访问 sync所有数据在请求时写入共享 asyncnfs在写入数据前可以响应请求 securenfs通过1024以下的安全TCP/IP端口发送 insecurenfs通过1024以上的端口发送 wdelay如果多个用户要写入nfs目录，则归组写入（默认） no_wdelay如果多个用户要写入nfs目录，则立即写入，当使用async时，无需此设置hide在nfs共享目录中不共享其子目录 no_hide共享nfs目录的子目录 subtree_check如果共享/usr/bin之类的子目录时，强制nfs检查父目录的权限（默认） no_subtree_check不检查父目录权限 all_squash共享文件的UID和GID映射匿名用户anonymous，适合公用目录 no_all_squash保留共享文件的UID和GID（默认） root_squashroot用户的所有请求映射成如anonymous用户一样的权限（默认） no_root_squashroot用户具有根目录的完全管理访问权限 anonuid=xxx指定nfs服务器/etc/passwd文件中匿名用户的UID anongid=xxx指定nfs服务器/etc/passwd文件中匿名用户的GID 注1：尽量指定IP段最小化授权可以访问NFS 挂载的资源的客户端 注2：经测试参数insecure必须要加，否则客户端挂载出错mount.nfs: access denied by server while mounting ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:3:2","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"启动NFS服务 配置完成后，您可以在终端提示符后运行以下命令来启动 NFS 服务器： systemctl start nfs \u0026\u0026 systemctl start rpcbind systemctl enable nfs \u0026\u0026 systemctl enable rpcbind ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:3:3","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"检查NFS服务提供是否正常 到客户机上执行showmount命令进行检查 [root@node05 ~]# showmount -e Export list for node05: /ifs/kubernetes 192.168.110.0/24 ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:3:4","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"在客户端验证 [root@k8s-node1 ~]# yum -y install nfs-utils [root@k8s-node1 ~]# mount -t nfs 192.168.110.239:/ifs/kubernetes /mnt [root@k8s-node1 ~]# df -h|grep mnt 192.168.110.239:/ifs/kubernetes 37G 4.2G 33G 12% /mnt [root@k8s-node1 ~]# touch /mnt/a.txt ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:4:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"yml 方式：安装 nfs-client-provisioner ###在集群每一个节点安装nfs-utils yum install -y nfs-utils ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:5:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"在任意一个master节点执行下面，安装nfs-client-provisioner yum -y install git git clone https://github.com/kubernetes-incubator/external-storage cd external-storage/nfs-client/deploy/ commit 版本：201f40d78a9d3fd57d8a441cfc326988d88f35ec ###安装： 需要修改的地方： rbac.yaml ：默认使用 default 的 namespace，如果有需要要自行更改 class.yaml ：场景 storageclass 存储卷 deployment.yaml ：这个文件是创建 nfs client，供其他 pod 调用客户端，这里除了使用 default 的 namespace 之外，还要修改 nfs 的配置 # cat deployment.yaml ......省略 containers: - name: nfs-client-provisioner image: quay.io/external_storage/nfs-client-provisioner:latest #网络不好要换成国内的镜像地址 volumeMounts: - name: nfs-client-root mountPath: /persistentvolumes env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.110.239 ### 这里要换成 nfs 主机的 地址 - name: NFS_PATH value: /ifs/kubernetes ### 这里要换成 nfs 的存储路径 volumes: - name: nfs-client-root nfs: server: 192.168.110.239 ### 这里要换成 nfs 主机的 地址 path: /ifs/kubernetes ### 这里要换成 nfs 的存储路径 部署： kubectl apply -f rbac.yaml kubectl apply -f class.yaml kubectl apply -f deployment.yaml 安装结果 [root@node01 deploy]# kubectl get pod NAME READY STATUS RESTARTS AGE nfs-client-provisioner-cf84d684-cxpmd 1/1 Running 0 6m37s [root@node01 deploy]# kubectl get sc NAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGE managed-nfs-storage fuseim.pri/ifs Delete Immediate false 6m40s [root@node01 deploy]# kubectl get serviceaccounts NAME SECRETS AGE default 1 3h48m nfs-client-provisioner 1 7m25s [root@node01 deploy]# kubectl logs nfs-client-provisioner-cf84d684-cxpmd I0404 05:53:56.745867 1 leaderelection.go:185] attempting to acquire leader lease default/fuseim.pri-ifs... E0404 05:53:56.759885 1 event.go:259] Could not construct reference to: '\u0026v1.Endpoints{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"fuseim.pri-ifs\", GenerateName:\"\", Namespace:\"default\", SelfLink:\"\", UID:\"522dc6e9-bb00-49bb-8d11-71a2f85be921\", ResourceVersion:\"19718\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:63753112436, loc:(*time.Location)(0x1956800)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string{\"control-plane.alpha.kubernetes.io/leader\":\"{\\\"holderIdentity\\\":\\\"nfs-client-provisioner-cf84d684-cxpmd_24f93740-950a-11eb-921c-c69636fbe444\\\",\\\"leaseDurationSeconds\\\":15,\\\"acquireTime\\\":\\\"2021-04-04T05:53:56Z\\\",\\\"renewTime\\\":\\\"2021-04-04T05:53:56Z\\\",\\\"leaderTransitions\\\":0}\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Subsets:[]v1.EndpointSubset(nil)}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'LeaderElection' 'nfs-client-provisioner-cf84d684-cxpmd_24f93740-950a-11eb-921c-c69636fbe444 became leader' I0404 05:53:56.759957 1 leaderelection.go:194] successfully acquired lease default/fuseim.pri-ifs I0404 05:53:56.759997 1 controller.go:631] Starting provisioner controller fuseim.pri/ifs_nfs-client-provisioner-cf84d684-cxpmd_24f93740-950a-11eb-921c-c69636fbe444! I0404 05:53:56.860178 1 controller.go:680] Started provisioner controller fuseim.pri/ifs_nfs-client-provisioner-cf84d684-cxpmd_24f93740-950a-11eb-921c-c69636fbe444! ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:5:1","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"验证安装 该 git 提供了两个测试例子：test-pod.yaml 和 test-claim.yaml ,创建 pvc 和 pod 去验证 nfs kubectl apply -f test-pod.yaml kubectl apply -f test-claim.yaml 验证是否正常 [root@node01 deploy]# kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE test-claim Bound pvc-35ef9c39-fa80-4b0e-9a3c-fdb755beddf9 1Mi RWX managed-nfs-storage 10s [root@node01 deploy]# kubectl get pod NAME READY STATUS RESTARTS AGE nfs-client-provisioner-cf84d684-brlfk 1/1 Running 0 71s test-pod 0/1 Completed 0 23s 查看日志，正常创建test-claim [root@node01 deploy]# kubectl logs -f nfs-client-provisioner-cf84d684-brlfk ...... I0404 06:15:53.548454 1 event.go:221] Event(v1.ObjectReference{Kind:\"PersistentVolumeClaim\", Namespace:\"default\", Name:\"test-claim\", UID:\"35ef9c39-fa80-4b0e-9a3c-fdb755beddf9\", APIVersion:\"v1\", ResourceVersion:\"22423\", FieldPath:\"\"}): type: 'Normal' reason: 'ProvisioningSucceeded' Successfully provisioned volume pvc-35ef9c39-fa80-4b0e-9a3c-fdb755beddf9 查看 nfs 存储，也成功创建 [root@node05 kubernetes]# ll total 0 drwxrwxrwx 2 root root 21 Apr 4 14:15 default-test-claim-pvc-35ef9c39-fa80-4b0e-9a3c-fdb755beddf9 [root@node05 kubernetes]# pwd /ifs/kubernetes pod状态为Completed则为正常，若长时间为ContainerCreating状态则为不正常，请确认安装操作步骤是否正确。 清除测试用例 kubelete delete -f test-claim.yaml \u0026\u0026 kubelete delete -f test-pod.yaml ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:6:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"helm 方式：安装 nfs-client 注意事项：与上面 yml 注意一样 nfs-client-provisioner部署到刚刚创建的nfs命名空间下 storageClass.name #指定storageClassName名称，用于 PVC 自动绑定专属动态 PV 上 需要指定NFS服务器的IP 地址(192.168.110.239)，以及共享名称路径(/ifs/kubernetes) ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:7:0","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["k8s"],"content":"创建 nfs 动态 pv 命名空间 kubectl create ns nfs ###配置 nfs-client 的启动参数 产看配置：helm show values helm-stable/nfs-client-provisioner cat \u003e /data/helm/nfs-client/nfs-client.yaml \u003c\u003c EOF # NFS 设置 nfs: server: 192.168.110.239 path: /ifs/kubernetes storageClass: # 此配置用于绑定 PVC 和 PV name: nfs-client-manager # 资源回收策略 #主要用于绑定的PVC删除后，资源释放后如何处理该PVC在存储设备上写入的数据。 #Retain：保留，删除PVC后，PV保留数据； #Recycle：回收空间，删除PVC后，简单的清除文件；（NFS和HostPath存储支持） #Delete：删除，删除PVC后，与PV相连接的后端存储会删除数据；（AWS EBS、Azure Disk、Cinder volumes、GCE PD支持） reclaimPolicy: Retain # 使用镜像 image: repository: azure/nfs-client-provisioner # 副本数量 #replicaCount: 1 EOF ###部署 nfs-client-provisioner helm 添加 charts 源 helm repo add helm-stable https://charts.helm.sh/stable helm repo add azure http://mirror.azure.cn/kubernetes/charts/ helm repo add incubator https://charts.helm.sh/incubator helm repo update 指定 chart 版本 helm install nfs-cleint-storage -n nfs --values nfs-client.yaml helm-stable/nfs-client-provisioner --version 1.2.8 不指定默认版本 helm install nfs-cleint-storage1 -n nfs --values nfs-client.yaml helm-stable/nfs-client-provisioner 查看版本 helm search repo nfs-client-provisioner 安装后校验 #查看 nfs namespace 下的 app helm list -n nfs #查看所有 namespace 的 app helm list -A ###不走配置文件，直接命令启动方式为： helm install nfs-storage helm-stable/nfs-client-provisioner \\ --set nfs.server=192.168.110.239 \\ --set nfs.path=/ifs/kubernetes \\ --set storageClass.name=nfs-storage \\ --set storageClass.defaultClass=true ","date":"2021-04-04","objectID":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/:7:1","tags":["k8s"],"title":"K8s环境 nfs 动态存储卷部署","uri":"https://www.zhaouncle.com/k8s%E7%8E%AF%E5%A2%83-nfs%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8D%B7%E9%83%A8%E7%BD%B2/"},{"categories":["nginx"],"content":"Nginx 允许 frame 嵌套","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["nginx"],"content":"X-Frame-Options The X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可以被其他域名进行嵌套 iframe 网页，被第三方调用。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。 然而 X-Frame-Options 是个已广泛支持的非官方标准，目前 Chrome 和 Firefox 均不支持。 语法 X-Frame-Options 有三个可能的值： X-Frame-Options: deny X-Frame-Options: sameorigin X-Frame-Options: allow-from https://example.com/ X-Frame-Options: allow-all ","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/:0:0","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["nginx"],"content":"指南 换一句话说，如果设置为 deny，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为sameorigin，那么页面就可以在同域名页面的 frame 中嵌套。 deny 表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。 sameorigin 表示该页面可以在相同域名页面的 frame 中展示。这里指的是同一个域名，比如你的 nginx server 配置的是 www.test.com，那么 abc.test.com 是不会被允许嵌套的。也就是只允许自己嵌套自己。 allow-from *uri* 表示该页面可以在指定来源的 frame 中展示。 ","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/:0:1","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["nginx"],"content":"例子 Note: 设置 meta 标签是无效的！例如 \u003cmeta http-equiv=\"X-Frame-Options\" content=\"deny\"\u003e 没有任何效果。不要这样用！只有当像下面示例那样设置 HTTP 头 X-Frame-Options 才会生效。 ","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/:1:0","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["nginx"],"content":"配置 nginx 配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 ‘http’, ‘server’ 或者 ‘location’ 的配置中: add_header X-Frame-Options sameorigin always; 配置允许其他域名嵌套： add_header X-Frame-Options \"ALLOW-FROM https://*.test.com\"; ","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/:1:1","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["nginx"],"content":"结果 在 Firefox 尝试加载 frame 的内容时，如果 X-Frame-Options 响应头设置为禁止访问了，那么 Firefox 会用 about:blank 展现到 frame 中。也许从某种方面来讲的话，展示为错误消息会更好一点。 以下为在 Google Chrome 的报错信息，能够正常访问，不过还是有报错。 参考页面 https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options ","date":"2021-04-02","objectID":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/:2:0","tags":["nginx"],"title":"Nginx 允许 frame 嵌套","uri":"https://www.zhaouncle.com/nginx%E5%85%81%E8%AE%B8frame%E5%B5%8C%E5%A5%97/"},{"categories":["ELK"],"content":"【ELK】重置 elasticsearch 的超管 elastic 账号密码","date":"2021-03-25","objectID":"https://www.zhaouncle.com/%E9%87%8D%E7%BD%AEes%E7%9A%84%E8%B6%85%E7%AE%A1elastic%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/","tags":["ELK","elasticsearch"],"title":"【ELK】重置 elasticsearch 的超管 elastic 账号密码","uri":"https://www.zhaouncle.com/%E9%87%8D%E7%BD%AEes%E7%9A%84%E8%B6%85%E7%AE%A1elastic%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"},{"categories":["ELK"],"content":"按照下述步骤创建本地超级账户，然后使用api接口本地超级账户重置elastic账户的密码 1. 没有忘记 elastic 的超管密码 直接通过 api 重置 elastic 超级管理员的密码 curl-H\"Content-Type:application/json\"-XPOST-uelastic'http://127.0.0.1:9200/_xpack/security/user/elastic/_password' -d '{ \"password\" : \"newpassword\" }' 2. 忘记了 elastic 的超管密码 确保你的配置文件中支持本地账户认证支持，如果你使用的是xpack的默认配置则无需做特殊修改；如果你配置了其他认证方式则需要确保配置本地认证方式在ES_HOME/config/elasticsearch.yml中； 使用命令 ES_HOME/bin/elasticsearch-users 创建一个基于本地问价认证的超级管理员 bin/elasticsearch-users useradd temp_admin -p temp_admin_passwd -r superuser 通过 api 重置 elastic 超级管理员的密码 curl-utemp_admin-ptemp_admin_passwd-XPUT'http://127.0.0.1:9200/_xpack/security/user/elastic/_password' -H 'Content-Type: application/json' -d' {\"password\": \"new_password\"} 校验下密码是否重置成功 curl-uelastic'http://localhost:9200/_xpack/security/_authenticate?pretty' 如果你确定后续不再使用本地认证则可将elasticsearch.yml文件中的本地文件认证方式删除掉； ","date":"2021-03-25","objectID":"https://www.zhaouncle.com/%E9%87%8D%E7%BD%AEes%E7%9A%84%E8%B6%85%E7%AE%A1elastic%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/:0:0","tags":["ELK","elasticsearch"],"title":"【ELK】重置 elasticsearch 的超管 elastic 账号密码","uri":"https://www.zhaouncle.com/%E9%87%8D%E7%BD%AEes%E7%9A%84%E8%B6%85%E7%AE%A1elastic%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"},{"categories":["证书"],"content":"获取免费通配符证书","date":"2021-03-04","objectID":"https://www.zhaouncle.com/%E8%8E%B7%E5%8F%96%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/","tags":["certs","证书"],"title":"获取免费通配符证书","uri":"https://www.zhaouncle.com/%E8%8E%B7%E5%8F%96%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/"},{"categories":["证书"],"content":"#acme.sh https://github.com/certbot/certbot #certbot https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E 安装 yum -y install epel-release yum install certbot -y ","date":"2021-03-04","objectID":"https://www.zhaouncle.com/%E8%8E%B7%E5%8F%96%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/:0:0","tags":["certs","证书"],"title":"获取免费通配符证书","uri":"https://www.zhaouncle.com/%E8%8E%B7%E5%8F%96%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/"},{"categories":["ELK"],"content":"【ELK】kibana 安装删除插件","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"安装插件 使用以下命令安装插件： bin/kibana-plugin install \u003cpackage name or URL\u003e 当您指定的插件名没有带 URL，插件工具将会尝试去下载 Elastic 官方插件。例如： $ bin/kibana-plugin install x-pack ","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/:1:0","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"通过指定的 URL 地址安装插件 您可以简单的指定插件名称来下载 Elastic 官方插件。也可以指定插件具体的 URL 来下载安装，例如： $ bin/kibana-plugin install https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-6.0.0.zip 您可以在 URL 中指定多种协议，例如 HTTP 、 HTTPS 或者 文件 协议。 ","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/:1:1","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"向指定的目录安装插件 在 install 命令后面通过 -d 或者 --plugin-dir 选项指定插件安装目录，例如： $ bin/kibana-plugin install file:///some/local/path/x-pack.zip -d path/to/directory 如果目录不存在，这条命令会创建这个目录。 ","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/:1:2","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"通过 Linux 安装包安装插件 Kibana 服务需要有 optimize 目录的写权限。如果您使用 sudo 或者 su 安装插件，您需要确保这些命令使用 kibana 用户执行。这个用户已经默认为您添加了，它用于包的安装。 $ sudo -u kibana bin/kibana-plugin install x-pack 如果插件使用了不同的用户安装且服务又没有运行起来，您就需要修改这些文件的所属用户： $ chown -R kibana:kibana /path/to/kibana/optimize 删除插件 通过删除当前版本重装新的插件来升级插件。 通过 remove 命令来删除插件： $ bin/kibana-plugin remove x-pack 您也可以通过手动删除 plugins/ 目录下的插件子目录来手动删除插件。 删除插件之后将会在下一次 Kibana 启动的时候触发一次 “优化（optimize）” 动作，可能会使启动有点延迟。 ","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/:1:3","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"关闭插件 使用如下命令来关闭插件： ./bin/kibana --\u003cplugin ID\u003e.enabled=false 关闭或打开插件将会在下一次 Kibana 启动的时候触发一次 “优化（optimize）” 动作，可能会使启动有点延迟。 您可以在 package.json 文件中通过 name 属性查看插件的 ID ","date":"2021-01-17","objectID":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/:2:0","tags":["ELK","kibana"],"title":"【ELK】kibana 安装删除插件","uri":"https://www.zhaouncle.com/kibana-%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6/"},{"categories":["ELK"],"content":"【ELK】elastalert 日志告警：邮件、钉钉、企业微信","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"一、环境 系统：centos7 elk 版本：7.6.2 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:0:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"1.1 ElastAlert 工作原理 周期性的查询Elastsearch并且将数据传递给规则类型，规则类型定义了需要查询哪些数据。 当一个规则匹配触发，就会给到一个或者多个的告警，这些告警具体会根据规则的配置来选择告警途径，就是告警行为，比如邮件、钉钉、tg、slack、企业微信等 ElastAlert 手册 二、安装配置 elastalert Tips：Elastalert 0.2.0 之后使用 Python 3.6，不再使用 Python 2 版本 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:1:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"2.1 安装 python3.6 #安装EPEL和IUS软件源 yum install epel-release -y yum install https://centos7.iuscommunity.org/ius-release.rpm -y #安装python3.6 yum install python36u python36u-devel python36u-pip -y #ln -s /usr/bin/python3.6 /bin/python3 #ln -s /usr/bin/pip3.6 /bin/pip3 ##2.2 安装 elastalert pip3 install elastalert ###2.2.1 配置 cd /opt/soft/ git clone https://github.com/Yelp/elastalert.git cd elastalert cp config.yaml.example config.yaml mkdir rules ###2.2.2 样例 https://github.com/Yelp/elastalert/tree/master/example_rules ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:2:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"2.2.3 config.yaml 配置文件 #规则目录 rules_folder: /opt/soft/elastalert/rules #多久从ES中查询一次 run_every: seconds: 30 #是查询窗口的大小，从每个查询运行的时间向后延伸。对于其中use_count_query或use_terms_query设置为true的规则，此值将被忽略。 buffer_time: minutes: 15 #连接elasticsearch配置 es_host: 127.0.0.1 es_port: 9200 es_username: elastic es_password: xxxxxxxx #elastalert索引名称 writeback_index: elastalert_status writeback_alias: elastalert_alerts #失败重试限制 alert_time_limit: days: 2 **以下配置没使用，只做介绍 ** #### 使用 TLS 连接诶 elastsearch #use_ssl: True #验证 tls 证书 #verify_certs: True #带正文的GET请求是Elasticsearch的默认选项。如果因为某些原因失败了，你可以通过'GET'，'POST'或'source',具体可以查看以下(http://elasticsearch-py.readthedocs.io/en/master/connection.html?highlight=send_get_body_as#transport) #es_send_get_body_as: GET # 开启 ssl 认证证书 #verify_certs: True #ca_certs: /path/to/cacert.pem #client_cert: /path/to/client_cert.pem #client_key: /path/to/client_key.key ###2.2.4 在 elasticsearch 中创建 elastalert 的日志索引 **Tips : **如果索引已存在，则不会重新创建 elastalert-create-index --index elastalert 输出结果： ProcessController: Elastic Version: 7.6.2 Reading Elastic 6 index mappings: Reading index mapping 'es_mappings/6/silence.json' Reading index mapping 'es_mappings/6/elastalert_status.json' Reading index mapping 'es_mappings/6/elastalert.json' Reading index mapping 'es_mappings/6/past_elastalert.json' Reading index mapping 'es_mappings/6/elastalert_error.json' ##2.3 常用命令 # 测试规则文件 elastalert-test-rule rule.yaml # 启动监控报警 python3 -m elastalert.elastalert --verbose --rule /root/elastalert/example_rules/rule.yaml ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:2:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"2.4 服务启动方法 Tips: 启动指定家目录的原因主要是有调用，可以少写路径，比如不需要指定 config.yml，rule 里面的 yml 文件可以少写路径指定== ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:3:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"2.4.1 service 启动管理 # 创建elastalert服务文件 vim /etc/systemd/system/elastalert.service [Unit] Description=elastalert After=elasticsearch.service [Service] Type=simple User=root Group=root Restart=on-failure WorkingDirectory=/opt/soft/elastalert ExecStart=/usr/bin/python3 -m elastalert.elastalert --verbose --config /opt/soft/elastalert/config.yaml [Install] WantedBy=multi-user.target ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:3:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"2.4.2 supervisor 启动管理 安装supervisor yum install -y supervisor systemctl enable supervisord 编写elastalert supervisord守护进程 vim /etc/supervisord.d/elastalert.ini [program:elastalert] directory=/opt/soft/elastalert command=/usr/bin/python3 -m elastalert.elastalert --verbose autostart=true startsecs=5 autorestart=true startretries=10 redirect_stderr=true stdout_logfile_maxbytes=20MB stdout_logfile_backups=5 stdout_logfile=/var/log/elastalert/elastalert.log 启动 systemctl enable supervisord systemctl restart supervisord systemctl start supervisord systemctl stop supervisord supervisorctl status 三、告警测试 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:3:2","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.1 es 测试索引 ###3.1.1 创建并推送数据到 index curl -X POST \"http://elastic:passwd@127.0.0.1:9200/test-alert/test\" -H 'Content-Type: application/json' -d '{\"@timestamp\": \"'$(date --iso-8601=seconds)'\", \"field\": \"value\"}' 输出： {\"_index\":\"test-alert\",\"_type\":\"test\",\"_id\":\"inH1I3cBMJwNYi416aLN\",\"_version\":1,\"result\":\"created\",\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"_seq_no\":0,\"_primary_term\":1} ###3.1.2 删除 index curl -X DELETE http://elastic:passwd@127.0.0.1:9200/test-alert 输出： {\"acknowledged\":true} ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:4:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.1.3 查看有哪些索引 curl 'http://elastic:passwd@127.0.0.1:9200/_cat/indices?v' ###3.1.4查看索引内容： curl -X GET http://elastic:passwd@127.0.0.1:9200/test-alert/_search 输出结果： {\"took\":2,\"timed_out\":false,\"shards\":{\"total\":1,\"successful\":1,\"skipped\":0,\"failed\":0},\"hits\":{\"total\":{\"value\":4,\"relation\":\"eq\"},\"max_score\":1.0,\"hits\":[{\"index\":\"test-alert\",\"type\":\"test\",\"id\":\"inH1I3cBMJwNYi416aLN\",\"score\":1.0,\"source\":{\"@timestamp\": \"2021-01-21T08:01:52+00:00\", \"field\": \"value\"}},{\"index\":\"test-alert\",\"type\":\"test\",\"id\":\"0ocXJHcBMJwNYi41y3rG\",\"score\":1.0,\"source\":{\"@timestamp\": \"2021-01-21T08:37:55+0000\", \"field\": \"value\"}},{\"index\":\"test-alert\",\"type\":\"test\",\"id\":\"aZAiJHcBMJwNYi41QTqW\",\"score\":1.0,\"source\":{\"@timestamp\": \"2021-01-21T08:49:20+0000\", \"field\": \"value\"}},{\"index\":\"test-alert\",\"type\":\"test\",\"id\":\"1ZMmJHcBMJwNYi41h4z8\",\"score\":1.0,\"source\":{\"@timestamp\": \"2021-01-21T08:54:00+0000\", \"field\": \"value\"}}]}} ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:4:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.2 邮件告警 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.2.1 创建测试告警规则 vim /opt/soft/elastalert/rules/emailtt.yml name: test-alert type: any # es 的监控索引 index: test-ale* # 发现 1 次就告警 num_events: 1 #1 分钟检查1次，和上面一起配合就是 1 分钟内触发 1 次规则就告警 timeframe: minutes: 1 #告警规则，查询索引内 field 字段的值 value，可以用正则进行匹配 filter: - query: query_string: query: \"field: *value*\" ## smtp 邮件 server 配置 smtp_host: smtp.zoho.com smtp_port: 465 smtp_ssl: true from_addr: \"test@qq.com\" ### 发送邮件的账号密码 smtp_auth_file: /opt/soft/elastalert/elastalert/smtp_auth_file.yml #告警方式 alert: - \"email\" #设置只需要的告警字段 include: [\"_index\",\"uri\",\"remote_addr\",\"http_x_forwarded_for\",\"status\"] #邮件标题 alert_subject: \"test-alert 正式环境 告警 {}\" #告警邮件接收人 email: - \"test@qq.com\" - \"test1@qq.comk\" ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.2.2 发送邮件的账号密码 vi /opt/soft/elastalert/elastalert/smtp_auth_file.yml # 发件箱的qq邮箱地址，也就是用户名 user: test@qq.com # 不是qq邮箱的登录密码，是授权码 password: passwd ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:2","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.2.3 启动告警规则并发送测试数据 cd /opt/soft/elastalert python3 -m elastalert.elastalert --verbose --rule /opt/soft/elastalert/rules/emailtt.yml ##3.3 钉钉告警 ###3.3.1 下载插件 cd /opt/soft/elastalert git clone https://github.com/xuyaoqiang/elastalert-dingtalk-plugin cp elastalert-dingtalk-plugin/elastalert_modules/dingtalk_alert.py elastalert/ ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:3","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.3.2 安装依赖 #查看依赖文件elastalert-dingtalk-plugin/requirements.txt，在对比 pip list 之后，我发现只需要安装以下内容即可 pip3 install pyOpenSSL==16.2.0 pip3 install requests==2.18.1 pip3 install setuptools\u003e=11.3 ###3.3.3 创建测试告警规则 vim /opt/soft/elastalert/rules/dingtt.yml name: Example frequency rule type: any index: test-alert num_events: 1 timeframe: minutes: 1 filter: - query: query_string: query: \"field: value\" #告警方式 alert: - \"elastalert.dingtalk_alert.DingTalkAlerter\" #钉钉接口 dingtalk_webhook: \"https://oapi.dingtalk.com/robot/send?access_token=钉钉机器人 api token\" dingtalk_msgtype: \"text\" ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:4","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.3.4 启动告警规则并发送测试数据 cd /opt/soft/elastalert python3 -m elastalert.elastalert --verbose --rule /opt/soft/elastalert/rules/dingtt.yml ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:5","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.3.5 钉钉机器人配置 具体可以查看钉钉机器人开发文档 最简单可以使用加 ip 方式 加关键字，就是发送到钉钉的信息里面有某个关键字 ###3.3.6 测试结果告警内容如下所示 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:5:6","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.4 微信告警 ###3.4.1 参考 https://github.com/anjia0532/elastalert-wechat-plugin https://anjia0532.github.io/2017/02/16/elastalert-wechat-plugin/ https://github.com/anjia0532/elastalert-docker ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:6:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"3.5 告警格式优化 # 注意上下字段对应 alert_text: | kibana_url: \"https://hostname:5601/app/kibana\" alarm_reason: \"1分钟内login.php至少被访问10次\" alarm_name: {} request_uri: {} request_ip: {} response_status: {} alert_text_args: - name - request - clientip - response alert_text_type: alert_text_only 四、kibana 添加 elastalert 插件 ##4.1 elastalert-kibana-plugin插件 kibana中elastalert插件，可以实现在kibana界面上编辑elastalert的告警规则配置。 kibana 的 elastalert 插件需要使用新的 bitsensor/elastalert api 服务 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:7:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.1.1 演示效果 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:7:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.2 安装 elastalert-kibana-plugin 官网主推：bitsensor/elastalert-kibana-plugin 但是楼上那个很多小版本都没有，以上没有的话推荐使用以下版本： nsano-rururu/elastalert-kibana-plugin 目前版本支持： Kibana 6.8.1～6.8.12、7.5.1～7.8.1 Kibana 7.9.0～7.9.3 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.2.1 安装命令 /usr/share/kibana/bin/kibana-plugin install https://github.com/nsano-rururu/elastalert-kibana-plugin/releases/download/1.2.0/elastalert-kibana-plugin-1.2.0-7.6.2.zip --allow-root ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:1","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.2.2 配置 默认情况下，插件将连接到 localhost:3030，也就是 kibana 和 elastalert 在同一台服务器上面，那么就不需要添加以下配置。如果您的ElastAlert服务器在其他主机或端口上运行，请在config / kibana.yml文件中添加更改以下选项： elastalert-kibana-plugin.serverHost: 192.168.1.1 elastalert-kibana-plugin.serverPort: 9000 ##4.3 安装 elastalert_docker 查看 nsano 提供的 elastalert api 服务支持列表 我使用的是 praecoapp/elastalert-server 提供的 docker 镜像对应 elastalert 0.2.4 版本 docker-compose sample 示例参考 ###4.3.1 安装命令 cd /opt/soft/ git clone https://github.com/bitsensor/elastalert.git elastalert_docker cd elastalert_docker mkdir rules ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:2","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.3.2 更改配置，api server 端用的配置是config.json vi config/config.json 因为我的 kibana 和 elastalert docker 是同一台机，所以我主要修改 es 的配置就可以 { \"appName\": \"elastalert-server\", \"port\": 3030, \"wsport\": 3333, \"elastalertPath\": \"/opt/elastalert\", \"verbose\": false, \"es_debug\": false, \"debug\": false, \"rulesPath\": { \"relative\": true, \"path\": \"/rules\" }, \"templatesPath\": { \"relative\": true, \"path\": \"/rule_templates\" }, \"es_host\": \"192.168.3.30\", \"es_port\": 9200, \"writeback_index\": \"elastalert_status\" } ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:3","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.3.3 更改 elastalert 配置 vi ./config/elastalert.yaml es_host: 192.168.3.30 es_port: 9200 rules_folder: rules run_every: seconds: 5 buffer_time: minutes: 1 es_username: elastic es_password: passwd writeback_index: elastalert_status alert_time_limit: days: 2 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:4","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.3.4 docker-compose.yml 配置文件 vi docker-compose.yml version: '3' services: elastalert: image: praecoapp/elastalert-server:20210104 container_name: elastalert hostname: elastalert restart: always network_mode: \"host\" ports: - \"3030:3030\" - \"3333:3333\" volumes: - ./config/elastalert.yaml:/opt/elastalert/config.yaml - ./config/elastalert-test.yaml:/opt/elastalert/config-test.yaml - ./config/config.json:/opt/elastalert-server/config/config.json - ./rules:/opt/elastalert/rules - ./rule_templates:/opt/elastalert/rule_templates #- ./elastalert:/opt/elastalert/elastalert，#这一句先注释掉，下面有个操作 ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:5","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.3.5 启动 docker-compose up -d ##然后把 docker 镜像里面的 elastalert 复制出来 docker cp elastalert:/opt/elastalert/elastalert . ##再把docker-compose.yml 里面的 volumes 的注释项去掉重新启动 docker-compose up -d ###4.3.6 配套钉钉插件和规则测试 cd /opt/soft/elastalert_docker git clone https://github.com/xuyaoqiang/elastalert-dingtalk-plugin cp elastalert-dingtalk-plugin/elastalert_modules/dingtalk_alert.py elastalert/ ##安装依赖 docker exec -it elastalert pip install pyOpenSSL==16.2.0 docker exec -it elastalert pip install requests==2.18.1 docker exec -it elastalert pip install setuptools\u003e=11.3 #创建规则 touch rules/dingtt.yml #授权，否则页面无法编辑，具体可以看下面的报错示例 chown centos.centos rules/dingtt.yml #重新启动 elastalert 容器 docker restart elastalert ##查看日志 docker logs -f --tail=20 elastalert ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:8:6","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["ELK"],"content":"4.4 出现的报错： 01:50:07.285Z ERROR elastalert-server: Routes: Request for '/rules/:id' failed with error: [Error: EACCES: permission denied, open '/opt/elastalert/rules/dingtt.yaml'] { errno: -13, code: 'EACCES', syscall: 'open', path: '/opt/elastalert/rules/dingtt.yaml' } 解决办法： 直接 chmod 777 -R /opt/soft/elastalert_docker/rules/ 直接 chown centos.centos /opt/soft/elastalert_docker/rules/* 五、告警规则详解 ElastAlert 规则介绍 ##5.1 告警类型 ElastAlert包含几种具有常见监视范例的规则类型： any: 匹配任何与给定过滤器匹配的事件,这个是查到了什么便直接报警，属于自定义选项； frequency: 匹配Y时间内至少有X个事件的地方 spike: 当事件发生率增加或减少时匹配，API 流量陡然上升并马上恢复的时候； flatline: 在Y时间内少于X个事件时进行匹配，内存或者CPU使用率下降的时候； blacklist并whitelist输入: 当某个字段与黑名单/白名单匹配时匹配，昨天的那个疑似爬虫的 IP 地址又出现了； change: 当某个字段在一段时间内具有两个不同的值时进行匹配，应用的状态突然从 UP 转为 DOWN； new_term: 当字段中出现从未见过的术语时进行匹配，某个枚举类型字段，突然出现了未定义的类型； cardinality:当字段的唯一值数量大于或小于阈值时匹配，线上的 API 服务器突然挂了一台，它是根据唯一值的数量来判定的； ##5.2 报警抑制：减少重复报警 # 用来区分报警，跟 realert 配合使用，在这里意味着， # 5 分钟内如果有重复报警，那么当 name 不同时，会当做不同的报警处理，可以是数组 query_key: - name # 5 分钟内相同的报警不会重复发送 realert: minutes: 5 # 指数级扩大 realert 时间，中间如果有报警， # 则按照 5 -\u003e 10 -\u003e 20 -\u003e 40 -\u003e 60 不断增大报警时间到制定的最大时间， # 如果之后报警减少，则会慢慢恢复原始 realert 时间 exponential_realert: hours: 1 ##5.3 报警聚合：相同报警，聚合为一条 # 根据报警的内，将相同的报警安装 name 来聚合 aggregation_key: name # 聚合报警的内容，只展示 name 与 message summary_table_fields: - name - message ##5.4 报警格式化：突出重要信息 在这里，你可以自定义 alert 的内容，它的内部使用 Python 的 format 来实现的。 alert_subject: \"Error {} @{}\" alert_subject_args: - name - \"@timestamp\" alert_text_type: alert_text_only alert_text: | ### Error frequency exceeds \u003e Name: {} \u003e Message: {} \u003e Host: {} ({}) alert_text_args: - name - message - hostname - host #六、告警接收方式 Email Slack 企业微信 钉钉 alerta：https://github.com/alerta/alerta，告警接收平台 JIRA OpsGenie Commands HipChat MS Teams Telegram AWS SNS VictorOps PagerDuty Exotel Twilio Gitter 七、告警需求整理 整理下实施ELK最起码要实现的需求： 查询条件（精确匹配）：一级域名、二级域名、客户真实IP、HTTP状态码、HTTP方法、request_time、response_time、代理IP、body_bytes_sent 查询条件（模糊匹配）：url（如查找SQL注入关键字）、refere（流量来源）、agent（如查找搜索引擎） 近期（1周、1个月）内整体请求量走势情况； 如果发现总体走势异常，要很方便找到那个域名走势异常； 过去一个周期内（1天、1周、1月）所有请求构成，按不同域名出饼图； 实时监控爬虫IP过高的频率访问（如单个IP1分钟请求超过100次报警）； 实时监控500状态请求情况（如单个域名1分钟出现30个500就报警）； 参考 https://github.com/Yelp/elastalert https://github.com/bitsensor/elastalert https://github.com/bitsensor/elastalert-kibana-plugin https://github.com/xuyaoqiang/elastalert-dingtalk-plugin https://github.com/anjia0532/elastalert-wechat-plugin https://segmentfault.com/a/1190000017553282 https://blog.csdn.net/wenwenxiong/article/details/106048313 https://www.cnblogs.com/liuxinyustu/articles/14228934.html ","date":"2021-01-15","objectID":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/:9:0","tags":["ELK","elastalert"],"title":"【ELK】elastalert 日志告警","uri":"https://www.zhaouncle.com/elasticleart-%E5%91%8A%E8%AD%A6/"},{"categories":["prometheus","监控"],"content":"【Prometheus】热加载方法","date":"2021-01-11","objectID":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/","tags":["prometheus"],"title":"Prometheus热加载方法","uri":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/"},{"categories":["prometheus","监控"],"content":"在运行时热加载Prometheus的配置信息 Promtheus的时序数据库在存储了大量的数据后，每次重启Prometheus进程的时间会越来越慢，还会导致数据丢失甚至触发报警（报警系统肯定要两套才能符合互相热备避免唯一性）。 而在日常运维工作中会经常调整Prometheus的配置信息，实际上Prometheus提供了在运行时热加载配置信息的功能。 ","date":"2021-01-11","objectID":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/:0:0","tags":["prometheus"],"title":"Prometheus热加载方法","uri":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/"},{"categories":["prometheus","监控"],"content":"Prometheus配置的热加载 Prometheus配置信息的热加载有两种方式： ###第一种热加载方式： 查看Prometheus的进程id，发送SIGHUP信号: kill -HUP \u003cpid\u003e ###第二种热加载方式： 发送一个POST请求到/-/reload，需要在启动时给定--web.enable-lifecycle选项： curl -X POST http://localhost:9090/-/reload 如果配置热加载成功，Prometheus会打印出下面的log Loading configuration file: Jan 11 02:48:22 proxy01 prometheus[392]: level=info ts=2021-01-11T02:48:22.215Z caller=main.go:799 msg=\"Loading configuration file\" filena...heus.yml ###我们使用的是第一种热加载方式，systemd unit文件如下： 我的 prometheus 是在 centos7 系统下面yum 安装的 rpm 包，默认是没有 ExecReload 的系统启动配置，只有 start，所以加上这一句则可。 [root@ld_proxy01 ~]# cat /etc/systemd/system/prometheus.service [Unit] Description=Prometheus Wants=network-online.target After=network-online.target [Service] User=prometheus Group=prometheus CPUAffinity=3 Type=simple ExecStart=/etc/prometheus/prometheus \\ --config.file /etc/prometheus/prometheus.yml \\ --storage.tsdb.path /var/lib/prometheus/ \\ --storage.tsdb.retention.time=90d \\ --web.console.templates=/etc/prometheus/consoles \\ --web.console.libraries=/etc/prometheus/console_libraries \\ --web.external-url=http://prometheus.op.hwtech.hk:10080 ExecReload=/bin/kill -HUP $MAINPID [Install] WantedBy=multi-user.target 然后重新加载一下配置即可，一定要执行，否则会报错。 systemctl daemon-reload 在更改完/etc/prometheus/prometheus.yml之后，仅需要重新加载配置，而不需重启进程时，只需要运行以下命令即可。 systemctl reload prometheus ","date":"2021-01-11","objectID":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/:1:0","tags":["prometheus"],"title":"Prometheus热加载方法","uri":"https://www.zhaouncle.com/prometheus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/"},{"categories":["nginx"],"content":"【Nginx】 正则在线测试","date":"2021-01-05","objectID":"https://www.zhaouncle.com/nginx-rule%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95/","tags":["nginx"],"title":"【Nginx】 正则在线测试","uri":"https://www.zhaouncle.com/nginx-rule%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95/"},{"categories":["nginx"],"content":"##起因 nginx 测试基本都是本地起一个 nginx 服务，然后修改 conf 配置文件进行测试，那么，有没有更方便快捷的方法呢？ 虽然网上有很多正则表达式的网站，但是因为 nginx 和这些网站的正则表达式引擎略有不同，所以很多在线测试的结果是不准确的。 nginx使用的是 PCRE，官方文档介绍 ##方法 nginx 官方提供了一个基于 php 编写的正则测试器 nginx-regex-tester，可以用 docker-compose 直接启动 测试成功截图；Result: Match found 测试失败截图：Result：Match not found ###注意问题： 如果你在 docker-compose up -d 很慢，主要是因为 Dockerfile 的 nginx 镜像使用的国外源 确认 nginx 是什么系统，在 dockerfile 加入这两句去判断 RUN cat /etc/issue RUN cat /etc/os-release 我刚确认用的是 debian buster 系统，所以直接更换为清华源就好了， RUN echo \"deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free \\n\\ deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free \\n\\ deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free \\n\\ deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\" \u003e /etc/apt/sources.list 如图所示； https://www.nginx.com/blog/regular-expression-tester-nginx/ ","date":"2021-01-05","objectID":"https://www.zhaouncle.com/nginx-rule%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95/:0:0","tags":["nginx"],"title":"【Nginx】 正则在线测试","uri":"https://www.zhaouncle.com/nginx-rule%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95/"},{"categories":["nginx"],"content":"【Nginx】url 带有 “https://” 双斜杠特殊处理","date":"2021-01-05","objectID":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/","tags":["nginx"],"title":"【Nginx】url 带有 “https://” 双斜杠特殊处理","uri":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/"},{"categories":["nginx"],"content":"问题 最近发现经常有客户端出现 url 复制两次访问的情况，导致触发了 waf 无法访问 403。所以就想着怎么处理，解决这个问题。 当用户请求：https://www.test.com/https://www.test.com/或者https://www.test.com/https://www.test.com会出问题 ###原因 开启压缩之后，nginx 的 uri 会默认把双斜杆//自动合并为单斜杆/ ###方法一：merge_slashes 启用或禁用将URI中的两个或多个相邻斜杠压缩为单个斜杠。处于安全考虑，一般不关闭。 merge_slashes off; ","date":"2021-01-05","objectID":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/:0:1","tags":["nginx"],"title":"【Nginx】url 带有 “https://” 双斜杠特殊处理","uri":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/"},{"categories":["nginx"],"content":"方法二： if ( $uri ~ \"http:(/)localhost(/|)$\" ) { rewrite ^ $scheme://$host:$server_port/ break; } ###方法三： if ( $uri ~ \"http:/(.*)localhost(/|)$\" ) { rewrite ^ $scheme://$host:$server_port/ break; } 参考 http://nginx.org/en/docs/http/ngx_http_core_module.html#merge_slashes https://stackoverflow.com/questions/38175840/match-and-redirect-http-double-slash-from-uri-path-with-nginx ","date":"2021-01-05","objectID":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/:0:2","tags":["nginx"],"title":"【Nginx】url 带有 “https://” 双斜杠特殊处理","uri":"https://www.zhaouncle.com/nginx-uri%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86/"},{"categories":["Thoughts","人物自传"],"content":"应尽便须尽，无复独多虑。","date":"2021-01-05","objectID":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/","tags":["陶渊明"],"title":"陶渊明","uri":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/"},{"categories":["Thoughts","人物自传"],"content":"陶渊明 陶渊明（约365～427年），字元亮，晚年更名潜，字渊明。别号五柳先生，私谥靖节，世称靖节先生。浔阳柴桑人（今江西九江）人。东晋末到刘宋初杰出的诗人、辞赋家、散文家。被誉为“隐逸诗人之宗”、“田园诗派之鼻祖”。是江西首位文学巨匠。曾任江州祭酒、建威参军、镇军参军、彭泽县令等职，最末一次出仕为彭泽县令，八十多天便弃职而去，从此归隐田园。他是中国第一位田园诗人，被称为“古今隐逸诗人之宗”，有《陶渊明集》。 ","date":"2021-01-05","objectID":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/:0:0","tags":["陶渊明"],"title":"陶渊明","uri":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/"},{"categories":["Thoughts","人物自传"],"content":"形影神三首 贵贱贤愚，莫不营营以惜生，斯甚惑焉；故极陈形影之苦，言神辨自然以释之。好事君子，共取其心焉。 形赠影 天地长不没，山川无改时。 草木得常理，霜露荣悴之。 谓人最灵智，独复不如兹。 适见在世中，奄去靡归期。 奚觉无一人，亲识岂相思。 但余平生物，举目情凄洏。 我无腾化术，必尔不复疑。 愿君取吾言，得酒莫苟辞。 影答形 存生不可言，卫生每苦拙。 诚愿游昆华，邈然兹道绝。 与子相遇来，未尝异悲悦。 憩荫若暂乖，止日终不别。 此同既难常，黯尔俱时灭。 身没名亦尽，念之五情热。 立善有遗爱，胡为不自竭？ 酒云能消忧，方此讵不劣！ 神释 大钧无私力，万理自森著。 人为三才中，岂不以我故。 与君虽异物，生而相依附。 结托既喜同，安得不相语。 三皇大圣人，今复在何处？ 彭祖爱永年，欲留不得住。 老少同一死，贤愚无复数。 日醉或能忘，将非促龄具？ 立善常所欣，谁当为汝誉？ 甚念伤吾生，正宜委运去。 纵浪大化中，不喜亦不惧。 应尽便须尽，无复独多虑。 ","date":"2021-01-05","objectID":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/:1:0","tags":["陶渊明"],"title":"陶渊明","uri":"https://www.zhaouncle.com/%E9%99%B6%E6%B8%8A%E6%98%8E/"},{"categories":["Thoughts","随笔"],"content":"于二零二零年：终章","date":"2020-12-28","objectID":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/","tags":["无言"],"title":"于二零二零年：终章","uri":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/"},{"categories":["Thoughts","随笔"],"content":"2020 年年终有感 ###摘抄 人生难得是从容。 难的是放下现有能得到的触手可及，去追寻未知。 我要在你平庸无奇的回忆里，做一个闪闪发光的神经病。 我天性不宜交际。 在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。 可是我既不愿忍受对方的乏味，也不愿费劲 使自己显得有趣， 那都太累了。 我独处时最轻松，因为我不觉得自己乏味。 即使乏味，也自己承受， 不累及他人，无需感到不安。 ——周国平《风中的纸屑》 你要克服懒惰，你要克服游手好闲，你要克服漫长的白日梦，你要克服一蹴而就的妄想，你要克服自以为是浅薄的幽默感。你要独立生长在这世上，不寻找不依靠，因为冷漠寡情的人孤独一生。你要坚强，振作，自立，不能软弱，逃避，害怕。不要沉溺在消极负面得情绪里，要正面阳光得对待生活和爱你的人。 ——网易云热评 我因为爱你，所以常常想跟你道歉。我的爱沉重、污浊，里面带有许多令人不快的东西，比如悲伤、忧愁、自怜、绝望，我的心又这样脆弱不堪，自己总被这些负面情绪打败，好像在一个沼泽里越挣扎越下沉。而我爱你，就是想把你也拖进来，却希望你救我。 人们迟早会发现自己爱的不是现实中的他,而是想象中的他,现实中的他只是他们所创造梦中情人 的一个模板,他们迟早会发现梦中情人与模板的差距,适应了就走下去没适应就分开,你与大多数 人不同的是,你不需要模板” “但是我喜欢上了一个不存在的人,她只是我虚构出来的,这难道不是一种病态? \" “不,不是,其实你很幸运,不管他是不是真是存在,能爱就很幸运了。 —— 刘慈欣《三体》 我所有的自负皆来自我的自卑，所有的英雄气概都来自于我的软弱。嘴里振振有词是因为心里满是怀疑，深情是因为痛恨自己无 情。这世界没有一件事是虚空而生的，站在光里，背后就会有阴影，这深夜里一片静默，是因为你没有听见声音。 ——坦白书 每个人都不是一座孤岛，一个人必须是这世界最坚固的岛屿，然后才能成为大陆的一部分。 ——海明威 ","date":"2020-12-28","objectID":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/:0:0","tags":["无言"],"title":"于二零二零年：终章","uri":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/"},{"categories":["Thoughts","随笔"],"content":"二零二零年：终章 ###技术： dev： python 完成了一个发布项目的改编，计划：改为 drf go 集成 k8s 了解底层基础，并且参与一套控制系统源码改编 jenkins pipeline 改写 demo 和 stage 环境，使用 library ops： aws、google、azure 云平台建设 ####other： blog：博客园和 hugo ###生活： 感情史：空白 舔狗日记：无 亲情：还是保持一贯的沉默 ###经济： 希望有存款 ","date":"2020-12-28","objectID":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/:1:0","tags":["无言"],"title":"于二零二零年：终章","uri":"https://www.zhaouncle.com/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E9%9B%B6%E5%B9%B4%E7%BB%88%E7%AB%A0/"},{"categories":["Golang"],"content":"【Golang】练习 tailf 简单模拟","date":"2020-12-06","objectID":"https://www.zhaouncle.com/%E7%BB%83%E4%B9%A0-tailf%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/","tags":["Golang","go"],"title":"【Golang】练习 tailf 简单模拟","uri":"https://www.zhaouncle.com/%E7%BB%83%E4%B9%A0-tailf%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/"},{"categories":["Golang"],"content":" package main import ( \"bufio\" \"flag\" \"fmt\" \"io\" \"log\" \"os\" ) //命令行参数解析 func FlagMsg() string { //定义命令行参数方式1 var ( follow string ) flag.StringVar(\u0026follow, \"f\", \"\", \"filepath\") //解析命令行参数 flag.Parse() return follow } func main() { filepath := FlagMsg() file, err := os.Open(filepath) if err != nil { log.Fatalf(\"Open file fail:%v\", err) } defer file.Close() reader := bufio.NewReader(file) for { line, err := reader.ReadString('\\n') if err != nil { if err == io.EOF { // time.Sleep(1 * time.Second) continue } else { break } } fmt.Println(string(line)) } } 使用命令： go run main.go -f filepath ","date":"2020-12-06","objectID":"https://www.zhaouncle.com/%E7%BB%83%E4%B9%A0-tailf%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/:0:0","tags":["Golang","go"],"title":"【Golang】练习 tailf 简单模拟","uri":"https://www.zhaouncle.com/%E7%BB%83%E4%B9%A0-tailf%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/"},{"categories":["Golang"],"content":"【Golang】基础-切片 for 循环删除元素","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["Golang"],"content":"#1. 问题 ","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/:0:0","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["Golang"],"content":"1.1 需求 a := []int{1, 2, 3, 4, 5}，slice 删除大于 3 的数字 #2. 解决 ","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/:1:0","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["Golang"],"content":"方法 1 package main import \"fmt\" func main() { a := []int{1, 2, 3, 4, 5} for i := 0; i \u003c len(a); i++ { if a[i] \u003e 3 { a = append(a[:i], a[i+1:]...) i-- } } fmt.Println(a) } ","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/:2:0","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["Golang"],"content":"方法 2 package main import \"fmt\" func main() { a := []int{1, 2, 3, 4, 5} j := 0 for _, v := range a { if v \u003c= 3 { a[j] = v j++ } } a = a[:j] fmt.Println(a) } ","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/:3:0","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["Golang"],"content":"方法 3 package main import \"fmt\" func main() { a := []int{1, 2, 3, 4, 5} j := 0 q := make([]int, len(a)) for _, v := range a { if v \u003c= 3 { q[j] = v j++ } } q = q[:j] // q is copy with numbers \u003e= 0 fmt.Println(q) } ","date":"2020-12-03","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/:4:0","tags":["Golang","go"],"title":"【Golang】基础-切片 for 循环删除元素","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E5%88%87%E7%89%87slice%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4/"},{"categories":["证书"],"content":"curl 和 java 报证书请求错误","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"1. 说明： 以下：例子的域名因为工作环境的问题，被我拿自己的博客域名替代了，所以无法进行模拟测试，请珍重，哈哈！ 2. 环境： centos：7.5 java jdk：1.8.0_74 3. curl 请求报错 [root@test01 tmp]# curl \"https://www.zhaouncle.com/api/v2/app/getBopomofo?source=%e8%b5%b5%e8%b6%99\" curl: (60) Peer's Certificate issuer is not recognized. More details here: http://curl.haxx.se/docs/sslcerts.html curl performs SSL certificate verification by default, using a \"bundle\" of Certificate Authority (CA) public keys (CA certs). If the default bundle file isn't adequate, you can specify an alternate file using the --cacert option. If this HTTPS server uses a certificate signed by a CA represented in the bundle, the certificate verification probably failed due to a problem with the certificate (it might be expired, or the name might not match the domain name in the URL). If you'd like to turn off curl's verification of the certificate, use the -k (or --insecure) option. ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:0:0","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"3.1 解决办法一，治本之法 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:1:0","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"3.1.1 Firefox 火狐浏览器 打开 https://www.zhaouncle.com，然后依次点击以下操作 “🔐安全锁图标”——》“向右箭头”——》“更多信息”——》“查看证书”——》“中间那个证书”，下载为 pem 文件 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:1:1","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"3.1.2 进入 centos 系统 将下载的 pem 文件放入/etc/pki/ca-trust/source/anchors 目录，然后执行 update-ca-trust extract 命令 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:1:2","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"3.2 解决办法二**，治标** curl -k 或者 curl --insecure，在命令行上直接避免证书校验 curl -k \"https://www.zhaouncle.com/api/v2/app/getBopomofo?source=%e8%b5%b5%e8%b6%99\" curl --insecure \"https://www.zhaouncle.com/api/v2/app/getBopomofo?source=%e8%b5%b5%e8%b6%99\" ##3.3 解决办法三**，治标** ###3.3.1 wget 解决方法： echo \"check_certificate = off\" \u003e\u003e ~/.wgetrc ###3.3.2 curl 解决方法： echo \"insecure\" \u003e\u003e ~/.curlrc 4. Java 和 curl 都请求证书错误 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:2:0","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"4.1 以下是 curl 报错： [centos@test01 ~]$ curl \"https://www.zhaouncle.com/api/v2/app/getBopomofo?source=%e8%b5%b5%e8%b6%99\" curl: (60) Peer's Certificate issuer is not recognized. More details here: http://curl.haxx.se/docs/sslcerts.html curl performs SSL certificate verification by default, using a \"bundle\" of Certificate Authority (CA) public keys (CA certs). If the default bundle file isn't adequate, you can specify an alternate file using the --cacert option. If this HTTPS server uses a certificate signed by a CA represented in the bundle, the certificate verification probably failed due to a problem with the certificate (it might be expired, or the name might not match the domain name in the URL). If you'd like to turn off curl's verification of the certificate, use the -k (or --insecure) option. [centos@test01 ~]$ ping www.zhaouncle.com PING www.zhaouncle.com (10.0.0.100) 56(84) bytes of data. 64 bytes from test01 (10.0.0.100): icmp_seq=1 ttl=64 time=262 ms 64 bytes from test01 (10.0.0.100): icmp_seq=2 ttl=64 time=262 ms 64 bytes from test01 (10.0.0.100): icmp_seq=3 ttl=64 time=262 ms ^C --- www.zhaouncle.com ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2002ms rtt min/avg/max/mdev = 262.636/262.636/262.637/0.418 ms ##4.2 以下是 java 请求 www 证书报错 org.springframework.web.client.ResourceAccessException: I/O error on GET request for \"https://www.zhaouncle.com/api/v2/app/getBopomofo\": sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; nested exception is javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:3:0","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"4.3 说明 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:4:0","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"4.3.1 疑问：大家肯定很好奇我为啥会 ping 域名，然后还是内网 ip？ 解答：因为绑定了 hosts，然后请求的是内网 ip，于是走的是本地的 nginx，nginx 配置了证书，而不是外部的 cdn，如果是走外部请求走 cdn，curl 和 java 都不会报错，因为 cdn 已经绑定了证书，这个证书上传了证书链。哎，没错了，证书链。 ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:4:1","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"4.3.2 何谓证书链 加速 https 需要上传 SSL 证书，打开公钥 domain.com.crt ，发现里面有 3 个证书： 证书链。一般是一个用户证书，一个中间证书，和一个根证书。 一般只需要 用户证书+中间证书 就可以了, 根证书不用传, 除非你这个证书链不是三级,而是有两个中间证书. 一般来讲，只有传 用户证书 才能正常工作，可以同时传 用户证书和中间证书 或者 用户证书和中间证书和根证书 注意这些证书必须在同一个文件里面 格式如下： -----BEGIN CERTIFICATE----- MIIFSzCCBDOgAwIBAgIQHV3ex3xRLXOHkz2GjVAKrjANBgkqhkiG9w0BAQsFADCB ......后面省略，第一个是用户证书 -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIGCDCCA/CgAwIBAgIQKy5u6tl1NmwUim7bo3yMBzANBgkqhkiG9w0BAQwFADCB ......后面省略，第二个是中间证书 -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFdDCCBFygAwIBAgIQJ2buVutJ846r13Ci/ITeIjANBgkqhkiG9w0BAQwFADBv ......后面省略，第三个是根证书 -----END CERTIFICATE----- ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:4:2","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["证书"],"content":"4.3.3 解决： 解决方法：在哪 nginx 那里把 www 的 crt 证书添加进中间证书，ok，就解决了所以问题，而且还不需要 步骤 3 但对对系统和命令行进行从处理，就可以解决问题。 参考：https://ep.gnt.md/index.php/curl-60-peers-certificate-issuer-is-not-recognized/ ","date":"2020-12-01","objectID":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/:4:3","tags":["certs","证书"],"title":"curl 和 java 报证书请求错误","uri":"https://www.zhaouncle.com/curl%E5%92%8Cjava%E6%8A%A5%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF/"},{"categories":["Golang"],"content":"【Golang】Godoc 或者第三方 plugins 插件介绍","date":"2020-11-30","objectID":"https://www.zhaouncle.com/godoc%E6%88%96%E8%80%85plugins%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/","tags":["Golang","go"],"title":"Golang】Godoc 或者第三方 plugins 插件介绍","uri":"https://www.zhaouncle.com/godoc%E6%88%96%E8%80%85plugins%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/"},{"categories":["Golang"],"content":"#自带插件： https://golang.org/pkg/ #第三方插件： https://godoc.org/ ","date":"2020-11-30","objectID":"https://www.zhaouncle.com/godoc%E6%88%96%E8%80%85plugins%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/:0:0","tags":["Golang","go"],"title":"Golang】Godoc 或者第三方 plugins 插件介绍","uri":"https://www.zhaouncle.com/godoc%E6%88%96%E8%80%85plugins%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/"},{"categories":["Golang"],"content":"【Golang】基础-操作 csv","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1. encoding/csv，自带极简 ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:0:0","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.1 写数据到csv文件 知识点： Write 方法使用[]string的切片格式追加方式写入数据 ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:1:0","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.1.1 追加写入 package main import ( \"encoding/csv\" \"fmt\" \"log\" \"os\" \"github.com/spf13/cast\" ) type User struct { ID int64 Name string Tel string Addr string } func StructToCsv(filename string, UsersDb []User) { newFile, err := os.Create(filename) if err != nil { fmt.Println(err) } defer func() { newFile.Close() }() // 写入UTF-8 newFile.WriteString(\"\\xEF\\xBB\\xBF\") // 写入UTF-8 BOM，防止中文乱码 // 写数据到csv文件 w := csv.NewWriter(newFile) header := []string{\"ID\", \"Name\", \"Tel\", \"Addr\"} //标题 w.Write(header) for _, v := range UsersDb { context := []string{ cast.ToString(v.ID), v.Name, v.Tel, v.Addr, } // data = append(data, context) w.Write(context) } if err := w.Error(); err != nil { log.Fatalln(\"error writing csv:\", err) } w.Flush() } func main() { Users1 := []User{ {1, \"admin\", \"adminTel\", \"adminAddr\"}, {2, \"test\", \"testTel\", \"testAddr\"}, } StructToCsv(\"user.csv\", Users1) } ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:1:1","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.1.2 一次性写入 知识点：WriteAll 使用[][] [][]string 格式一次性写入数据，覆盖 csv 文件 package main import ( \"encoding/csv\" \"fmt\" \"os\" \"github.com/spf13/cast\" ) type User struct { ID int Name string Tel string Addr string } func StructToCsv(filename string, UsersDb []User) { newFile, err := os.Create(filename) if err != nil { fmt.Println(err) } defer func() { newFile.Close() }() // 写入UTF-8 newFile.WriteString(\"\\xEF\\xBB\\xBF\") // 写入UTF-8 BOM，防止中文乱码 // 写数据到csv文件 w := csv.NewWriter(newFile) header := []string{\"ID\", \"Name\", \"Tel\", \"Addr\"} //标题 data := [][]string{ header, } for _, v := range UsersDb { context := []string{ cast.ToString(v.ID), v.Name, v.Tel, v.Addr, } data = append(data, context) } w.WriteAll(data) // WriteAll方法使用Write方法向w写入多条记录，并在最后调用Flush方法清空缓存。 w.Flush() } func main() { Users1 := []User{ {1, \"admin\", \"adminTel\", \"adminAddr\"}, {2, \"test\", \"testTel\", \"testAddr\"}, } StructToCsv(\"user.csv\", Users1) } ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:1:2","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.1.3 执行结果 ID,Name,Tel,Addr 1,admin,adminTel,adminAddr 2,test,testTel,testAddr ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:1:3","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.2 读取 csv 文件 ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:2:0","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.2.1 Read，逐条读取为[]string格式的数据 package main import ( \"encoding/csv\" \"fmt\" \"io\" \"log\" \"os\" \"github.com/spf13/cast\" ) type User struct { ID int Name string Tel string Addr string } var Users []*User func CsvToDb(filename string) { f, err := os.Open(filename) if err != nil { fmt.Println(\"Error: \", err) } reader := csv.NewReader(f) result1 := make([][]string, 0) result2 := make([][]string, 0) for { record, err := reader.Read() if err == io.EOF { break } if err != nil { log.Fatal(err) } result1 = append(result1, record) } for k, _ := range result1 { if result1[k][1] == \"Name\" \u0026\u0026 result1[k][2] == \"Tel\" \u0026\u0026 result1[k][3] == \"Addr\" { result2 = append(result1[:k], result1[k+1:]...) } } for _, v := range result2 { user := \u0026User{ ID: cast.ToInt(v[0]), Name: v[1], Addr: v[2], Tel: v[3], } Users = append(Users, user) } for _, v := range Users { fmt.Println(v) } } func main() { CsvToDb(\"user.csv\") } ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:2:1","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"1.2.2 ReadAll，一次性读取为[][]string格式的数据 package main import ( \"encoding/csv\" \"fmt\" \"os\" \"github.com/spf13/cast\" ) type User struct { ID int Name string Tel string Addr string } var Users []*User func CsvToDb(filename string) { f, err := os.Open(filename) if err != nil { fmt.Println(\"Error: \", err) } reader := csv.NewReader(f) // 可以一次性读完 result, err := reader.ReadAll() if err != nil { fmt.Println(\"Error: \", err) } result1 := make([][]string, 0) for k, _ := range result { if result[k][1] == \"Name\" \u0026\u0026 result[k][2] == \"Tel\" \u0026\u0026 result[k][3] == \"Addr\" { result1 = append(result[:k], result[k+1:]...) } } for _, v := range result1 { user := \u0026User{ ID: cast.ToInt(v[0]), Name: v[1], Addr: v[2], Tel: v[3], } Users = append(Users, user) } for _, v := range Users { fmt.Println(v) } } func main() { CsvToDb(\"user.csv\") } 2. github.com/gocarina/gocsv 简单案例： package main import ( \"fmt\" \"os\" \"github.com/gocarina/gocsv\" ) type Client struct { // Our example struct, you can use \"-\" to ignore a field ID string `csv:\"ID\"` Name string `csv:\"Name\"` Tel string `csv:\"Tel\"` Addr string `csv:\"-\"` } // type Client struct { // Our example struct, you can use \"-\" to ignore a field // ID string \"ID\" // Name string \"Name\" // Tel string \"Tel\" // Addr string \"-\" // } func main() { clientsFile, err := os.OpenFile(\"user.csv\", os.O_RDWR|os.O_CREATE, os.ModePerm) if err != nil { panic(err) } defer clientsFile.Close() clients := []*Client{} if err := gocsv.UnmarshalFile(clientsFile, \u0026clients); err != nil { // Load clients from file panic(err) } for _, client := range clients { fmt.Println(\"Hello\", client.Name) } if _, err := clientsFile.Seek(0, 0); err != nil { // Go to the start of the file panic(err) } clients = append(clients, \u0026Client{ID: \"12\", Name: \"John\", Tel: \"21\"}) // Add clients clients = append(clients, \u0026Client{ID: \"13\", Name: \"Fred\"}) clients = append(clients, \u0026Client{ID: \"14\", Name: \"James\", Tel: \"32\"}) clients = append(clients, \u0026Client{ID: \"15\", Name: \"Danny\"}) csvContent, err := gocsv.MarshalString(\u0026clients) // Get all clients as CSV string //err = gocsv.MarshalFile(\u0026clients, clientsFile) // Use this to save the CSV back to the file if err != nil { panic(err) } fmt.Println(csvContent) // Display all clients as CSV string } 执行结果： ~/Documents/projects/scripts/go/eg  cat user.csv ﻿ID,Name,Tel,Addr 1,admin,adminTel,adminAddr 2,test,testTel,testAddr ~/Documents/projects/scripts/go/eg  go run 2.go Hello admin Hello test ID,Name,Tel ,admin,adminTel ,test,testTel 12,John,21 13,Fred, 14,James,32 15,Danny, ","date":"2020-11-25","objectID":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/:2:2","tags":["Golang","go"],"title":"【Golang】基础-操作 csv ","uri":"https://www.zhaouncle.com/%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C-csv/"},{"categories":["Golang"],"content":"【Golang】类型转换之 cast 包","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"Go语言中cast包实现了基本数据类型和其字符串表示的相互转换。 cast包 cast 包实现了基本数据类型与其字符串表示的转换，在Go中轻松安全地从一种类型转换为另一种类型. 更多函数请查看官方文档。 ","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/:0:0","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"用法 Cast提供了一些To_____方法。这些方法将始终返回所需的类型。如果提供了不会转换为该类型的输入，则将返回该类型的0或nil值。 Cast还提供了与To_____E相同的方法。这些返回与To_____方法相同的结果，外加一个附加错误，告诉您是否成功转换。使用这些方法，您可以分辨出输入何时与零值匹配或转换失败与返回零值之间的区别。 ","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/:1:0","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"string与int类型转换 这一组函数是我们平时编程中用的最多的。 ","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/:2:0","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"ToString() ToString()函数用于将非字符串类型的整数转换为字符串类型，函数签名如下。 示例代码如下： cast.ToString(\"mayonegg\") // \"mayonegg\" cast.ToString(8) // \"8\" cast.ToString(8.31) // \"8.31\" cast.ToString([]byte(\"one time\")) // \"one time\" cast.ToString(nil) // \"\" var foo interface{} = \"one more time\" cast.ToString(foo) // \"one more time\" ","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/:2:1","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"ToInt() ToInt()函数用于将非 int类型数据转换为对应的int表示，具体的函数签名如下。 示例代码如下： cast.ToInt(8) // 8 cast.ToInt(8.31) // 8 cast.ToInt(\"8\") // 8 cast.ToInt(true) // 1 cast.ToInt(false) // 0 var eight interface{} = 8 cast.ToInt(eight) // 8 cast.ToInt(nil) // 0 ","date":"2020-11-13","objectID":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/:2:2","tags":["Golang","go"],"title":"【Golang】类型转换之 cast 包","uri":"https://www.zhaouncle.com/%E6%A0%87%E5%87%86%E5%BA%93-cast%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"categories":["Golang"],"content":"【Golang】解决 go get下载包慢或者失败的问题","date":"2020-11-11","objectID":"https://www.zhaouncle.com/%E8%A7%A3%E5%86%B3goget%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/","tags":["Golang","go"],"title":"解决 go get下载包慢或者失败的问题","uri":"https://www.zhaouncle.com/%E8%A7%A3%E5%86%B3goget%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"},{"categories":["Golang"],"content":"使用goproxy Go的1.11版本以后 可以设置GOPROXY这个变量，来设置代理。 如果你自己有代理服务器就可以把这个环境变量设置成自己的代理。 首先开启go module支持: go env -w GO111MODULE=\"on\" 不管是 mac、linux、还是 windows，只要安装了 go 1.11 版本以上，就直接安装代理，简单方便 go env -w GOPROXY=https://goproxy.cn,direct ","date":"2020-11-11","objectID":"https://www.zhaouncle.com/%E8%A7%A3%E5%86%B3goget%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/:1:0","tags":["Golang","go"],"title":"解决 go get下载包慢或者失败的问题","uri":"https://www.zhaouncle.com/%E8%A7%A3%E5%86%B3goget%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"},{"categories":[],"content":"如何结束退出 python 脚本","date":"2020-11-10","objectID":"https://www.zhaouncle.com/%E5%A6%82%E4%BD%95%E7%BB%93%E6%9D%9F%E9%80%80%E5%87%BApython%E8%84%9A%E6%9C%AC/","tags":[],"title":"【Python】如何结束退出 py 脚本","uri":"https://www.zhaouncle.com/%E5%A6%82%E4%BD%95%E7%BB%93%E6%9D%9F%E9%80%80%E5%87%BApython%E8%84%9A%E6%9C%AC/"},{"categories":[],"content":"需求 当你运行脚本，在判断条件满足时，就退出脚本，结束本次执行。 方法 使用 sys.exit()，直接退出程序，但是会引发一个 SystemExit 异常； 该方法包含一个 status 参数 sys.exit(0)，0 表示支持退出 sys.exit(1)，1 表示异常退出 这个SystemExit异常，是唯一一个不会被认为是错误的异常，当没有设置异常捕获的话，是不会有报错的，可以进行正常退出，当然也可以捕获这个异常进行一些其他操作。 import sys #sys.exit() #sys.exit(0) #sys.exit(1) try: sys.exit(1) except SystemExit as err: print(err) # 1 使用 os._exit()，直接退出，不会抛出异常； 但我们常用的Win32平台和基于UNIX的平台不会有所影响 使用 os.kill()，用于直接 Kill 掉进程，只在 unix 平台上有效； ","date":"2020-11-10","objectID":"https://www.zhaouncle.com/%E5%A6%82%E4%BD%95%E7%BB%93%E6%9D%9F%E9%80%80%E5%87%BApython%E8%84%9A%E6%9C%AC/:0:0","tags":[],"title":"【Python】如何结束退出 py 脚本","uri":"https://www.zhaouncle.com/%E5%A6%82%E4%BD%95%E7%BB%93%E6%9D%9F%E9%80%80%E5%87%BApython%E8%84%9A%E6%9C%AC/"},{"categories":["linux"],"content":"#1. nmap 确认端口是否可以通信 可以通信： [root@ld_openvas ~]# nmap -p9100 192.168.3.31 Starting Nmap 6.47 ( http://nmap.org ) at 2020-11-09 08:11 UTC Nmap scan report for ip-192-168-3-31.eu-west-2.compute.internal (192.168.3.31) Host is up (0.000067s latency). PORT STATE SERVICE 9100/tcp open jetdirect MAC Address: 0A:F3:15:B8:34:4A (Unknown) Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds 不可通信： [root@ld_openvas ~]# nmap -p9100 192.168.3.31 Starting Nmap 6.47 ( http://nmap.org ) at 2020-11-09 08:12 UTC sendto in send_ip_packet_sd: sendto(5, packet, 44, 0, 192.168.3.31, 16) =\u003e Operation not permitted Offending packet: TCP 192.168.3.10:58035 \u003e 192.168.3.31:9100 S ttl=41 id=38326 iplen=44 seq=2968465412 win=1024 \u003cmss 1460\u003e sendto in send_ip_packet_sd: sendto(5, packet, 44, 0, 192.168.3.31, 16) =\u003e Operation not permitted Offending packet: TCP 192.168.3.10:58036 \u003e 192.168.3.31:9100 S ttl=40 id=56951 iplen=44 seq=2968399877 win=1024 \u003cmss 1460\u003e Nmap scan report for ip-192-168-3-31.eu-west-2.compute.internal (192.168.3.31) Host is up (0.000033s latency). PORT STATE SERVICE 9100/tcp filtered jetdirect MAC Address: 0A:F3:15:B8:34:4A (Unknown) Nmap done: 1 IP address (1 host up) scanned in 0.28 seconds #2. Telnet 确认端口是否可以通信 telnet 192.168.3.319100 3. nc，netcat 简称 ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/:0:0","tags":["nmap"],"title":"端口扫描和脚本批量测通","uri":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"},{"categories":["linux"],"content":"通 [root@proxy ~]# nc -vz 127.0.0.1 22 Ncat: Version 7.50 ( https://nmap.org/ncat ) Ncat: Connected to 127.0.0.1:22. Ncat: 0 bytes sent, 0 bytes received in 0.01 seconds. ##不通 [root@proxy ~]# nc -vz 127.0.0.1 223 Ncat: Version 7.50 ( https://nmap.org/ncat ) Ncat: Connection refused. 4. wget 通的情况： [root@proxy ~]# wget 127.0.0.1:22 --2021-03-22 17:19:02-- http://127.0.0.1:22/ Connecting to 127.0.0.1:22... connected. HTTP request sent, awaiting response... 200 No headers, assuming HTTP/0.9 Length: unspecified Saving to: ‘index.html’ [ \u003c=\u003e ] 40 --.-K/s in 0s 2021-03-22 17:19:02 (7.47 MB/s) - Read error at byte 40 (Connection reset by peer).Retrying. --2021-03-22 17:19:03-- (try: 2) http://127.0.0.1:22/ Connecting to 127.0.0.1:22... connected. HTTP request sent, awaiting response... 200 No headers, assuming HTTP/0.9 Length: unspecified Saving to: ‘index.html’ [ \u003c=\u003e ] 0 --.-K/s in 0s Cannot write to ‘index.html’ (Connection reset by peer). 不通的情况 [root@proxy ~]# wget 127.0.0.1:223 --2021-03-22 17:19:20-- http://127.0.0.1:223/ Connecting to 127.0.0.1:223... failed: Connection refused. 5. ssh ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/:1:0","tags":["nmap"],"title":"端口扫描和脚本批量测通","uri":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"},{"categories":["linux"],"content":"通 [root@proxy ~]# ssh 127.0.0.1 -p 25 ^C [root@proxy ~]# ssh 127.0.0.1 -p 25 -v OpenSSH_7.4p1, OpenSSL 1.0.2k-fips 26 Jan 2017 debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 58: Applying options for * debug1: Connecting to 127.0.0.1 [127.0.0.1] port 25. debug1: Connection established. debug1: permanently_set_uid: 0/0 debug1: identity file /root/.ssh/id_rsa type 1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_rsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_dsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_dsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_ecdsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_ecdsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_ed25519 type -1 debug1: key_load_public: No such file or directory debug1: identity file /root/.ssh/id_ed25519-cert type -1 debug1: Enabling compatibility mode for protocol 2.0 debug1: Local version string SSH-2.0-OpenSSH_7.4 debug1: ssh_exchange_identification: 220 proxy ESMTP Sendmail 8.14.7/8.14.7; Mon, 22 Mar 2021 17:23:40 +0800 debug1: ssh_exchange_identification: 500 5.5.1 Command unrecognized: \"SSH-2.0-OpenSSH_7.4\" ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/:2:0","tags":["nmap"],"title":"端口扫描和脚本批量测通","uri":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"},{"categories":["linux"],"content":"不通 [root@proxy ~]# ssh 127.0.0.1 -p 223 -v OpenSSH_7.4p1, OpenSSL 1.0.2k-fips 26 Jan 2017 debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 58: Applying options for * debug1: Connecting to 127.0.0.1 [127.0.0.1] port 223. debug1: connect to address 127.0.0.1 port 223: Connection refused ssh: connect to host 127.0.0.1 port 223: Connection refused ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/:3:0","tags":["nmap"],"title":"端口扫描和脚本批量测通","uri":"https://www.zhaouncle.com/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"},{"categories":["iptables"],"content":"【iptables】 简单使用","date":"2020-11-09","objectID":"https://www.zhaouncle.com/iptables/","tags":["iptables"],"title":"【iptables】 简单使用","uri":"https://www.zhaouncle.com/iptables/"},{"categories":["iptables"],"content":"iptables 管理 iptables 端口映射配置步骤： 保存现有配置，执行如下命令：iptables-save \u003e iptables.config 编辑iptables.config 映射对应端口 更新配置，执行如下命令：iptables-restore \u003c iptables.config ip 白名单 # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] ##设置 ip 白名单 -N whitelist ##添加IP到白名单 -A whitelist -s xx.xx.xx.xx/32 -j ACCEPT　##不配置 witelist 列表，允许内网 ip 访问某端口 -A INPUT -s 192.168.105.0/24 -p tcp -m tcp --dport 22 -j ACCEPT -A INPUT -s 10.25.10.0/24 -p tcp -m tcp --dport 22 -j ACCEPT ##禁止访问 27017 -A INPUT -p tcp -m tcp --dport 27017 -j DROP -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT ##whitelist调用白名单IP列表，22端口只允许白名单IP使用 -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j whitelist　##whitelist调用白名单IP列表，3306端口只允许白名单IP使用 -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j whitelist　##无调用白名单，外网可访问 -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT　-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/iptables/:0:0","tags":["iptables"],"title":"【iptables】 简单使用","uri":"https://www.zhaouncle.com/iptables/"},{"categories":["iptables"],"content":"1. 禁止访问外部某个端口 iptables -A OUTPUT -p tcp --dport 6382 -j DROP ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/iptables/:0:1","tags":["iptables"],"title":"【iptables】 简单使用","uri":"https://www.zhaouncle.com/iptables/"},{"categories":["iptables"],"content":"2. 禁止访问某个 ip 的某个端口 iptables -A OUTPUT -p tcp -d 192.168.1.10 --dport 6382 -j DROP ","date":"2020-11-09","objectID":"https://www.zhaouncle.com/iptables/:0:2","tags":["iptables"],"title":"【iptables】 简单使用","uri":"https://www.zhaouncle.com/iptables/"},{"categories":["Golang"],"content":"vscode 设置 Golang 开发环境","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"步骤 ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:0:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"1. 始 Golang 语言开发选择一款合适的编辑器，能加速你敲字的灵感，这里推荐微软的 Visual Studio Code，简称 vscode。 ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"2. 安装 go 插件 首先需要安装 go 语言插件，在 vscode 扩展中搜索 “go”，如下图，下载安装go插件 ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"3. 设置 GOPROXY 如果想要 vscode 在 Go语言开发的时候为我们提供诸如代码提示、代码自动补全等功能，需要安装 go tools，但是安装 tools 需要设置 goproxy，否则会因为网络问题无法下载 tools 工具。 在此之前请先设置GOPROXY，打开终端执行以下命令： go env -w GOPROXY=https://goproxy.cn,direct ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"4. 安装 Go语言开发工具包 安装 Golang Tools，按下 Ctrl/Cmd+P，输入\u003e Go: Install/Update Tools，然后回车，选择你要安装的 tools 插件 ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:4:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"5. 插件介绍 tools 名称 用途 gocode github.com/mdempsky/gocode 代码自动完成 gopkgs github.com/uudashr/gopkgs/v2/cmd/gopkgs 该工具为未导入的软件包提供自动补全功能 go-outline github.com/ramya-rao-a/go-outline 此工具提供了文档大纲功能以及当前文件功能中的转到符号。 go-symbols github.com/acroca/go-symbols 此工具提供了工作空间中的转到符号功能。 guru golang.org/x/tools/cmd/guru 该工具提供查找参考和查找接口实现功能。 它也可用于通过设置提供转到定义\"go.docsTool\"。 gorename golang.org/x/tools/cmd/gorename 此工具提供了重命名符号功能。 gotests github.com/cweill/gotests/… 该工具为Go: Generate Unit Tests命令集提供支持。 gomodifytags github.com/fatih/gomodifytags 该工具支持Go: Add Tags to Struct Fields和Go: Remove Tags From Struct Fields命令。 impl github.com/josharian/impl 该工具为Go: Generate Interface Stubs命令提供支持。 fillstruct github.com/davidrjenni/reftools/cmd/fillstruct 该工具提供了对Go: Fill struct命令的支持。 goplay github.com/haya14busa/goplay/cmd/goplay 该工具为Go: Run on Go Playground命令提供支持。 godoctor github.com/godoctor/godoctor 该工具提供了重构功能。 它不支持Go模块，因此我们希望gopls它将提供此功能（golang / go＃37170）。 dlv github.com/go-delve/delve/cmd/dlv 这是Go语言的调试器。它用于提供此扩展的调试功能。 gocode-gomod github.com/stamblerre/gocode goreturns github.com/sqs/goreturns golint golang.org/x/lint/golint ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:5:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"6. 打开vscode设置 ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:6:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"7. settings.json 配置 \"go.inferGopath\": true, \"go.autocompleteUnimportedPackages\": true, \"go.gocodePackageLookupMode\": \"go\", \"go.gotoSymbol.includeImports\": true, \"go.useCodeSnippetsOnFunctionSuggest\": true, \"go.useCodeSnippetsOnFunctionSuggestWithoutType\": true, \"go.docsTool\": \"guru\", ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:7:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"8. settings.json 参数介绍： ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:8:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"8.1 跳转到定义 go.docsTools：这里有三个选项，默认使用 gogetdoc，不知为何我这里选择之后无法使用 ctrl/cmd +鼠标左键点击跳转函数或者源码，于是我选择了 guru ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:8:1","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"9. 效果 参考链接： https://github.com/microsoft/vscode-go https://github.com/golang/vscode-go https://github.com/golang/vscode-go/blob/master/docs/tools.md https://golang.google.cn/ ","date":"2020-11-01","objectID":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:9:0","tags":["Golang","go"],"title":"【Golang】vscode 设置 go 开发环境","uri":"https://www.zhaouncle.com/vscode%E8%AE%BE%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Golang"],"content":"Golang 字符串的查找方法小结","date":"2020-10-31","objectID":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93-contains%E5%87%BD%E6%95%B0/","tags":["Golang","go"],"title":"【Golang】字符串的查找方法小结","uri":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93-contains%E5%87%BD%E6%95%B0/"},{"categories":["Golang"],"content":"Contains 函数 func Contains(s, substr string) bool 用途：查找字符串 substr 是否在字符串 s 内，存在就返回 true 精确匹配 区分大小写 字符串必须相连，无法个几个再匹配 空字符串也是匹配项 package main import ( \"fmt\" \"strings\" ) func main() { fmt.Println(strings.Contains(\"aomineKing\", \"ao\")) //true fmt.Println(strings.Contains(\"aomineKing\", \"ek\")) //false fmt.Println(strings.Contains(\"aomineKing\", \"aK\")) //false fmt.Println(strings.Contains(\"aomineKing\", \"\")) //true fmt.Println(strings.Contains(\"\", \"\")) //true } func ContainsAny(s, chars string) bool 用途：查找 chars 中任意个字符在 s 中，若存在则返回 true 模糊匹配，只要是一个字符存在，则 true 空字符串不匹配 区分大小写 package main import ( \"fmt\" \"strings\" ) func main() { fmt.Println(strings.ContainsAny(\"aomineKing\", \"k\")) //false fmt.Println(strings.ContainsAny(\"aomineKing\", \"ui\")) //true fmt.Println(strings.ContainsAny(\"aomineKing\", \"qwe\")) //true fmt.Println(strings.ContainsAny(\"aomineKing\", \"uaoK\")) //true fmt.Println(strings.ContainsAny(\"aomineKing\", \"\")) //false fmt.Println(strings.ContainsAny(\"\", \"\")) //false } 参考： package main import ( \"fmt\" \"strings\" ) var ( coins = 50 users = []string{ \"Matthew\", \"Sarah\", \"Augustus\", \"Heidi\", \"Emilie\", \"Peter\", \"Giana\", \"Adriano\", \"Aaron\", \"Elizabeth\", } distribution = make(map[string]int, len(users)) rewardRules = map[string]int{ \"e\": 1, \"i\": 2, \"o\": 3, \"u\": 4, } ) func dispatchCoin() int { var leftCoins int for _, name := range users { tempCount := 0 for k, v := range rewardRules { tempCount += strings.Count(strings.ToLower(name), k) * v } distribution[name] = tempCount } for k, v := range distribution { fmt.Printf(\"【%v】分到多少枚【%d】金币\\n\", k, v) leftCoins += v } return coins - leftCoins } func main() { left := dispatchCoin() fmt.Println(\"剩下：\", left) } 结果： 【Sarah】分到多少枚【0】金币 【Heidi】分到多少枚【5】金币 【Giana】分到多少枚【2】金币 【Adriano】分到多少枚【5】金币 【Aaron】分到多少枚【3】金币 【Elizabeth】分到多少枚【4】金币 【Matthew】分到多少枚【1】金币 【Augustus】分到多少枚【12】金币 【Emilie】分到多少枚【6】金币 【Peter】分到多少枚【2】金币 剩下： 10 参考： https://www.godoc.org/strings#Contains ","date":"2020-10-31","objectID":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93-contains%E5%87%BD%E6%95%B0/:0:0","tags":["Golang","go"],"title":"【Golang】字符串的查找方法小结","uri":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93-contains%E5%87%BD%E6%95%B0/"},{"categories":["Golang"],"content":"自定义 input 函数整理用户输入","date":"2020-10-30","objectID":"https://www.zhaouncle.com/input%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/","tags":["Golang","go"],"title":"【Golang】自定义 input 函数整理用户输入","uri":"https://www.zhaouncle.com/input%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"},{"categories":["Golang"],"content":"把 fmt.Scan 用户输入整理成函数，方便底层调用，重复代码 package main import ( \"fmt\" ) func input(prompt string) string { var text string fmt.Print(prompt) fmt.Scan(\u0026text) return text } func main() { a := input(\"你输入的是啥：\") b := input(\"还是 python 简单很多：\") c := input(\"学会 go 好处多多多哦：\") fmt.Printf(\"%v, %v, %v\", a, b, c) } ","date":"2020-10-30","objectID":"https://www.zhaouncle.com/input%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/:0:0","tags":["Golang","go"],"title":"【Golang】自定义 input 函数整理用户输入","uri":"https://www.zhaouncle.com/input%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"},{"categories":["Golang"],"content":"Map 如何删除元素","date":"2020-10-30","objectID":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/","tags":["Golang","go"],"title":"【Golang】Map 如何删除元素","uri":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"},{"categories":["Golang"],"content":"map 函数如何进行删除内部元素呢？ 一是使用 append 进行排除不要的元素，重组需要的（案例一）； 而是用 index 索引进行排除（案例二），常规我一般用这种方法通用； ","date":"2020-10-30","objectID":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/:1:0","tags":["Golang","go"],"title":"【Golang】Map 如何删除元素","uri":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"},{"categories":["Golang"],"content":"案例一： append for 循环选中需要的 package main import ( \"fmt\" ) func main() { users := []map[string]string{ {\"id\": \"1\", \"name\": \"test1\", \"contact\": \"11234\", \"address\": \"Guangdong\"}, {\"id\": \"2\", \"name\": \"test2\", \"contact\": \"21234\", \"address\": \"Shanghai\"}, {\"id\": \"3\", \"name\": \"test3\", \"contact\": \"31234\", \"address\": \"Hangzhou\"}, {\"id\": \"4\", \"name\": \"test4\", \"contact\": \"41234\", \"address\": \"Shenzhen\"}, } fmt.Println(users) id := \"1\" // 方法1: // 把不需要删除 =\u003e 定义新的切片 =\u003e users，使用 append 进行重新组合 // tempUsers := []map[string]string{} tmpUsers := make([]map[string]string, 0, len(users)-1) // 定义一个临时的 map 函数 for _, user := range users { if user[\"id\"] != id { //这里把不等于的 id 一个一个写入 tmpUsers， // fmt.Println(user) tmpUsers = append(tmpUsers, user) } // users = tmpUsers } fmt.Println(tmpUsers) } ","date":"2020-10-30","objectID":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/:1:1","tags":["Golang","go"],"title":"【Golang】Map 如何删除元素","uri":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"},{"categories":["Golang"],"content":"案例二：append index 索引排除法 package main import ( \"fmt\" ) func main() { users := []map[string]string{ {\"id\": \"1\", \"name\": \"test1\", \"contact\": \"11234\", \"address\": \"Guangdong\"}, {\"id\": \"2\", \"name\": \"test2\", \"contact\": \"21234\", \"address\": \"Shanghai\"}, {\"id\": \"3\", \"name\": \"test3\", \"contact\": \"31234\", \"address\": \"Hangzhou\"}, {\"id\": \"4\", \"name\": \"test4\", \"contact\": \"41234\", \"address\": \"Shenzhen\"}, } fmt.Println(users) id := \"1\" tmpUsers := make([]map[string]string, 0, len(users)-1) // 定义一个临时的 map 函数 for idx, user := range users { if user[\"id\"] == id { // fmt.Println(idx) tmpUsers = append(users[:idx], users[idx+1:]...) } } fmt.Println(tmpUsers) } 结果示例： ","date":"2020-10-30","objectID":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/:1:3","tags":["Golang","go"],"title":"【Golang】Map 如何删除元素","uri":"https://www.zhaouncle.com/map%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"},{"categories":["Golang"],"content":"【Golang】字符串与 int 的转换并打印类型","date":"2020-10-29","objectID":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/","tags":["Golang","go"],"title":"【Golang】字符串与整数的转换并打印类型","uri":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/"},{"categories":["Golang"],"content":"1. strconv 字符串与 int 的转换然后打印类型，主要使用 strconv 函数实现 package main import ( \"fmt\" \"reflect\" \"strconv\" ) func main() { a := 1 b := \"1\" fmt.Println(\"a\", reflect.TypeOf(a)) fmt.Println(\"b\", reflect.TypeOf(b)) fmt.Printf(\"a type of %T\\n\", a) fmt.Printf(\"b type of %T\\n\", b) a1 := strconv.Itoa(a) if b1, err := strconv.Atoi(b); err == nil { fmt.Println(\"a1\", reflect.TypeOf(a1)) fmt.Println(\"b1\", reflect.TypeOf(b1)) } } 执行结果： a int b string a type of int b type of string a1 string b1 int ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/:1:0","tags":["Golang","go"],"title":"【Golang】字符串与整数的转换并打印类型","uri":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/"},{"categories":["Golang"],"content":"2. cast 用 strconv.Atoi 的方法，即将字符串转换为整数是要设置 err 错误信息的，那怎么可以省略呢？ 那就是使用 cast 函数 package main import ( \"fmt\" \"reflect\" \"strconv\" \"github.com/spf13/cast\" ) func main() { a := 1 b := \"1\" a2 := cast.ToString(a) fmt.Println(\"a2\", reflect.TypeOf(a2)) b2 := cast.ToInt(b) fmt.Println(\"b2\", reflect.TypeOf(b2)) } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/:2:0","tags":["Golang","go"],"title":"【Golang】字符串与整数的转换并打印类型","uri":"https://www.zhaouncle.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2%E7%84%B6%E5%90%8E%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B/"},{"categories":["Golang"],"content":"map 使用映射存储操作指令及调用函数关","date":"2020-10-29","objectID":"https://www.zhaouncle.com/map%E4%BD%BF%E7%94%A8%E6%98%A0%E5%B0%84%E5%AD%98%E5%82%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E5%8F%8A%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E5%85%B3%E7%B3%BB/","tags":["Golang","go"],"title":"【Golang】map 使用映射存储操作指令及调用函数关系","uri":"https://www.zhaouncle.com/map%E4%BD%BF%E7%94%A8%E6%98%A0%E5%B0%84%E5%AD%98%E5%82%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E5%8F%8A%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E5%85%B3%E7%B3%BB/"},{"categories":["Golang"],"content":"map： 使用映射存储操作指令及调用函数关系 package main import \"fmt\" func addUser() { fmt.Println(\"addUser\") } func modifyUser() { fmt.Println(\"modifyUser\") } func deleteUser() { fmt.Println(\"deleteUser\") } func queryUser() { fmt.Println(\"queryUser\") } func main() { operates := map[string]func(){ \"add\": addUser, \"modify\": modifyUser, \"delete\": deleteUser, \"query\": queryUser, } for { var text string fmt.Print(\"请输入指令: \") fmt.Scan(\u0026text) if text == \"exit\" { fmt.Println(\"退出\") break } if op, ok := operates[text]; ok { op() } else { fmt.Println(\"指令错误\") } } } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/map%E4%BD%BF%E7%94%A8%E6%98%A0%E5%B0%84%E5%AD%98%E5%82%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E5%8F%8A%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E5%85%B3%E7%B3%BB/:0:0","tags":["Golang","go"],"title":"【Golang】map 使用映射存储操作指令及调用函数关系","uri":"https://www.zhaouncle.com/map%E4%BD%BF%E7%94%A8%E6%98%A0%E5%B0%84%E5%AD%98%E5%82%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E5%8F%8A%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E5%85%B3%E7%B3%BB/"},{"categories":["Golang"],"content":"【Golang】for case 循环用户选择","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":" 语法点： for 循环 使用 case 函数，使用 break END 可以再输入 exit 的时候退出，也可以用 return。 Go语言也支持label(标签)语法：分别是 break label 和 goto label，break label 和 goto label 都能在循环中跳出循环。 2.1 break 的跳转标签 (label) 必须放在循环语句 for 前面，并且在 break label 跳出循环不再执行 for 循环里的代码。如 案例一 所示； 不能标签定义在 break 的下面 break 标签只能用于for循环； 2.2 goto label 的 label (标签)既可以定义在 for 循环前面（案例三）,也可以定义在 for 循环后面（案例四），当跳转到标签地方时，继续执行标签下面的代码。 但是由于在大项目中不好控制，所以建议能不使用goto label就不要使用； label 在 for 前后位置不一样，得到的退出结果也不一样； ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:0","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":"案例一：break label package main import \"fmt\" func main() { END: for { var text string fmt.Print(\"请输入指令: \") fmt.Scan(\u0026text) switch text { case \"add\": fmt.Println(\"添加\") case \"modify\": fmt.Println(\"修改\") case \"delete\": fmt.Println(\"删除\") case \"query\": fmt.Println(\"查询\") case \"exit\": fmt.Println(\"退出\") break END default: fmt.Println(\"输入指令错误\") } } } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:1","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":"案例二：return package main import \"fmt\" func main() { for { var text string fmt.Print(\"请输入指令: \") fmt.Scan(\u0026text) switch text { case \"add\": fmt.Println(\"添加\") case \"modify\": fmt.Println(\"修改\") case \"delete\": fmt.Println(\"删除\") case \"query\": fmt.Println(\"查询\") case \"exit\": fmt.Println(\"退出\") return default: fmt.Println(\"输入指令错误\") } } } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:2","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":"案例一、二 的 Gif 动态图展示： ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:3","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":"案例三：goto ，for 循环前面 package main import \"fmt\" func main() { a := 1 END: for a \u003c 10 { if a == 5 { a++ goto END } fmt.Println(a) a++ } fmt.Println(a) } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:4","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["Golang"],"content":"案例四：goto，for 循环后面 package main import \"fmt\" func main() { a := 1 for a \u003c 5 { if a == 3 { a++ goto END } fmt.Println(a) a++ } END: fmt.Println(a) } ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/:0:5","tags":["Golang","go"],"title":"【Golang】for case 循环用户选择","uri":"https://www.zhaouncle.com/forcase%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9/"},{"categories":["hugo"],"content":"github blog 自定义域名，外加 https cdn 加速","date":"2020-10-29","objectID":"https://www.zhaouncle.com/hugo_03/","tags":["hugo","博客"],"title":"Hugo（三）自定义域名\u0026cloudfare github pages 加速https","uri":"https://www.zhaouncle.com/hugo_03/"},{"categories":["hugo"],"content":"一、GitHub Pages + CloudFlare是建立网站的最简单方法之一。 github pages，我这里选择了 hugo+LoveIt 的静态页面 blog 架构，有兴趣自己查看之前的文章。 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/hugo_03/:0:0","tags":["hugo","博客"],"title":"Hugo（三）自定义域名\u0026cloudfare github pages 加速https","uri":"https://www.zhaouncle.com/hugo_03/"},{"categories":["hugo"],"content":"1. 配置 github pages 域名 为了使用自己的域名，而不是 username.github.io，我这里使用了 github pages 的设置，进到“Settings”里面，往下拉可以看到，一个是设置自己的顶级域名，不要 zhaouncle.com，一个是开启 https 的选项。开启他可以用 https://zhaouncle.github.io进行访问，另外 https 做 seo 会优先进行，所以开启是有好处的，好像 2018 年才开始有这个功能。以前只能通过反代或者 cloudfare 实现 https。 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/hugo_03/:1:0","tags":["hugo","博客"],"title":"Hugo（三）自定义域名\u0026cloudfare github pages 加速https","uri":"https://www.zhaouncle.com/hugo_03/"},{"categories":["hugo"],"content":"2.在 username.github.io 仓库下面创建一个 CNAME 的文件并写入自己的域名 二、利用Cloudflare为基于GitHub Pages的Hugo博客添加HTTPS支持 1、cloudfare 注册之后会给你两个 dns 地址，我这里是在阿里云上面购买的域名，于是去注册一个，我这里那 zhaowp.com举个例子 这一步先跳过，等会在进行编辑 这一步要去我们的域名采购商那里进行 dns 的更改 这一步默认就行，无需变动 我们可以看到在 Overview 这里，没有进行 dns 服务器更改这里会一直提示，我这里是阿里云的域名购买商，于是去进行更改 dns 服务器地址的操作，因为我之前已经填好了上面的步骤，所以用 zhaowp.com举个例子，别觉得奇怪 周到对应的域名，点击管理 点击确定之后我们回到 cloudfare 进行操作，等了几分钟我们发现这里解析成功了， 我们在 dns 这里设置 4 个 dns A 记录和 1 个CNAME 记录 add recore的时候 A 记录这里可以用@表示，这样cloudfare 会自己解析成你要的域名了，也就是现在为啥A 记录是域名的原因了。 然后到 SSL/TLS这里配置证书启用情况，我这里选了FULL，为何要选 FULL 呢，因为我在 github 上面开启了 https，所以需要进行双方的证书认证，否则无法打开网站 最后，我们创建一条规则，即最简单的永远使用 ssl 访问这个域名，点击 create 一条规则 我刚举了个 zhaowp 的例子，现在要删了，因为我没这个域名 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/hugo_03/:2:0","tags":["hugo","博客"],"title":"Hugo（三）自定义域名\u0026cloudfare github pages 加速https","uri":"https://www.zhaouncle.com/hugo_03/"},{"categories":["cdn"],"content":"github 图床 cdn","date":"2020-10-29","objectID":"https://www.zhaouncle.com/github%E5%9B%BE%E5%BA%8A/","tags":["cdn"],"title":"Github Pages 图床","uri":"https://www.zhaouncle.com/github%E5%9B%BE%E5%BA%8A/"},{"categories":["cdn"],"content":"1. 简介 我们之前介绍过可以用 jsdelivr + github 的方式做自己的 cdn 图床，现在介绍另外一种 github pages + cloudfront 的方式 2. github 新创建的 repo 设置 GitHub Pages 因为我之前创建过基于 github 的 blog，所以早早就配置了域名了，开启新的 repo 无需重新搞一个域名，可以参考 Hugo（三）自定义域名\u0026cloudfare github pages 加速https （一）部分，因为这里面我已经配置好 cloudfront 了，这里就不展示了。 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/github%E5%9B%BE%E5%BA%8A/:0:0","tags":["cdn"],"title":"Github Pages 图床","uri":"https://www.zhaouncle.com/github%E5%9B%BE%E5%BA%8A/"},{"categories":["cdn"],"content":"Jsdelivr小坑系列","date":"2020-10-29","objectID":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/","tags":["cdn"],"title":"Jsdelivr小坑系列","uri":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/"},{"categories":["cdn"],"content":"1. 50m Size 限制 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/:0:0","tags":["cdn"],"title":"Jsdelivr小坑系列","uri":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/"},{"categories":["cdn"],"content":"1.1 问题 url 访问：https://cdn.jsdelivr.net/gh/ZhaoUncle/images@master/books/20201029101540.png 出现以下错误 Package size exceeded the configured limit of 50 MB. Try https://github.com/ZhaoUncle/images/tree/master/books/20201029101540.png instead. ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/:1:0","tags":["cdn"],"title":"Jsdelivr小坑系列","uri":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/"},{"categories":["cdn"],"content":"1.2 解决 ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/:2:0","tags":["cdn"],"title":"Jsdelivr小坑系列","uri":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/"},{"categories":["cdn"],"content":"1.2.1 进入你的 github image repo，然后创建一个 Releases 版本为 “master” 坑：这里必须你是还没满 50M 的时候先创建的 master，否则等满了之后再创建就无效了，所以我这里也是约到坑了，重新创建了一个新的 repo 创建了 master 的 release ","date":"2020-10-29","objectID":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/:2:1","tags":["cdn"],"title":"Jsdelivr小坑系列","uri":"https://www.zhaouncle.com/jsdelivr%E5%B0%8F%E5%9D%91%E7%B3%BB%E5%88%97/"},{"categories":["cdn"],"content":"Weserv图片缓存","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"1. 介绍 images.weserv.nl 具有全球、缓存、调整大小、开源的属性。主要调用 Cloudfare 的 cdn 来实现图片缓存 支持的图片格式有JPEG, PNG, BMP, GIF, TIFF, WebP, PDF, SVG, WebP, GIF 支持 IPV6 可以使用 https://images.weserv.nl/ 直接调用 http图片缓存，用于通过TLS / SSL进行安全连接 2. 使用 该工具最大的地方是可以直接修改图片的大小，快速参考 ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:0:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.1 尺寸 \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026w=300\u0026h=300\u0026dpr=2\"\u003e w：设置图像的宽度，以像素为单位。 h：设置图像的高度，以像素为单位。 dpr：设备像素比，level 1-8. ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:1:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.2 自调 \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026w=300\u0026h=300\u0026fit=inside\"\u003e 默认。保留宽高比，将图像调整为尽可能大的尺寸，同时确保其尺寸小于或等于指定的尺寸。 ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:2:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.3 位置 \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026w=300\u0026h=300\u0026fit=cover\u0026a=centor\"\u003e center：默认 ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:3:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.4 形状 \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026w=300\u0026h=300\u0026fit=cover\u0026mask=circle\"\u003e 效果： circle：圆圈 ellipse triangle triangle-180：三角形倒置倾斜 pentagon pentagon-180：五角大楼倒置倾斜 hexagon square：方形倾斜45度 star：5点星 heart ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:4:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.5 方向 \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026h=300\u0026flip\"\u003e \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026h=300\u0026flop\"\u003e \u003cimg src=\"//images.weserv.nl/?url=images.weserv.nl/lichtenstein.jpg\u0026h=300\u0026ro=45\"\u003e flip: 180°翻转 flop：沿 X 轴翻转 ro：沿定制角度翻转 ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:5:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.6 时长 //images.weserv.nl?url=images.weserv.nl/lichtenstein.jpg\u0026w=100\u0026maxage=31d maxage: 缓存控制时长， d： 天 y：年，365天 ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:6:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"2.7 默认图片 \u003cimg src=\"//images.weserv.nl/?url=example.org/noimage.jpg\u0026default=ssl:images.weserv.nl%2F%3Furl%3Dimages.weserv.nl/lichtenstein.jpg%26w%3D300\"\u003e https://images.weserv.nl/?url=https://wfqqreader-1252317822.image.myqcloud.com/cover/71/25066071/t6_25066071.jpg\u0026default=ssl:images.weserv.nl/?url=https://img9.doubanio.com/view/subject/l/public/s26872396.jpg 如果加载图像时出现问题，则显示错误。但是，可能需要将默认图像传递给用户，而不是向用户提供损坏的图像。 该URL不得包含default查询字符串（如果包含，则将被忽略）。 3. 参考资料： https://github.com/weserv/images https://images.weserv.nl/ ","date":"2020-10-14","objectID":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/:7:0","tags":["Weserv图片缓存"],"title":"Weserv图片缓存","uri":"https://www.zhaouncle.com/weserv%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"jsdelivr 缓存刷新","date":"2020-09-30","objectID":"https://www.zhaouncle.com/jsdelivr%E6%B8%85%E7%BC%93%E5%AD%98/","tags":["cdn"],"title":"jsdelivr 缓存刷新","uri":"https://www.zhaouncle.com/jsdelivr%E6%B8%85%E7%BC%93%E5%AD%98/"},{"categories":["cdn"],"content":"1. cdn 缓存 jsDelivr 提供的全球 CDN 加速，CDN的分流作用不仅减少了用户的访问延时，也减少的源站的负载。因为 jsDelivr 是开源的免费 cdn，所以我个人一直在使用他，当然，你可以使用腾讯云，每个月 10G 基本上也足够用了，老用户甚至还要 50G 每月的流量，也着实很香。 缺点： 当网站更新时，如果CDN节点上数据没有及时更新，即便用户在浏览器使用 Ctrl +F5（win）或者 command+shift+R（mac）的强制刷新方式使浏览器端的缓存失效，也会因为CDN边缘节点没有同步最新数据而导致用户端未能及时更新。 2. jsdelivr的cdn使用规则 其实如何使用 jsdelivr，在官网上面就有介绍了，不过还是简单介绍下我经常使用的 github https://cdn.jsdelivr.net/gh/user/repo@version/file 具体实例： master 仓库的 https://github.com/ZhaoUncle/images #github 原图 https://github.com/ZhaoUncle/images/blob/master/blog/avatar.png #master 默认不需要加版本号 https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/avatar.png #如果你有多个分支多版本管理 https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/avatar.png 3. jsdelivr 缓存刷新方法 对于 jsDelivr，缓存刷新的方式也很简单，只需将想刷新的链接的开头的cdn 更改为 purge，不过官网说后面会推出刷新工具，我这边还在观望中 https://cdn.jsdelivr.net/ 切换为 https://purge.jsdelivr.net/ **实验：**https://purge.jsdelivr.net/gh/ZhaoUncle/images@master/static/waifu.css 我直接在浏览器访问这个接口得出以下数据，返回status: ok，就代表完成了。 4. 发现推送上去，但是 cdn 打不开？啥原因 其实也就是 cdn 缓存边缘节点还没缓存过去，方法如 3 那样直接 purge 访问强制刷新到边缘节点就好啦。 ","date":"2020-09-30","objectID":"https://www.zhaouncle.com/jsdelivr%E6%B8%85%E7%BC%93%E5%AD%98/:0:0","tags":["cdn"],"title":"jsdelivr 缓存刷新","uri":"https://www.zhaouncle.com/jsdelivr%E6%B8%85%E7%BC%93%E5%AD%98/"},{"categories":["blog"],"content":"博客园搭建个人博客","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"记得点“推荐”或者“关注”哦！！！ 1. 主题 Cnblogs-Theme-SimpleMemory 1.3.3 版本 2. 权限申请 先在博客园申请开通博客，这里就不做介绍了，然后在 “博客侧边栏公告” 申请 js 权限（博客侧边栏公告） 3. 博客园后台设置 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:0:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"3.1 用户设置 参数： 标题：主要影响后台的显示； 博客地址名：https://www.cnblog.com/博客地址名/，这个只会修改只能通过邮件申请，我申请过一次，申请完之后用了 js 的话，还会用旧的链接地址访问，需要把 css 和 js 的代码清掉保存，再重新填写再保存，才能快速清除； 登录用户名：这个影响不大，因为下面有个显示名称，就是替换这个的 密码：忽略 显示名称（作者名）：这里会替换掉登录用户名的显示规则，会影响浏览器标签那里的 title，还有显示作者的地方； 邮箱：评论那里可以选择发送邮箱 回复通知邮箱：默认楼上那个 时区：utc+8 即可，北京时间 语言与地区：简体中文 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:1:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"3.2 模板设置 参数： 博客皮肤：选择SimpleMemory 页面定制 CSS 代码： 2.1 CSS代码位置：/src/style/base.min.css ，拷贝此文件代码至页面定制CSS代码文本框处即可。 2.2 /src/style/base.min.css 的修改参考 /src/style/base.css。博客设置请使用压缩版本，直接使用 /src/style/base.css 会字符超限！ 禁用模板默认 CSS：这里要记得 博客侧边栏公告： 4.1 JavaScript 对象是被命名值的容器。值以名称:值对的方式来书写（名称和值由冒号分隔）。 \u003cscript type=\"text/javascript\"\u003e window.cnblogsConfig = { GhVersions : 'v1.3.3', //这里的版本要与最下面的 scripts 引用的 js 版本一致 blogUser : \"欲戴王冠，必承其重...易波叶平\", //用户名，主要是首页打开的为孩子 blogAvatar : \"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/avatar.png\", //用户头像 blogStartDate : \"2017-11-17\", // 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间 webpageTitleOnblur: '(oﾟvﾟ)ノ Hi', //离开页面，title 显示的文字 webpageTitleFocus: '(*´∇｀*) 欢迎回来！',//点击页面，title 显示的文字 webpageIcon: \"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@master/img/webp/blog_logo.webp\", //网站图标 fontIconExtend: \"//at.alicdn.com/t/font_2104671_57vkche3kz2.css\",//字体图标配置，开个小章节单独讲 menuNavList: [ // 菜单导航 ['导航名称', '链接', 'icon'] ['Blog', 'https://zhaouncle.com/', 'icon-blog-solid'], ['CMS', 'https://link.zhaouncle.com/', 'icon-logo1'], ['k8sYaml 生成器', 'https://k8syaml.com/', 'iconkubernetes1'],//这里的iconkubernetes1就是用的我自己的图标库来配置的，默认不自带 ], //homeBannerText: \"好好学习，天天向上！\",我这里不设置，用的主题的自动获取，默认获取诗词 //homeBannerTextType: \"jinrishici\", //jinrishici：每次刷新随机获取一句古诗词;one：每日获取一句话 homeTopImg: [ //首页轮播图，可以设置多个进行轮播 \"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/home_top_bg.webp\", \"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@master/img/webp/home_top_bg.webp\" ], essayTopImg: [//文章页面最上面那个图片，每次刷新随机选择 \"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/nothome_top_bg.webp\", \"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/wallhaven-4o5zm9.webp\" ], menuUserInfoBgImg: 'https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/menu_bg.gif',//菜单栏个人信息背景图 codeLineNumber: true, //代码行号渲染 essayCodeHighlightingType: \"prettify\",//代码渲染高亮 essayCodeHighlighting: \"obsidian\", // 代码渲染主题 footerStyle: 2,// 页脚样式，默认有 1、2 两种 bottomText: { //页脚标语 left : \"长风破浪会有时\", right: \"直挂云帆济沧海\", }, reward: { //文章打赏按钮，显示在页面右下角。 enable: true, wechatpay: 'https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/WechatPay.png',//我这里设置的赞赏码 alipay: 'https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/Alipay.png',//支付宝付款码 }, bottomBlogroll: [ // 友情链接，[[链接名,链接]....] [\"易波叶平\", 'https://zhaouncle.com/'], ], consoleList: [ //浏览器 console 输出 ['Zhaouncle CNBlogs', 'https://www.cnblogs.com/UncleZhao/'], ], advertising: true, //博客园广告 } \u003c/script\u003e \u003cscript src=\"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@v1.3.3/src/script/simpleMemory.min.js\" defer\u003e\u003c/script\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:2:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"3.3 开启公告控件 公告这里要选上，否则部分 js 文件会无法生效，其他的就自行参考自己的需要了。 到了这一步，基本上一个完整的博客主题就搭建完成了，保存即可自由玩耍写博客了。 4. 功能扩展 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:3:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1 菜单栏图标 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.1 查看菜单栏 字体图标库 列举了部分内置的图标，但是还有一些需要自定义，比如 “k8sYmal 生成器” 这个图标就没有内置，需要我们自己去 iconfont ，阿里的图标库自定义。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.2 登录 iconfont 我一开始选择“Github”登录的方式，但是直接报错了，所以我只能选择“新浪微博”的登录方式，主要是我不玩微博，我觉得很蛋疼 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.3 创建项目 我们先进到 “资源管理” – “我发起的项目” ，创建一个 “博客园” 项目，如图所示 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.4 生成代码 然后生成代码，填入 3.2 的 “博客侧边栏公告” 的 js 对象 fontIconExtend 更换成你自己的就行了，这个要添加图标进去后才能生成。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:4","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.5 图标加入购物车 你可以直接搜索 “kubernetes”，也可以直接一个一个搜，不过一般不会这么傻吧？哈哈。重要的是选中图标，把鼠标移到图标上面，然后添加进购物车 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:5","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.6 从购物车添加至项目 点击购物车图标，然后 “添加至项目” 即可，当然你也可以忽略前面创建项目的步骤，直接在这里的选中添加项目也行，随你自己喜欢了。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:6","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.7 添加成功 点击确定，就添加成功了，然后在“生成代码”就好啦，鼠标移动到图标上面，直接复制代码， ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:7","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.1.8 配置 js 对象 然后直接生成代码，香气十足，再配置到 3.2 的 js 对象 “menuNavList”，完美添加图标了，当然你也可以自己制作图标然后上传使用。 menuNavList: [ // 菜单导航 ['导航名称', '链接', 'icon'] ['k8sYaml 生成器', 'https://k8syaml.com/', 'iconkubernetes1'],//这里的iconkubernetes1就是用的我自己的图标库来配置的，默认不自带 ], ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:4:8","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.2 鼠标点击特效 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:5:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.2.1 鼠标特效 4.2.1.1 烟花特效，我自己在使用的 4.2.1.2 文字特效 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:5:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.2.2 添加鼠标图像 在博客园的设置那里，我们在 “页面定制 CSS 代码” 的“body” 代码块添加如下几句代码，这几句代码主要添加鼠标的展示图，至于点击效应在下面的 js 代码块里面。如下图所示 注意：至于如何快速找到 body，要么你直接浏览器 F12 搜，要么把 css 代码 copy 出来咯，改完再放进去不就好了吗 background-repeat: repeat;background-attachment: fixed;background-size:cover;cursor: url(https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/cursor.ico),auto; ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:5:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.2.3 添加 js 代码 注意：特效只需要添加一种即可 4.2.3.1 烟花特效 在 **“页首 HTML 代码” **那里添加以下代码 \u003c!--鼠标点击特效，烟花效应--\u003e \u003cscript src=\"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/mouse-click.js\"\u003e\u003c/script\u003e \u003ccanvas width=\"1777\" height=\"841\" style=\"position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;\"\u003e\u003c/canvas\u003e 4.2.3.2 文字特效 在 **“页首 HTML 代码” **那里添加以下代码 \u003cscript type=\"text/javascript\"\u003e /* 鼠标特效，文字特效 */ var a_idx = 0; jQuery(document).ready(function($) { $(\"body\").click(function(e) { var a = new Array(\"❤富强❤\",\"❤民主❤\",\"❤文明❤\",\"❤和谐❤\",\"❤自由❤\",\"❤平等❤\",\"❤公正❤\",\"❤法治❤\",\"❤爱国❤\",\"❤敬业❤\",\"❤诚信❤\",\"❤友善❤\"); var $i = $(\"\u003cspan\u003e\u003c/span\u003e\").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css({ \"z-index\": 999999999999999999999999999999999999999999999999999999999999999999999, \"top\": y - 20, \"left\": x, \"position\": \"absolute\", \"font-weight\": \"bold\", \"color\": \"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\" }); $(\"body\").append($i); $i.animate({ \"top\": y - 180, \"opacity\": 0 }, 1500, function() { $i.remove(); }); }); }); \u003c/script\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:5:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.2.4 结束语 如上就能完成鼠标的特效了，当然特效也不止这一种，剩下的等以后有兴趣再试了。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:5:4","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3 网站统计 CNZZ 也就是友盟的网站统计功能，主题整合 CNZZ 网站统计，并对样式进行了优化。如果需要本功能，请首先去 CNZZ 配置网站的统计，然后修改下面的代码，添加至页脚 Html 代码中。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3.1 配置 CNZZ 网址：U-Web ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3.2 添加站点 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3.3 获取统计代码 ID ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3.4 开启详细数据 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:4","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.3.4 配置页脚 HTML 代码 进入博客园后台设置，配置页脚 HTML 代码，将 4.3.3 的统计 ID 替换，然后 copy 进去 \u003c!--友盟访问统计--\u003e \u003cdiv id=\"cnzzProtocol\" style=\"display: none;\"\u003e \u003cspan class=\"id_cnzz_stat_icon\" id='cnzz_stat_icon_你的统计ID'\u003e\u003c/span\u003e \u003cscript src='https://v1.cnzz.com/z_stat.php?id=你的统计ID\u0026online=1\u0026show=line' type='text/javascript'\u003e\u003c/script\u003e \u003c/div\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:6:5","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.4 天气预报 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:7:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.4.1 心知天气 注册登录，这就我无需多说啦！ ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:7:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.4.2 天气插件 Weather Widget，我们这里直接点击 “立即免费试用” 就可以啦。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:7:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.4.3 天气插件配置 4.4.3.1 自定义配置 自动定位：这里不知为何我电脑定位到“福州”，所以我干脆关了算了，可能是免费版导致的。 4.4.3.2 生成代码 将生成的 JS 代码复制到 “页脚 HTML 代码”中，放在 4.3 网站统计的下面就好。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:7:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.4.4 效果如图所示 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:7:4","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.5 背景图片 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:8:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.5.1 原因 打开一篇博文，你是否因其空荡荡的背景而觉得索然无味呢？这个时候我没就要利用自己强大的 copy 能力，给自己找张好看的背景丢上去咯 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:8:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.5.2 配置到 CSS 的 body 代码段 background-image: url(\"https://img2018.cnblogs.com/blog/1358881/201909/1358881-20190910100015098-837598352.jpg\"); 如图所示： ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:8:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.5.1 效果图如下 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:8:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.6 网抑云音乐 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:9:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.6.0 效果图 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:9:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.6.1 获取网抑云 ID 打开网页版网抑云，然后选择你想播放的歌单，歌单可以是你自己的也可以是别人的，只要歌曲能播放就行，然后把 uri 后面的 id 给 copy 出来 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:9:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.6.2 代码添加 将一下代码添加至页脚Html代码中，更改 歌单 ID 为你自己的即可 \u003c!-- require APlayer --\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\"\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"\u003e\u003c/script\u003e \u003c!-- require MetingJS --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"\u003e\u003c/script\u003e \u003cmeting-js id=\"歌单ID\" lrc-type=\"0\" server=\"netease\" order=\"random\" type=\"playlist\" fixed=\"true\" list-olded=\"true\"\u003e \u003c/meting-js\u003e 如图所示，代码存放位置，直接放在之前的代码后面就行 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:9:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.7 去掉反对按钮 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:10:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.7.1 何谓反对按钮 看到这个按钮，下意识就想删了，大家可不要给我反对哦，否则就不更新了呢，不过我也不给你这个按钮，哈哈！ ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:10:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.7.2 在配置 CSS 在 **页面定制 CSS 代码 ** 里面直接在最后一行添加一下代码即可，记得保存由 #rightBuryit{display: none !important;}.buryit{display: none;} 如图所示： ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:10:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.7.3 效果图 这个时候我们再看就没有啦，我是不是很鸡贼呢？ ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:10:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.8 复制文字加版权 当用户复制文中内容(ctrl+C或鼠标右击复制)时，会自动加上版权文字，csdn的代码复制以及知乎的内容复制都有此功能。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:11:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.8.1 添加到**页首 HTML 代码 ** \u003c!--自动复制添加版权--\u003e \u003cscript language=\"javascript\" type=\"text/javascript\"\u003e jQuery(document).on('copy', function(e) { var selected = window.getSelection(); var selectedText = selected.toString().replace(/\\n/g, '\u003cbr\u003e'); // Solve the line breaks conversion issue 处理换行转换的问题 var copyFooter = '\u003cbr\u003e---------------------\u003cbr\u003e著作权归作者所有。\u003cbr\u003e' + '商业转载请联系作者获得授权，非商业转载请注明出处。\u003cbr\u003e' + '作者：易波叶平\u003cbr\u003e 源地址：' + document.location.href + '\u003cbr\u003e来源：博客园cnblogs\u003cbr\u003e© 版权声明：本文为博主原创文章，转载请附上博文链接！'; var copyHolder = $('\u003cdiv\u003e', {id: 'temp', html: selectedText + copyFooter, style: {position: 'absolute', left: '-99999px'}}); $('body').append(copyHolder); selected.selectAllChildren( copyHolder[0] ); window.setTimeout(function() { copyHolder.remove(); },0); }); \u003c/script\u003e 如图所示：直接在鼠标特效后面换行加上就好，然后及的保存 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:11:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.9 看板娘 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:12:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.9.1 效果图 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:12:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.9.2 所有文件 可以私聊博主要，博主没有藏私，也可以在下面的代码里面自己获取，如果合适，请给个推荐和关注，感谢博主的无私贡献，虽然博主也是从其他地方获取来着。 点击推荐和关注才会下载哦，不然会出错的呢 emmmm!!! ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:12:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.9.3 “博客侧边栏公告 ”设置 \u003c!--看板娘--\u003e \u003cdiv class=\"waifu\" id=\"waifu\"\u003e \u003cdiv class=\"waifu-tips\" style=\"opacity: 1;\"\u003e\u003c/div\u003e \u003ccanvas id=\"live2d\" width=\"280\" height=\"250\" class=\"live2d\"\u003e\u003c/canvas\u003e \u003cdiv class=\"waifu-tool\"\u003e \u003cspan class=\"fui-home\"\u003e\u003c/span\u003e \u003cspan class=\"fui-chat\"\u003e\u003c/span\u003e \u003cspan class=\"fui-eye\"\u003e\u003c/span\u003e \u003cspan class=\"fui-user\"\u003e\u003c/span\u003e \u003cspan class=\"fui-photo\"\u003e\u003c/span\u003e \u003cspan class=\"fui-info-circle\"\u003e\u003c/span\u003e \u003cspan class=\"fui-cross\"\u003e\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/kanbanniang/live2d.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/kanbanniang/waifu-tips.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003einitModel()\u003c/script\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:12:3","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.9.4 “页首 HTML 代码”配置 \u003c!--看板娘--\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/kanbanniang/waifu.css\"/\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/kanbanniang/flat-ui.min.css\"/\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:12:4","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.10 更改置顶图标 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:13:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.10.1 效果图 原本是 iconfont 的默认图标，我这里用个小火箭给替代了。 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:13:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.10.2 配置 在页面定制 CSS 代码那里最后直接追加即可，记得选择保存哦！ i.iconfont.icon-zhiding {background: url(https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/o_rocket.png) no-repeat center center;} ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:13:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.11 评论区优化 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:14:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.11.1效果图 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:14:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.11.2 配置 “页面定制 CSS 代码 ” #tbCommentBody {background: #fff url(https://gitee.com/dbnuo/Cnblogs-Theme-SimpleMemory/raw/master/img/comment_bg.jpg) right -65px;background-size: 250px;background-repeat: no-repeat;} ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:14:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.12 放大图片（low） ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:15:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.12.1 配置 “页面定制 CSS 代码 ” .post img {cursor: pointer;transition: all 0.5s;}.post img:hover {transform: scale(1.3);} ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:15:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.13 个人书单 ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:16:0","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.13.1 创建随笔 markdown 格式直接创建一个新“随笔”，然后 markdown 文档模式添加已下数据即可 \u003cinput id=\"bookListFlg\" type=\"hidden\"\u003e ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:16:1","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["blog"],"content":"4.13.2 配置书单数据 博客侧边栏公告设置，因为数据量很大，直接在最后一行新起，就不嵌套在原有的配置里面，不过我觉得后期应该直接加到 github管理引用才方便，期待中。 \u003c!--书单--\u003e \u003cscript type=\"text/javascript\"\u003e window.cnblogsConfig.bookList = [ { title: '在读', books: [ { cover: 'https://images.weserv.nl/?url=https://wfqqreader-1252317822.image.myqcloud.com/cover/71/25066071/t6_25066071.jpg\u0026default=ssl:images.weserv.nl/?url=https://img3.doubanio.com/view/subject/l/public/s29962521.jpg', name: '断舍离', formerNname: '', author: '[日]山下英子', translator: '贾耀平', press: '湖南文艺出版社', year: '2019-01|2020-10-14', score: 2, } ] }, { title: '已读', books: [ { cover: 'https://images.weserv.nl/?url=https://wfqqreader-1252317822.image.myqcloud.com/cover/509/413509/t6_413509.jpg\u0026default=ssl:images.weserv.nl/?url=https://img3.doubanio.com/view/subject/l/public/s27311101.jpg', name: '知行合一王阳明', formerNname: '', author: '度阴山', translator: '', press: '北京联合出版公司', year: '2014-07|2020-04', score: 4, }, ] }, ]; \u003c/script\u003e 如图所在位置所示： 5. 参考资料 https://github.com/BNDong/Cnblogs-Theme-SimpleMemory https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/ https://www.cnblogs.com/wkfvawl/p/9414180.html https://github.com/metowolf/MetingJS https://www.cnblogs.com/enjoy233/p/10328361.html#%E5%A4%8D%E5%88%B6%E6%AD%A3%E6%96%87%E6%96%87%E5%AD%97%E6%97%B6%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%89%88%E6%9D%83 https://www.cnblogs.com/yjlaugus/p/8724881.html#/c/subject/p/8724881.html https://live2d.fghrsh.net/demo/1.4.2/ https://github.com/fghrsh/live2d_demo ","date":"2020-09-27","objectID":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/:16:2","tags":["博客"],"title":"博客园主题","uri":"https://www.zhaouncle.com/%E5%8D%9A%E5%AE%A2%E5%9B%ADthemes/"},{"categories":["浏览器"],"content":"Chrome 谷歌浏览器书签同步方法","date":"2020-09-02","objectID":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/","tags":["Chrome","谷歌浏览器"],"title":"Chrome 书签同步","uri":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/"},{"categories":["浏览器"],"content":"1. 使用 Chrome 插件：书签同步 点击下面的超链接就可以进入 Chrome 应用商店去安装和使用了。 https://chrome.google.com/webstore/detail/%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/fbcbemgibdnpboehnfcnkegefaomnlbk?hl=zh-CN 使用这款 Chrome 插件之前你需要申请 github 账号，并配置 token 。 登录Github，在 Settings-\u003ePersonal access tokens-\u003eGenerate new token 生成一个访问token，点击 https://github.com/settings/tokens/new 这个超链接，就是创建你的token。 可以通过以下链接，创建一个 github 私有仓库 “Private” 就可以，这是这个插件好用的地方。 https://github.com/new 点击插件，依次输入“github 用户名”——“github token”——“github 仓库名称/bookmark.json” “书签插件”，左键点击可以直接配置选项 Username：表示github 用户名 Axxess Token：github上生成的token Path是仓库名名称，或者仓库名称+“/”+文件名 Upload：是上传到git上面(每次使用书签后 请点击上传) Download： 是下载网络上的书签 （换电脑以后可以点击download进行同步） Remember Me：是指记住这些配置 上传结果演示 ","date":"2020-09-02","objectID":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/:1:0","tags":["Chrome","谷歌浏览器"],"title":"Chrome 书签同步","uri":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/"},{"categories":["浏览器"],"content":"2. 注意 至于是否需要先关闭chrome的同步功能，这个待测试，如果不影响，那我觉得不需要关闭，随它就行！！！ chrome://settings/syncSetup/advanced?search=%E5%90%8C%E6%AD%A5 ","date":"2020-09-02","objectID":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/:2:0","tags":["Chrome","谷歌浏览器"],"title":"Chrome 书签同步","uri":"https://www.zhaouncle.com/chrome%E4%B9%A6%E7%AD%BE%E5%90%8C%E6%AD%A5/"},{"categories":["hugo"],"content":"Typora + PicGo 编写 hugo md + 图床","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"1.下载 PicGo：https://github.com/Molunerfinn/PicGo Typora：https://www.typora.io/ ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:1:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"2.软件学习地址 少数派： Typora：https://sspai.com/search/post/Typora PicGo：https://sspai.com/search/post/PicGo ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:2:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"3.介绍 Typora 是专注于编写 Markdown 格式的编辑软件，使用方便，支持多种格式导出。 PicGo 是一款免费的图床管理应用，支持拖拽上传，剪切板上传等方式。你可以用它快捷地将图片上传到图床并获得网络链接。 注意：请不要把 PicGo 安装到 C 盘 Program Files 下 ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:3:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"4.为什么需要图床 Markdown 可以理解为增强版的文本文档，语法简单，支持更多的风格样式，相比 word 更加轻便，文件大小更小，同时可导出为指定格式，目前大多是技术博客论坛已支持 Markdown 格式，基本上可以做到一次编写多处使用。当然 Markdown 也存在缺点，比如图片。 Markdown 文档编写时可使用本地图片，但是无法在网络上使用。图床的作用可以理解为将文档中的图片放到网络上，直接引用网络地址，这样可以做到无论在那个平台都可以使用统一的图片地址。 搭建图床教程较多此处不做讨论，作者使用的是 github 搭建的免费图床。 ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:4:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"5.设置 GitHub Toekn 参考：https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token Token 权限只要设置 “repo” 即可。 token： |-seetings |-- Developer settings |------Personal access tokens 下生成 注意：token 只会显示一次，记得保存如果你不建议重新配置一次的话 ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:5:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"6.配置 PicGo (GitHub) 图床 参考：https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:6:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"7. 使用了 CDN 加速 https://cdn.jsdelivr.net/gh/用户名/仓库名 ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:7:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"8.Typora 设置 记得“验证图片上传选项” ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:8:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"9. 之后你截图然后直接复制到 Typora，它就会自动转化为 markdown 的图片格式并指向你设置的 github 的 url 地址了。 ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:9:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["hugo"],"content":"10.MyHugoBlog 设置子模块到 images 这一步是介于之前的 hugo 的配置，其它人可以忽略。 MyBlogHugo/static/ rm -rf images git submodule add https://github.com/ZhaoUncle/images.git images cd MyBlogHugo #添加 sub pull 到 deploy.sh 脚本 gitsubmoduleImages(){ cd static/images/ git submodule foreach git pull } ","date":"2020-08-24","objectID":"https://www.zhaouncle.com/picgo_typora/:10:0","tags":["hugo","图床"],"title":"Typora + PicGo 编写 hugo md + 图床","uri":"https://www.zhaouncle.com/picgo_typora/"},{"categories":["Tips"],"content":"微信公众号文章搜索方法","date":"2020-08-19","objectID":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/","tags":["Tips"],"title":"Wechat_文章搜索方法","uri":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/"},{"categories":["Tips"],"content":"问题： 最近因为学习 jenkins pipeline，加了一堆公众号，现在轮到自己，头疼了！！！ 怎么根据关键字去搜索所有公众号文章呢？ ","date":"2020-08-19","objectID":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/:0:0","tags":["Tips"],"title":"Wechat_文章搜索方法","uri":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/"},{"categories":["Tips"],"content":"1. 手机移动端微信客户端搜索 ","date":"2020-08-19","objectID":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/:0:1","tags":["Tips"],"title":"Wechat_文章搜索方法","uri":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/"},{"categories":["Tips"],"content":"2. pc 端微信客户端搜索 这里的“搜一搜”就是啦 ","date":"2020-08-19","objectID":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/:0:2","tags":["Tips"],"title":"Wechat_文章搜索方法","uri":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/"},{"categories":["Tips"],"content":"3. 搜狗 web端搜索 地址：https://weixin.sogou.com/ ","date":"2020-08-19","objectID":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/:0:3","tags":["Tips"],"title":"Wechat_文章搜索方法","uri":"https://www.zhaouncle.com/wechat_%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2/"},{"categories":["Thoughts","三毛"],"content":"三毛相关摘抄","date":"2020-08-12","objectID":"https://www.zhaouncle.com/%E4%B8%89%E6%AF%9B/","tags":["三毛"],"title":"三毛","uri":"https://www.zhaouncle.com/%E4%B8%89%E6%AF%9B/"},{"categories":["Thoughts","三毛"],"content":" 黄昏,落雾了,沉沉的,沉沉的雾。 爱情如果不落到穿衣、吃饭、睡觉、数钱这些实实在在的生活中去,是不会长久的。真正的爱情,就是不紧张,就是可以在他面前无所顾忌地打嗝、放屁、挖耳朵、流鼻涕;真正爱你的人,就是那个你可以不洗脸、不梳头、不化妆见到的那个人。 《如果有来生》 如果有来生，要做一棵树， 站成永恒。没有悲欢的姿势， 一半在尘土里安详， 一半在风里飞扬； 一半洒落荫凉， 一半沐浴阳光。 非常沉默、非常骄傲。 从不依靠、从不寻找。 如果有来生，要化成一阵风， 一瞬间也能成为永恒。 没有善感的情怀，没有多情的眼睛。 一半在雨里洒脱， 一半在春光里旅行； 寂寞了，孤自去远行， 把淡淡的思念统统带走， 从不思念、从不爱恋； 如果有来生，要做一只鸟， 飞越永恒，没有迷途的苦恼。 东方有火红的希望， 南方有温暖的巢床， 向西逐退残阳，向北唤醒芬芳。 如果有来生， 希望每次相遇， 都能化为永恒。 ","date":"2020-08-12","objectID":"https://www.zhaouncle.com/%E4%B8%89%E6%AF%9B/:0:0","tags":["三毛"],"title":"三毛","uri":"https://www.zhaouncle.com/%E4%B8%89%E6%AF%9B/"},{"categories":["Thoughts","电视剧"],"content":"电视剧《三十而已》","date":"2020-08-09","objectID":"https://www.zhaouncle.com/%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2/","tags":["三十而已"],"title":"三十而已","uri":"https://www.zhaouncle.com/%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2/"},{"categories":["Thoughts","电视剧"],"content":"《婚礼誓词》——假想 注：电视剧里面第六集，钟晓芹写给同事的结婚 从今天起， ​ 不管多忙， ​ 我们都要一起吃饭， ​ 饭桌上不玩手机、不开电视， ​ 我们只聊家常。 从今天起， ​ 我不会再跟你吵架， ​ 万一要吵， ​ 今日架今日毕， ​ 我不能让你带着烦恼进入梦乡。 从今天起， ​ 我不会再养任何小动物了， ​ 因为在这个世界上， ​ 任何小猫小鱼小狗， ​ 都不如你可爱！ 从今天起， ​ 项链和耳环 ​ 你就别再对着镜子较劲， ​ 我帮你戴， ​ 为你摘。 从今天起， ​ 在你的世界里， ​ 我不会沉默和假睡， ​ 我保证， ​ 永不失联。 我们一起 ​ 携手抵抗婚姻当中的 ​ 平淡、焦虑和无常. 我们一起 ​ 面对岁月里的 ​ 衰老、健忘和肥胖。 我们一起 ​ 去创造新的生命， ​ 送他们远行， ​ 等他们回家！ 《顾家》 注：第十六集，三姐妹之顾佳的后顾无忧 人， ​ 不担心后路 ​ 唯一的方式 ​ 就是要把前路 ​ 走长， 就， ​ 像这咖啡 ​ 你一开始 ​ 喝的时候 ​ 觉得它苦， 但， ​ 喝久了 ​ 反而会享受 ​ 这种苦涩带来的 ​ 刺激， 隔几天不喝， ​ 你还会想念 ​ 这种苦涩呢， 所以啊， ​ 再过五年之后 ​ 我们也许回过头来， 看看， ​ 今天遇到的磕磕绊绊 ​ 反而会感激呢 ","date":"2020-08-09","objectID":"https://www.zhaouncle.com/%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2/:0:0","tags":["三十而已"],"title":"三十而已","uri":"https://www.zhaouncle.com/%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2/"},{"categories":["Notion"],"content":"Notion 绑定自定义域名","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["Notion"],"content":"Notion 绑定自定义域名 自定义域名是个很常见的需求，很多 Notion 用户拿 Notion 作博客，想给自己绑定个性化的域名却发现没有很好的途径，最后域名只能做个转发，跳转到 Notion 官方页面。 考虑到很多 Notion 用户并非程序员，所以这个文章不会解释过多的技术细节，是新手向的教程。 按照下面的教程做完，将会实现。 通过自己的域名访问 Notion 浏览器地址上显示自己的域名 访问页面时会有一定程度的加速效果 ","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/:0:0","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["Notion"],"content":"原理说明 官方目前不打算推出自定义域名的特性。如果你将自己的域名设置为隐式转发会在前端看到一个这样的提示。 其主要的检验手段是在前端 js 做校验， Notion 是一个典型的单页应用，利用 Cloudflare 的 worker 做代理，将 js 中的 notion.so 全部替换成自己的域名，这样即可绕过校验。 如果访问 app.js，则替换 js 中的域名，使前端域名校验失效。 如果访问其它路径，则返回原有内容。 这么做是有局限的。 只读，无法登陆，无法评论。仅仅做展示用。 部分第三发接口无法调用（反正是只读，也没啥问题） ","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/:1:0","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["Notion"],"content":"准备工作 域名一个 Cloudflare 帐号一枚 （后面简称 cf） ","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/:2:0","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["Notion"],"content":"操作过程 域名 DNS 服务器设置为 cf （略）。 为域名配置一条 a 记录，ip 地址随便填（不知道填什么就 ping 下 www.cloudfare.com ，例如 104.17.209.9 ），但是要通过 cf proxy，打开 Cloudflare 的「DNS」编辑页面，添加一条记录。如下图： 注意，其中的 IPv4 地址部分，虽然你可以改成任意 DNS 的 IP，或者是你自己的服务器，但是当你的 IP 为国内 IP 时，有概率会因为备案问题而 404。 创建 Workers，查看如下的“worker 代码” 添加一条 route，并指向上方的 worker rule ","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/:2:1","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["Notion"],"content":"Worker 代码 配置 worker：https://www.bilibili.com/video/av64011915/ cloudfare网址链接：https://dash.cloudflare.com 复制下面代码 第一行改为你的域名。 第二行改为你想让访问者看到的首页地址。 例如 我想要用户 访问 link.zhaouncle.com 时，跳转到指定的页面（Home 页） 例如：https://www.notion.so/e00f6db6166e47279acab60c32094e37?v=efe4879069ed4d5b880c7118fb3a370a const MY_DOMAIN = \"link.zhaouncle.com\" const START_PAGE = \"https://www.notion.so/e00f6db6166e47279acab60c32094e37?v=efe4879069ed4d5b880c7118fb3a370a\" addEventListener('fetch', event =\u003e { event.respondWith(fetchAndApply(event.request)) }) const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\", \"Access-Control-Allow-Methods\": \"GET, HEAD, POST,PUT, OPTIONS\", \"Access-Control-Allow-Headers\": \"Content-Type\", } function handleOptions(request) { if (request.headers.get(\"Origin\") !== null \u0026\u0026 request.headers.get(\"Access-Control-Request-Method\") !== null \u0026\u0026 request.headers.get(\"Access-Control-Request-Headers\") !== null) { // Handle CORS pre-flight request. return new Response(null, { headers: corsHeaders }) } else { // Handle standard OPTIONS request. return new Response(null, { headers: { \"Allow\": \"GET, HEAD, POST, PUT, OPTIONS\", } }) } } async function fetchAndApply(request) { if (request.method === \"OPTIONS\") { return handleOptions(request) } let url = new URL(request.url) let response if (url.pathname.startsWith(\"/app\") \u0026\u0026 url.pathname.endsWith(\"js\")) { response = await fetch(`https://www.notion.so${url.pathname}`) let body = await response.text() try { response = new Response(body.replace(/www.notion.so/g, MY_DOMAIN).replace(/notion.so/g, MY_DOMAIN), response) // response = new Response(response.body, response) response.headers.set('Content-Type', \"application/x-javascript\") console.log(\"get rewrite app.js\") } catch (err) { console.log(err) } } else if ((url.pathname.startsWith(\"/api\"))) { response = await fetch(`https://www.notion.so${url.pathname}`, { body: request.body, // must match 'Content-Type' header headers: { 'content-type': 'application/json;charset=UTF-8', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36' }, method: \"POST\", // *GET, POST, PUT, DELETE, etc. }) response = new Response(response.body, response) response.headers.set('Access-Control-Allow-Origin', \"*\") } else if (url.pathname === `/`) { let pageUrlList = START_PAGE.split(\"/\") let redrictUrl = `https://${MY_DOMAIN}/${pageUrlList[pageUrlList.length-1]}` return Response.redirect(redrictUrl, 301) } else { response = await fetch(`https://www.notion.so${url.pathname}`, { body: request.body, // must match 'Content-Type' header headers: request.headers, method: request.method, // *GET, POST, PUT, DELETE, etc. }) } return response } 参考网站： https://gine.me/posts/466ca19681634b09b123067f880ea396?nsukey=cgA3O8FAmy0q877VvsS2i1DFyHR%2Bk9iwyM%2F%2B7M5zbx9ii20yrqWZwmmKVzd2a2n80FH9U9OaZ1rHrF6UKlksZ6e57XVwZKydlJ1TDg3NtQLHBaeBiAn9%2FIQ9v%2FeKcQKvQfjgpr7xuwiuo8LPMSu6WEyBl3bIUTeXEwj5qHQ8hKXZvERUVYXFT54%2BmbaxpC4RoS7TIgdiB8AAc098g0WUWw%3D%3D https://www.notion.so/URL-e1620aa7a9204c289e0be7c65eaeef48 ","date":"2020-07-28","objectID":"https://www.zhaouncle.com/notion/:2:2","tags":["Notion"],"title":"Notion 绑定自定义域名","uri":"https://www.zhaouncle.com/notion/"},{"categories":["github"],"content":"Github 个人主页玩耍初试","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"1. 个人主页 自定义个人主页之后你会发现除了项目的展示，还有个人的其他信息介绍。下面是小编设计的个人主页，初次尝试，请勿见笑！ ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:1:0","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"2. 在你的 github 上创建一个新仓库 这个新仓库的名称要和你登录账号名称保持一致。 创建结果： ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:2:0","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"3. 将远程仓库拉到本地电脑上 用 git clone 一下仓库并且创建 README.md 文件，执行以下命令 git clone git@github.com: 你用户名 / 你用户名. git ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:3:0","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"4. 这个时候开始我们的自定义风格页面玩耍了 ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:4:0","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"4.1 在你的 README 中 获取动态生成的 GitHub 统计信息！ 上面的 README.md 我插入一个图片，可以实时展示你 github 仓库的一些数据信息，是通过一个链接实现的，如下图，记得设置链接的参数 username = 你的用户名 统计卡片示例： 语言统计： ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:4:1","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["github"],"content":"5.完成上面几步之后，我们就可以开始推送到你的远程仓库 手动测试命令成功能够推送之后，直接一个 sh 脚本在当前实现就好啦，每次手动 sh update.sh 就能推送到 github 代码库了。 $ cat update.sh #!/bin/bash git add . git commit -m \"update\" git push -u origin master 上面的按照上面的步骤做完之后就可以查看属于你风格的个人主页了。 感兴趣的小伙伴们快去试试吧！ ","date":"2020-07-27","objectID":"https://www.zhaouncle.com/githubtry/:5:0","tags":["github"],"title":"Github 个人主页","uri":"https://www.zhaouncle.com/githubtry/"},{"categories":["Thoughts","庄子"],"content":"逍遥游","date":"2020-07-19","objectID":"https://www.zhaouncle.com/%E5%BA%84%E5%AD%90/","tags":["庄子"],"title":"庄子*逍遥游","uri":"https://www.zhaouncle.com/%E5%BA%84%E5%AD%90/"},{"categories":["Thoughts","庄子"],"content":" “吾生也有涯，而知也无涯。以有涯随无涯，殆已！已而为知者，殆而已矣！为善无近名，为恶无近刑，缘督以为经，可以保身，可以全生，可以养亲，可以尽年。”——《庄子·内篇·养生主第三》 ","date":"2020-07-19","objectID":"https://www.zhaouncle.com/%E5%BA%84%E5%AD%90/:0:0","tags":["庄子"],"title":"庄子*逍遥游","uri":"https://www.zhaouncle.com/%E5%BA%84%E5%AD%90/"},{"categories":["Thoughts","人物自传"],"content":"一个人的气质里，藏着她读过的书","date":"2020-06-27","objectID":"https://www.zhaouncle.com/%E6%9E%97%E5%BE%BD%E5%9B%A0/","tags":["林徽因"],"title":"林徽因","uri":"https://www.zhaouncle.com/%E6%9E%97%E5%BE%BD%E5%9B%A0/"},{"categories":["Thoughts","人物自传"],"content":" 一身诗意千寻爆，万古人间四月天 大姒嗣徽音，则百斯男。出自《诗·大雅·思齐》 林清玄说：“一个人的气质里，藏着她读过的书” 可谓腹有诗书气自华之奇女子典范也 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/%E6%9E%97%E5%BE%BD%E5%9B%A0/:0:0","tags":["林徽因"],"title":"林徽因","uri":"https://www.zhaouncle.com/%E6%9E%97%E5%BE%BD%E5%9B%A0/"},{"categories":["hugo"],"content":"hugo 使用 LoveIt 主题搭建个人博客","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"使用一些简单的 shell 脚本处理自己的 hugo 博客和搜索 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:0:0","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"1 config.toml 配置 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:1:0","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"1.1 首先我们配置好 config.toml 的 algolia 的配置 # 搜索配置 [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"搜索\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = true [languages.zh-cn.params.search.algolia] index = \"index.zh-cn\" #algolia 里面的 index 名称相对应，如果你有多语言版本，那么就需要创建多个语言的 index，我这里仅举例中文的版本 appID = \"\" searchKey = \"\" ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:1:1","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2 Algolia 配置 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:0","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.1 登录 Algolia 官网 ，注册账号，创建 Application 名为 “test01”作为举例，默认选择 “FREE” 即可，这里自定义名称 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:1","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.2 我这里选择香港作为存储地区 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:2","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.3 创建index，要与config.toml 的配置 index 一样 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:3","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.4 将 API Keys 里面补充到 config.toml 里面 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:4","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.5 如何删除不需要的APP ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:5","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.5.1 找到设置界面 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:6","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"2.5.2 进入 Applications 配置，点击 小三点进行删除 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:2:7","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3 使用 atomic-algolia 来完成自动更新索引 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:0","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3.1 首先安装 npm，这里不介绍 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:1","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3.2 安装 atomic-algolia npm -g install atomic-algolia ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:2","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3.3 创建 .env 文件存放 algolia 配置 注意：只有执行hugo 生成静态文件，才会在 public 目录生成index.json 索引。 ALGOLIA_APP_ID=\"8GC6CRN3M8\" ALGOLIA_ADMIN_KEY=\"d4467e8c57c2b12f53da9c8ec1c629be\" ALGOLIA_INDEX_NAME=\"index.zh-cn\" ALGOLIA_INDEX_FILE=\"public/index.json\" ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:3","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3.4 创建 push_algolia_json.js 脚本 var atomicalgolia = require(\"atomic-algolia\") var indexName = process.env.ALGOLIA_INDEX_NAME var indexPath = process.env.ALGOLIA_INDEX_FILE var cb = function(error, result) { if (error) throw error console.log(result) } atomicalgolia(indexName, indexPath, cb) ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:4","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"3.5 手动执行将索引到 algolia source .env node push_algolia_json.js ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:3:5","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"4 定制化脚本 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:4:0","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["hugo"],"content":"4.1 统一脚本deploy.sh，配合Hugo（一）Github Pages 搭建个人博客 #!/bin/sh # If a command fails then the deploy stops set -e start_local_hugo_server(){ hugo server --disableFastRender } update_algolia(){ cd ../ type=`cat config.toml|grep -A 5 \"languages.zh-cn.params.search\"|grep type|awk -F'\"' '{print $2}'` if [ \"$type\" == \"algolia\" ];then source .env node push_algolia_json.js printf \"\\033[0;32m已经更新到 algolia ！！！\\033[0m\\n\" fi } pushMyBlogHugo(){ printf \"\\033[0;32mDeploying updates to GitHub \"https://github.com/ZhaoUncle/MyBlogHugo\"\\033[0m\\n\" git pull # Add changes to git. git add . # Commit changes. msg=\"change MyBlogHugo site $(date)\" if [ \"$#\" -gt 1 ]; then msg=\"$2\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master } push_zhaouncle(){ printf \"\\033[0;32mDeploying updates to GitHub \"https://github.com/ZhaoUncle/zhaouncle.github.io\"\\033[0m\\n\" # Build the project. hugo # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public git pull # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ \"$#\" -gt 1 ]; then msg=\"$2\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master update_algolia } case $1 in 1) start_local_hugo_server ;; 2) pushMyBlogHugo $* ;; 3) push_zhaouncle $* ;; 4) hugo serve -e production ;; 5) hugo server --source=themes/LoveIt/exampleSite ;; esac 脚本解析： sh deploy.sh 1：启动 hugo 作为本地调试使用，实时将文章的内容更新到站点，不需要重启也能边修改边观看效果。 sh deploy.sh 2：将 MyHugoBlog 上传到 Github 存储库。 sh deploy.sh 3：将 public 静态文件站点上传到Github Pages 存储库，并更新 algolia 的索引。 sh deploy.sh 4：主要是用来调试 cdn，评论系统等，所以要用 production 变量来启动。 sh deploy.sh 5：查看官方例子，方便调试。 ","date":"2020-06-27","objectID":"https://www.zhaouncle.com/hugo_02/:4:1","tags":["hugo","博客"],"title":"Hugo（二）algolia 博客搜索及自动化处理脚本","uri":"https://www.zhaouncle.com/hugo_02/"},{"categories":["Thoughts","随笔"],"content":"2020 年端午节有想","date":"2020-06-26","objectID":"https://www.zhaouncle.com/20200626/","tags":["无言"],"title":"于 2020 年 6 月 26 日","uri":"https://www.zhaouncle.com/20200626/"},{"categories":["Thoughts","随笔"],"content":"2020 年端午节有想 就像北岛写道：“那时，我们有梦，关于文学，关于爱情，关于理想，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。” ​ 偶然间看到这么一句话，翘起了二郎腿，挠挠不怎么聪明的脑袋，总感觉得来一瓶啤酒才能消愁，如果不能，可能需要两瓶。鉴于自己不会喝酒，想想只能放弃这种不是很成熟确是成年人最常用的手段，于是写起了 blog。 ​ 昨天是端午节，也是放假的第一天，很神奇的起床去爬山，深圳的铁仔山公园，这是第二次，上午 9 点钟这个不算早不算晚的时间点，骑着 ofo 过去就已经开始流了满头大汗。 😌，千篇一律的皮囊下面的厚重脂肪开始了无声的反抗。 ​ 生活的千篇一律，工作的两点一线，可能已经麻木了大多数人的神经，都是为了活着而生活。拨开那一层层的浮华，褪去了虚荣的外表，便只剩下一个孤独的灵魂了吧，也或许是纯净的也说不定，不过始终不可能如孩童刚降临人间般纯粹了。俗世的大染缸终究是左一撇右一撇的挥斥方遒，将纯净的纸张，书写着自己一生的故事，一副含有插画的自传。也不知是否有水墨画如清明上河图那样的巨作诞生，起码过了 26 了，我还是没看见这样的兆头。当然，偶尔做做梦还是可以有的。 ​ 在山顶上找了个无人的阶梯躺下，闭上双眼，除了一身湿透的戎装在树荫下，渐渐被清风逐凉，难得一丝清净。 ","date":"2020-06-26","objectID":"https://www.zhaouncle.com/20200626/:0:0","tags":["无言"],"title":"于 2020 年 6 月 26 日","uri":"https://www.zhaouncle.com/20200626/"},{"categories":["ELK"],"content":"【ELK】centos7 安装 elk 7.6.2","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1. 初始化环境 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:0:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.0 初始化环境官网参考 https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:1:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.1 架构 主机 ip hostname 安装的服务 192.168.110.245 node01 es、kibana 192.168.110.246 node02 es、logstash、filebeat、auditbeat 192.168.110.247 node03 es、filebeat、auditbeat ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:2:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.2 配置 hosts cat \u003c\u003c EOF \u003e\u003e /etc/hosts 192.168.110.245 node01 192.168.110.246 node02 192.168.110.247 node03 EOF ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:3:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.3 修改 hostname hostnamectl set-hostname node01 hostnamectl set-hostname node02 hostnamectl set-hostname node03 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:4:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.4 时间同步(联网状态) yum -y install ntpdate /bin/echo \"* */1 * * * /usr/sbin/ntpdate pool.ntp.org \u003e /dev/null 2\u003e\u00261\" \u003e\u003e /var/spool/cron/root ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:5:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.5 关闭 selinux setenforce 0 #临时，马上生效 sed -i 's/enforcing/disabled/' /etc/selinux/config #永久，重启生效 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:6:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.6 关闭防火墙 iptables -F systemctl stop firewalld systemctl disable firewalld ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:7:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.7 内存解锁和文件限制 #临时修改，重启失效 ulimit -n 65535 #永久修改，重启生效 cat \u003c\u003c EOF \u003e\u003e/etc/security/limits.conf elasticsearch soft memlock unlimited elasticsearch hard memlock unlimited * soft nofile 65535 * hard nofile 65535 EOF ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:8:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.8 关闭 swap 缓存 swapoff -a #临时 sed -i '/swap/s/^/#/' /etc/fstab #永久 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:9:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.9 设置 es 用户内存限制大小 sysctl -w vm.max_map_count=262144 echo 'vm.max_map_count=262144' \u003e\u003e /etc/sysctl.conf ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:10:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.10 不能 root 用户启动 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:11:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"1.11 java版本 es 7.*之后的版本不需要安装环境 java，默认自带 jdk 环境，但是其他的服务还是需要 jdk 环境的，所以还是要统一安装，另外 jdk 版本要为 8 或者 11，我这里默认 8 就好了，直接 yum 安装 yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel 2. 安装 es 集群 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:12:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.1 官网下载 wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.2-x86_64.rpm wget https://artifacts.elastic.co/downloads/kibana/kibana-7.6.2-x86_64.rpm wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.2-x86_64.rpm wget https://artifacts.elastic.co/downloads/logstash/logstash-7.6.2.rpm wget https://artifacts.elastic.co/downloads/beats/auditbeat/auditbeat-7.6.2-x86_64.rpm ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:13:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.2 yum 直接安装则可 yum -y install elasticsearch yum -y install kibana yum -y install filebeat yum -y install auditbeat ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:14:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.3 es 配置修改，3 台机都要，其中 node.name 配置不同，其他一样 cd /etc/elasticsearch/ \u0026\u0026 cp elasticsearch.yml elasticsearch.yml.orig cat \u003c\u003c EOF \u003e elasticsearch.yml cluster.name: es-cluster node.name: node01 path.data: /var/lib/elasticsearch path.logs: /var/log/elasticsearch bootstrap.memory_lock: true network.host: 0.0.0.0 http.port: 9200 discovery.seed_hosts: [\"192.168.110.245\", \"192.168.110.246\", \"192.168.110.247\"] cluster.initial_master_nodes: [\"node01\"] xpack.security.enabled: true xpack.security.transport.ssl.enabled: true xpack.security.transport.ssl.verification_mode: certificate xpack.security.transport.ssl.keystore.path: elastic-certificates.p12 xpack.security.transport.ssl.truststore.path: elastic-certificates.p12 xpack.security.audit.enabled: true xpack.security.audit.logfile.events.emit_request_body: true EOF #node02: sed -i 's#node\\.name\\:\\ node01#node.name: node02#' /etc/elasticsearch/elasticsearch.yml #node03: sed -i 's#node\\.name\\:\\ node01#node.name: node03#' /etc/elasticsearch/elasticsearch.yml 解释说明： cluster.name 集群名字，同一个集群中使用相同名字，单机就随意 node.name: es-cluster 节点名字，每台机都不一样 bootstrap.memory_lock: true 将进程地址所在 RAM 空间中，以防止 es 内存被换出，交换对性能，节点稳定性非常不利，应不惜一切代价避免交换。它可能导致垃圾收集持续数分钟而不是毫秒，并且可能导致节点响应缓慢甚至断开与群集的连接。在弹性分布式系统中，让操作系统杀死该节点更为有效。 1、如果你的机器已经全局进制swap，那么不开启这个配置也无所谓。详情查看 1.8 配置 2、或者配置了/etc/sysctl.conf 的 vm.swappiness = 1 ，所以也不需要配置 true 3、如果以上两个你都没做，那你还是乖乖把 true 配置上。我这里都做了，也不影响。 network.host: 0.0.0.0 需要外网 ip 可以这么配置，不然配置内网也行 http.port: 9200 端口号，不配置的话默认9200 discovery.seed_hosts: [\"192.168.110.245\", \"192.168.110.246\", \"192.168.110.247\"] 这里可以不指定，不过避免 es 回环查找，直接指定方便 cluster.initial_master_nodes: [\"node-1\"] 首次启动 es 集群指定 master 机器，之后重启和添加新服务器都无需更改 xpack.security.enabled: true 启用 xpack 安全模块 xpack.security.transport.ssl.enabled: true TLS 功能，可对通信进行加密 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:15:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.4 如果是 yum 安装的方式需要修改es的启动文件 参考地址 cat /usr/lib/systemd/system/elasticsearch.service [Service] LimitMEMLOCK=infinity 修改命令： sed -i '/\\[Service\\]/a\\LimitMEMLOCK=infinity' /usr/lib/systemd/system/elasticsearch.service 修改完之后要reload 一下 sudo systemctl daemon-reload ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:16:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.5 如果你要设置 es 的内存大小，有两个地方 1、jvm.options cat /etc/elasticsearch/jvm.options -Xms512m -Xmx512m 2、这里不做介绍，以上一种为常用方法，如果你设置的 java PATH 有问题，可以在这里面指定 java 环境。 /etc/sysconfig/elasticsearch ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:17:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.6 在 node01 配置证书，我这里设置的空密码，直接回车便可。 /usr/share/elasticsearch/bin/elasticsearch-certutil ca /usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 cp /usr/share/elasticsearch/{elastic-stack-ca.p12,elastic-certificates.p12} /etc/elasticsearch/ chmod 640 /etc/elasticsearch/elastic-certificates.p12 #scp /etc/elasticsearch/elastic-certificates.p12 root@node02:/etc/elasticsearch/ #scp /etc/elasticsearch/elastic-certificates.p12 root@node03:/etc/elasticsearch/ 生成CA证书 bin/elasticsearch-certutil ca，将产生新文件 elastic-stack-ca.p12。该 elasticsearch-certutil 命令还会提示你输入密码以保护文件和密钥，请保留该文件的副本并记住其密码。 为集群中的每个节点生成证书和私钥 bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12，将产生新文件 elastic-certificates.p12。系统还会提示你输入密码，你可以输入证书和密钥的密码，也可以按Enter键将密码留空。默认情况下 elasticsearch-certutil 生成没有主机名信息的证书，这意味着你可以将证书用于集群中的每个节点，另外要关闭主机名验证。 注意：如果你在创建证书时输入了密码，那可以通过下面的方法设置。 /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:18:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.7 node01启动 es systemctl start elasticsearch systemctl enable elasticsearch systemctl status elasticsearch ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:19:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.8 node01，配置账号密码完成tls通信 命令： /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive 结果： [root@node01 elasticsearch]# /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user. You will be prompted to enter passwords as the process progresses. Please confirm that you would like to continue [y/N]y Enter password for [elastic]: Reenter password for [elastic]: Passwords do not match. Try again. Enter password for [elastic]: Reenter password for [elastic]: Enter password for [apm_system]: Reenter password for [apm_system]: Enter password for [kibana]: Reenter password for [kibana]: Enter password for [logstash_system]: Reenter password for [logstash_system]: Enter password for [beats_system]: Reenter password for [beats_system]: Enter password for [remote_monitoring_user]: Reenter password for [remote_monitoring_user]: Changed password for user [apm_system] Changed password for user [kibana] Changed password for user [logstash_system] Changed password for user [beats_system] Changed password for user [remote_monitoring_user] Changed password for user [elastic] 检查：检查 node01是否启动并且密码访问正常 [root@node01 elasticsearch]# curl http://192.168.110.245:9200/_cat/nodes?v -u elastic:123456 ip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name 192.168.110.245 12 90 3 0.07 0.08 0.08 dilm * node01 注意的问题： 证书权限没设置，创建好默认为 600，手动修改为 640 启动报错相关： org.elasticsearch.ElasticsearchSecurityException: failed to load SSL configuration [xpack.security.transport.ssl] Caused by: org.elasticsearch.ElasticsearchException: failed to initialize SSL TrustManager - not permitted to read truststore file [/etc/elasticsearch/elastic-certificates.p12] Caused by: java.nio.file.AccessDeniedException: /etc/elasticsearch/elastic-certificates.p12 权限查看及修改 [root@node01 elasticsearch]# ll /etc/elasticsearch/elastic-certificates.p12 -rw------- 1 640 elasticsearch 3451 Apr 16 18:57 elastic-certificates.p12 [root@node01 elasticsearch]# chmod 640 /etc/elasticsearch/elastic-certificates.p12 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:20:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.9 将 node01 的证书 scp 到 02 和 03，并启动 02 和 03的 es 这里有三个证书 elasticsearch.keystore：这里存放的是 elastic和 123456 的账号密码，给 es 集群使用，默认读取 elastic-stack-ca.p12：这个是 ca 初始证书，保存好就行，生成完 cert 之后用处不大 elastic-certificates.p12：这个是 cert 验证证书，es 集群就是通过这个证书完成 scp /etc/elasticsearch/{elasticsearch.keystore,elastic-stack-ca.p12,elastic-certificates.p12} root@node02:/etc/elasticsearch/ scp /etc/elasticsearch/{elasticsearch.keystore,elastic-stack-ca.p12,elastic-certificates.p12} root@node03:/etc/elasticsearch/ systemctl start elasticsearch systemctl enable elasticsearch systemctl status elasticsearch ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:21:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"2.10 基于 api 的检查，集群是否搭建成功。 #查看集群健康状态 curl http://192.168.110.245:9200/_cat/health?v -u elastic:123456 #查看集群节点 curl http://192.168.110.245:9200/_cat/nodes?v -u elastic:123456 可以发现 es 集群 ok 了！我们可以发现 node01 的 master 字段值为*，没错，它就是 master 节点了。 [root@node01 elasticsearch]# curl http://192.168.110.245:9200/_cat/health?v -u elastic:123456 epoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent 1591345666 08:27:46 es-cluster green 3 3 2 1 0 0 0 0 - 100.0% [root@node01 elasticsearch]# curl http://192.168.110.245:9200/_cat/nodes?v -u elastic:123456 ip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name 192.168.110.245 20 91 0 0.00 0.01 0.05 dilm * node01 192.168.110.246 21 78 63 0.42 0.14 0.08 dilm - node02 192.168.110.247 29 76 13 0.89 0.29 0.13 dilm - node03 3. 安装 es 的 web UI ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:22:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"3.0 有哪些 web ui ElasticHD 我喜欢用这个，因为临时使用可以直接./ElasticHD 启动，方便快捷。 有 sql 转 json 的小工具，很好用 https://github.com/360EntSecGroup-Skylar/ElasticHD/ elasticsearch-HQ 要安装 python3.6 有 es 默认的接口查询，还有 node 节点的监控数据 https://github.com/ElasticHQ/elasticsearch-HQ/ dejavu 支持从 json 和 csv 导入导出数据 https://github.com/appbaseio/dejavu/ cerebro https://github.com/lmenezes/cerebro elasticsearch-head https://github.com/mobz/elasticsearch-head elasticsearch-browser 不支持 5.0 之后 https://github.com/OlegKunitsyn/elasticsearch-browser elasticsearch-kopf 支持 2.0之前,cerebro 是其替代品 https://github.com/lmenezes/elasticsearch-kopf ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:23:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"3.1 如果带账号密码访问的话 url http://elastic:123456@192.168.110.245:9200 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:24:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"3.2 安装web UI管理工具ElasticHD: 普通安装： （1）安装supervisord yum -y install supervisor echo_supervisord_conf \u003e supervisord.conf systemctl start supervisord systemctl enable supervisord （2）安装 elasticHD yum -y install xdg-utils cd /usr/local/src/ wget https://github.com/360EntSecGroup-Skylar/ElasticHD/releases/download/1.4/elasticHD_linux_amd64.zip unzip elasticHD_linux_amd64.zip chmod 0777 ElasticHD mv ElasticHD /usr/local/bin/ cat \u003c\u003cEOF\u003e /etc/supervisord.d/ElasticHD.ini [program:ElasticHD] command=/usr/local/bin/ElasticHD -p 0.0.0.0:9800 autostart=true autorestart=true user=elasticsearch redirect_stderr=true stdout_logfile=/tmp/ElasticHD.log EOF supervisorctl update supervisorctl reload supervisorctl status docker 安装： docker run -p 9800:9800 -d --link elasticsearch:demo containerize/elastichd web端访问结果：http://192.168.110.245:9800/ ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:25:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"3.3 安装 elasticsearch -HQ 普通安装： (1)安装python3.6 yum install python3 python3-pip python3-devel -y (2) 安装 elasticsearch-HQ cd /usr/local/src/ wget -O elasticsearch-HQ.zip https://github.com/ElasticHQ/elasticsearch-HQ/archive/master.zip unzip elasticsearch-HQ.zip mv elasticsearch-HQ-master /usr/local/elasticsearch-HQ cd /usr/local/elasticsearch-HQ pip3 install -r requirements.txt cat \u003c\u003cEOF\u003e /etc/supervisord.d/ElasticHQ.ini [program:ElasticHQ] command=/usr/bin/python3 /usr/local/elasticsearch-HQ/application.py --host 0.0.0.0 --port 5000 autostart=true autorestart=true #user=elasticsearch redirect_stderr=true stdout_logfile=/tmp/ElasticHQ.log EOF supervisorctl update supervisorctl reload supervisorctl status docker 安装 docker run -p 5000:5000 elastichq/elasticsearch-hq web端访问结果：http://192.168.110.245:5000/ 4. 安装 Kibana ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:26:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.1 引用： Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。 Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:27:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.2 安装： yum -y install kibana-7.6.2-x86_64.rpm #创建日志路径 mkdir /var/log/kibana touch /var/log/kibana/kibana.log chmod -R 755 /var/log/kibana/ chown -R kibana /var/log/kibana/ ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:28:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.3 修改配置文件 [root@node01 elk]# cat /etc/kibana/kibana.yml |grep -Ev '^#|^$' #kibana 端口号 server.port: 5601 #kibana 内网 ip server.host: \"192.168.110.245\" #es 的地址 elasticsearch.hosts: [\"http://192.168.110.245:9200\"] #es 的账号密码，在配置 tls 通信的时候那里就设置了的 elasticsearch.username: \"kibana\" elasticsearch.password: \"123456\" #记录发送到 es 的查询 elasticsearch.logQueries: true # 日志路径 logging.dest: /var/log/kibana/kibana.log # 禁止显示除错误消息以外的所有日志记录输出。 logging.quiet: true # 记录所有日志事件，包括系统使用情况信息和所有请求 logging.verbose: false # 开启 xpack xpack.security.enabled: true ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:29:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.4 启动 systemctl restart kibana systemctl status kibana ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:30:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.5 open kibana url http://192.168.110.245:5601/ ，这里要用 elastic 账号登录，使用 kibana 登录是无法，会报错 403 没权限 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:31:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"4.6 内存限制 参考资料：https://www.elastic.co/guide/en/kibana/7.2/production.html#load-balancing-es 默认内存限制 1.4GB，如果过需要可以通过环境变量进行替换，一般不需要更改。 5. node02 安装 logstash ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:32:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"5.1 安装 logstash yum -y install logstash-7.6.2.rpm cp /etc/logstash/logstash.yml /etc/logstash/logstash.yml.orig ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:33:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"5.2 配置文件 [root@node02 elk]# cat /etc/logstash/logstash.yml|grep -Ev '#|^$' path.data: /var/lib/logstash # 配置自动加载配置，这样就无须在更改配置时手动重启 logstash 引起数据丢失 config.reload.automatic: true # 自动加载的时间 config.reload.interval: 10s path.logs: /var/log/logstash ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:34:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"5.3 修改内存地址 vim /etc/logstash/jvm.options -Xms1g -Xmx1g ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:35:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"5.4 手动测试，输入 hello cd /usr/share/logstash ./bin/logstash -e 'input { stdin { } } output { stdout { } }' hello 6. node02、03安装 filebeat ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:36:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"6.1 安装 yum -y install filebeat-7.6.2-x86_64.rpm cd /etc/filebeat cp filebeat.yml filebeat.yml.orig 7. 日志处理 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:37:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"案例一：官方例子 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:38:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"参考： https://www.elastic.co/guide/en/logstash/7.7/plugins-inputs-beats.html https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:39:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"7.1.1在 node02 调整 logstash 配置 cd /etc/logstash/conf.d/ cat \u003c\u003cEOF\u003e /etc/logstash/conf.d/example.conf input { beats { port =\u003e 5044 } } output { elasticsearch { hosts =\u003e [\"http://192.168.110.245:9200\"] index =\u003e \"%{[@metadata][beat]}-%{[@metadata][version]}\" user =\u003e \"elastic\" password =\u003e \"123456\" } } EOF systemctl restart logstash ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:40:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"7.1.2检查端口是否启动： [root@node02 elk]# netstat -nltp|grep 5044 tcp6 0 0 :::5044 :::* LISTEN 31422/java ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:41:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"7.1.3 在 node02 配置 filebeat cd /root/src/elk wget https://download.elastic.co/demos/logstash/gettingstarted/logstash-tutorial.log.gz gzip -d logstash-tutorial.log.gz cat \u003c\u003cEOF\u003e filebeat.yml filebeat.inputs: - type: log paths: - /root/src/elk/logstash-tutorial.log output.logstash: hosts: [\"192.168.110.246:5044\"] EOF ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:42:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"7.1.4 启动 filebeat /usr/share/filebeat/bin/filebeat -e -c filebeat.yml -d \"publish\" 启动结果部分截图： ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:43:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["ELK"],"content":"7.1.5 在 kibana 打开“Management”-»“Elasticsearch”-»“IndexManagement”，可以看到 filebeat 的索引 然后我们到 kiabana 那里添加 index 试试。 创建成功 最后我们到 Discover 这里就可以看到相关试图了 ","date":"2020-06-08","objectID":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/:44:0","tags":["ELK","elasticsearch","kibana","logstash"],"title":"【ELK】Centos7 安装 elk 7.6.2","uri":"https://www.zhaouncle.com/centos7-%E5%AE%89%E8%A3%85-elk7/"},{"categories":["hugo"],"content":"hugo 使用 LoveIt 主题搭建个人博客","date":"2020-06-05","objectID":"https://www.zhaouncle.com/hugo/","tags":["hugo","博客"],"title":"Hugo（一）Github Pages 搭建个人博客","uri":"https://www.zhaouncle.com/hugo/"},{"categories":["hugo"],"content":" 序言 Hugo 号称构建网站最快的框架，看过其他相关资料，hexo 在文章数量大的前提下，建站成静态文件的速度很慢，另外从主题（themes）这个角度去考虑，简单也是我的首选，于是从 hugo 下手自己的第一个博客网站。 安装 mac 安装 hugo brew install hugo 确认安装成功，可用命令行检查版本号进行测试 hugo version 其他平台可用直接下载二进制包进行使用，无需编译 https://github.com/gohugoio/hugo/releases 构建 hugo 项目 新建博客站点 hugo new site MyBlogHugo 创建完站点后的文件结构 MyBlogHugo ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 添加 LoveIt 主题 Why choose it? 在 Hugo 主题市场 挑了半天，还是决定用 LoveIt 这个主题。 这个 themes 简单好看，功能齐全，作者也一直在努力更新，还支持多语言版本，包括 seo、搜索等功能都有，可以参考 demo 地址。 将主题作为子模块 cd MyBlogHugo git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 启动 hugo server 启动 hugo 作为本地调试使用，在浏览器打开 http://localhost:1313/ 即可查看效果。 hugo server --disableFastRender 参数含义： disableFastRender：实时将文章的内容更新到站点，不需要重启也能边修改边观看效果。 生成静态文件，会在MyBlogHugo 下面生成 public 的静态文件目录 hugo 我是使用 LoveIt 主题自带的 exampleSite 的 config.toml 来进行修改和配置的。 cd MyBlogHugo cp themes/LoveIt/exampleSite/config.toml . 创建博客文章之前，我会使用example 的默认创建初始化详情来进行配置和修改. cp themes/LoveIt/archetypes/default.md archetypes/ # 这样，你每次创建文章的时候，都会使用这里的默认配置进行创建 hugo new posts/test01.md default.md 查看 \\--- title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" date: {{ .Date }} lastmod: {{ .Date }} draft: false #是否作为草稿，如果为 true，不会生产静态文件到 public 目录 author: \"赵叔\" authorLink: \"\" description: \"\" tags: [] categories: [] hiddenFromHomePage: false hiddenFromSearch: false featuredImage: \"\" featuredImagePreview: \"\" toc: enable: true #是 否展开右边目录栏 math: enable: false lightgallery: false license: \"\" \\--- \u003c!--more--\u003e 配置 Github Pages 登录 github，在设置那里创建个人 repo 仓库，一共 2 个，一个是 .github.io 作为个人站点 public 的静态文件，一个是 MyBlogHugo 作为除了 public 这个静态目录的所有文件的仓库。记得创建空repo，不要添加 README 文件哦。 初始化仓库 MyBlogHugo，public 目录要忽略，不上传 cd MyBlogHugo echo \"!public/\" \u003e\u003e .gitignore git init git remote add origin git@github.com:ZhaoUncle/MyBlogHugo.git git add . git commit -m \"no public\" git pull --rebase origin master git push -u origin master 初始化仓库 zhaouncle.github.io cd public git init git remote add origin git@github.com:ZhaoUncle/zhaouncle.github.io.git git add . git commit -m \"my blog hugo\" git pull --rebase origin master git push -u origin master 之后就可以打开 http://\u003cusername\u003e.github.io 进入到你的博客了。 ","date":"2020-06-05","objectID":"https://www.zhaouncle.com/hugo/:0:0","tags":["hugo","博客"],"title":"Hugo（一）Github Pages 搭建个人博客","uri":"https://www.zhaouncle.com/hugo/"},{"categories":["Thoughts","随笔"],"content":"万事开头难 博客本来自 18 年始就有念头，一拖再拖，主要自己懒又不够专注，当然我也不会承认是我自己“无才”之无奈。 ","date":"2020-06-05","objectID":"https://www.zhaouncle.com/%E4%B8%87%E4%BA%8B%E5%BC%80%E5%A4%B4%E9%9A%BE/:0:0","tags":["无言"],"title":"万事开头难","uri":"https://www.zhaouncle.com/%E4%B8%87%E4%BA%8B%E5%BC%80%E5%A4%B4%E9%9A%BE/"},{"categories":["Thoughts","不尽如书"],"content":"闲来读之，不尽如书","date":"2020-06-02","objectID":"https://www.zhaouncle.com/books/","tags":["阅读"],"title":"Books","uri":"https://www.zhaouncle.com/books/"},{"categories":["Thoughts","不尽如书"],"content":"《知行合一王阳明》，by 度阴山，2020 年 4 月 《张居正（全集）》，by 熊召政，2020 年 5 月 《人人都是产品经理：写给产品新人》，by苏杰，2020 年 6 月 《白说》，by白岩松，2020 年 7 月 2 日 《中国通史》，by 钱穆讲授 叶龙记录整理，2020 年 8 月 19 日 《人生如逆旅，我亦是行人》，by 余光中，2020 年 9 月 14 日 《技巧：如何用一年时间获得十年的经验》，by 郝培强，9 月 26 日 《人生不过一念间：南怀瑾的 15 堂人生智慧课》，by 柠檬树编著，10 月 14 日 ","date":"2020-06-02","objectID":"https://www.zhaouncle.com/books/:0:0","tags":["阅读"],"title":"Books","uri":"https://www.zhaouncle.com/books/"},{"categories":["前端"],"content":"【layui】tepmlet 格式化 table 数据","date":"2020-01-04","objectID":"https://www.zhaouncle.com/layui_templet-%E6%A0%BC%E5%BC%8F%E5%8C%96/","tags":["layui"],"title":"【layui】tepmlet 格式化 table 数据","uri":"https://www.zhaouncle.com/layui_templet-%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":["前端"],"content":"代码如下所示 \u003cscript src=\"/static/vendor/layuimini/lib/layui-v2.5.5/layui.js\" charset=\"utf-8\"\u003e\u003c/script\u003e \u003cscript\u003e layui.use(['form', 'table'], function () { var $ = layui.jquery, form = layui.form, table = layui.table; table.render({ elem: '#currentTableId', url: '/user/queryjson', toolbar: '#toolbarDemo', defaultToolbar: ['filter', 'exports', 'print', { title: '提示', layEvent: 'LAYTABLE_TIPS', icon: 'layui-icon-tips' }], cols: [[ {type: \"checkbox\", width: 50}, {field: 'id', width: 80, title: 'ID', sort: true}, {field: 'name', width: 80, title: '用户名'}, {field: 'sex', width: 80, title: '性别', sort: true, templet: sexFormat}, {field: 'tel', width: 120, title: '联系方式'}, {field: 'addr', width: 120, title: '地址'}, {field: 'birthday', width: 180, title: '生辰', templet: birFormat}, {title: '操作', minWidth: 150, toolbar: '#currentTableBar', align: \"center\"} ]], limits: [10, 15, 20, 25, 50, 100], limit: 15, page: true, skin: 'line' }); // 格式化显示男女信息，后端返回 true 或者 false，这里做判断 function sexFormat(d) { var str; if (d.sex) { str = '男'; } else { str = '女'; } return str; } // 格式化显示日期，调用layui.util 工具集，参考：https://www.layui.com/doc/modules/util.html function birFormat(d) { birday = layui.util.toDateString(d.birthday, \"yyyy-MM-dd\"); return birday; } }); \u003c/script\u003e ###参考 https://m.yisu.com/zixun/12217.html ","date":"2020-01-04","objectID":"https://www.zhaouncle.com/layui_templet-%E6%A0%BC%E5%BC%8F%E5%8C%96/:0:1","tags":["layui"],"title":"【layui】tepmlet 格式化 table 数据","uri":"https://www.zhaouncle.com/layui_templet-%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"about me？ 博主非常懒，无颜之，也无以言之。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/about/:0:0","tags":null,"title":"","uri":"https://www.zhaouncle.com/about/"},{"categories":null,"content":"#友情链接 怡红院落 一些常用的相关链接 loveit Doc：有关 loveit 的相关文档介绍 LoveIt Github Algolia：用于网站搜索 atomic-algolia：自动更新 index.json ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/link/:0:0","tags":null,"title":"","uri":"https://www.zhaouncle.com/link/"},{"categories":null,"content":"title: “随口胡诌之短句” subtitle: \"” date: 2020-09-08T11:23:53+08:00 lastmod: 2020-09-08T11:23:53+08:00 draft: false author: “赵叔” authorLink: \"” description: “于 2020 年 9 月 6 日始于“小不点”” tags: [‘无言’] categories: [‘Thoughts’,‘随笔’] hiddenFromHomePage: false hiddenFromSearch: false featuredImage: “https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/小不点.png” featuredImagePreview: “https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/blog/小不点.png” toc: enable: true math: enable: false lightgallery: false license: \"” 以下要么为摘抄，要么随口胡诌之 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:0","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:1","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:2","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:3","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:4","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 03 月 10 日 书上说，在我们生活的周围，往任何方向延伸一公里，都有我们不熟悉的地方，都有值得我们去探索和拍摄。 生活在别处总是充满想象。 可在你这里，总是充满着踌躇 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:5","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 以大多数人努力程度之低，根本轮不到拼智商。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:6","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 你站在桥上看风景，看风景的人在楼上看你。明月装饰了你的窗子，你装饰了别人的梦。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:7","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 28 日 宜将剩勇追穷寇，不可沽名学霸王。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:8","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 26 日 ——张小娴 无论你对家人、恋人和朋友付出多少，无论你做得多好，不要期望回报。 等待回报是多么寂寥？相识、相爱、成为家人，都是今生的因缘。 尽了自己的责任就是惜缘，你是这样流着泪狠狠地珍惜过，无愧就好；惟其如此，你才不会失望和伤心，也才不会抱怨。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:9","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 26 日 有些人血里有风，注定要一生漂泊。 ——《武林外传》 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:10","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 26 日 印度著名的灵性导师·克里希那穆提曾说过： 自由与爱是并存的，爱不是一种反应，如果我爱你是因为你爱我，那么这只是交易，爱变成了在市场上被卖的东西，那显然不是爱。 爱是不求回报的，甚至不感觉你给予了什么，只有这种爱，才能是你自由。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:11","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 26 日 须知道，人生苦短，能够走在一起的，本身就是缘分。至于一起能走多远，就是彼此的际遇了。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:12","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 26 日 “拟把疏狂图一醉，对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。” ——《蝶恋花》柳永 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:13","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 17 日 上帝撒下了智慧，你却撑起了伞。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:14","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 17 日 保性全真，不以外物累形。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:15","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 17 日 人呐，不能既要，又要，总要拿某些东西去替换某些东西，想要得到总得付出某些代价。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:16","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 17 日 应然 实然 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:17","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 16 日 永远不要在别人生命的废墟上 ​ 呼啸而过 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:18","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 16 日 少年啊 他特别酷 他出走半生 归来仍是少年 成年啊 他出走半生 归来不发一言 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:19","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 16 日 生活啊 好比那黑夜里漫长的路 走过的人 他从不说出来 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:20","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 16 日 胸有激雷而面如平湖者，可拜上将军。——《孙子兵法》 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:21","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 16 日 人最可怕的就是，骗过自己。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:22","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 曾经以为 30 岁很遥远，却发现 18 岁已经是很久以前的事了，时光好不经用，抬眼已是半生。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:23","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 人为什么会流眼泪，大概就是眼睛代替了嘴巴说不出来的悲伤。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:24","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 我哪有能力顾及所有人的感受，我自己的心情，我都照顾不好。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:25","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 我从来不指望任何人心疼我，为我扛下所有。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:26","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 很多关系，走到最后不过是相识一场。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:27","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 可不可以跟世界请个假啊，我想暂时离开一下。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:28","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 时间不会让人忘了痛，只会让人习惯了痛！ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:29","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 家人应该是彼此的安全网，而不是束缚的缰绳。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:30","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 只要思想不滑坡，方法总比困难多。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:31","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 10 日 我向你表白，如果你不同意的话也没关系，我只希望今后，你灰心的时候记得有人曾喜欢你。陪你走完了这顿路，我也就变成了你路过的路，从此人山人海，愿各遇良人。 以前我喜欢长得好看的，现在喜欢相处舒服的。越长大越会觉得，一辈子能遇上一个你说上半句，他能接下半句的人有多难！ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:32","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 07 日 人生太过复杂，我也不是万事明了，能送给你的只有四个字「好好感受」。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:33","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 07 日 You wouldn’t plant a seed and then dig it up every few minutes to see if it has grown. So why do you keep questioning yourself, your hard work and your decisions? Have patience, stop overthinking and keep watering your seeds. ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:34","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 05 日 每个人只能赚自己认知的钱，理解的越深刻，赚得越多。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:35","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 04 日 其实，我挺想找你聊天的 但看到你爱理不理的样子 突然就不想说了 因为我怕为难了你 也难堪了我自己 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:36","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2021 年 01 月 02 日 静中藏了一个争字 稳中藏了一个急字 忙中藏了一个亡字 忍中藏了一个刀字 越想争心越要静 越急心越要稳 越忙越要照顾好自己 越忍越要看清事态！ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:37","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 12 月 23 日 是谁来自山川湖海，却囿于昼夜、厨房与爱。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:38","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 12 月 23 日 不管和谁结婚，过一段时间，都会有激情消退的时候，你在没有激情的时候仍然能保持爱，才算是真的爱一个人。所以说离婚不需要冷静期，结婚才需要。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:39","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 12 月 23 日 毕竟过去的已经过去，就像拜伦的《春逝》——**若我会见到你，事隔经年。我如何和你招呼，以眼泪，以沉默。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:40","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 12 月 23 日 毕竟过去的已经过去，就像拜伦的《春逝》——**若我会见到你，事隔经年。我如何和你招呼，以眼泪，以沉默。 ###2020 年 12 月 22 日 别因渴望你没有的，而错过你已拥有的；要知道，你现在拥有的，也曾是你渴望的。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:41","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 29 日 每个人都很孤独。在我们的一生中，遇到爱，遇到性，都不稀罕，稀罕的是遇到了解。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:42","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 能否做常驻嘉宾 那就要看你怎么去做的呀 如果啥也不做 那也只能做个特邀嘉宾 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:43","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 会觉得但凡有趣一点，子这个遥远的国度面对着冰冷的微信文字，我也会出现嘴角上扬的表情呀 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:44","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 有你在，有所期待，有所爱。 会不会，等遇到了就知道了，等明白了也就明白了 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:45","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 纯洁与美好，是柏拉图对爱情的理解。 这位伟大的哲学家，曾经请教苏格拉底，何为爱情？ 苏格拉底让他去果园摘一颗最大最好的桃子，但只能摘一次，且不能回头。 柏拉图最后空手而归，问他为什么，他说：“因为只能摘一次，又不能回头，即使期间看到了最大最饱满的那颗桃子，也因为不知道后面还会不会有更大的而放弃。走到最后面时发现都不如以前的那一颗大而饱满，所以直到走出桃园，也没有摘。” 就怕你看不懂我，而我最后成了那个一无所有的人 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:46","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 我爱你，如你所是 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:47","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 什么是爱情？ 王小波对李银河说：“一想到你，我这张丑脸就泛起了微笑。” 三毛对荷西说：“不多不多，以后还可以少吃一点。” 钱钟书对杨绛说：“没遇到你之前，我没想过结婚，遇见你，结婚这事我没想过和别人。” 其实爱情的定义很简单，就是一屋两人，三餐四季，执子之手，相伴余生。 相信吧，总会有那么一个人，寻你而来，与你一起待霜染白发，陪你看细水长流。 以彼一生，休戚与共。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:48","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 怎么说呢，老实人也不少，不想随便找个，可偏偏总是遇上一些经历了太多的女人 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:49","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 我住长江头,君住长江尾； 日日思君不见君,共饮潮汕茶 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:50","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 一艘孤舟寒江上，你与鱼对望，隔着千重镜 水波岂能无痕，任，千帆浪涛涛，负一人少就，独自漂流 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:51","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 会觉得但凡有趣一点，在这个遥远的国度面对着冰冷的微信文字，我也会出现嘴角上扬的表情呀 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:52","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 雨落成帘，阻断了在远方眺望的视线，落雨念思愁 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:53","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 善良给错了人，会让人心寒；心软给错了人，会让人心痛；有时候啊，人心换不了人心；但是，我们不能放弃善良。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:54","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 喜欢两人一屋三餐四季有你的朝夕，最美不过是有你的天气，你看草木皆情如此如醉、相偎相依。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:55","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 13 日 父母在，人生尚有来处；父母去，人生只剩归途。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:56","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 12 日 这辈子不打算活太老，等把养我的人送走就可以收队了，人间没太多意思，下辈子不来了 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:57","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 10 日 想想你小的时候，紧紧握住不肯放开的小手拉着大手，如今看着挂上了皱纹的脸角，除了深邃的眼神，还有无处安放的大手 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:58","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 09 日 相约去爬山，你爬得快先到达顶峰看日出，我爬的慢再到顶峰看夕阳，达到一样的高度，看的不同的风景，又何须在乎他人呢？ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:59","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 08 日 听君一声劝，前路漫漫，可回头看过往，却不可转身往回走。 切莫听心惘了身. 《活着》苟活着，如行尸走般在人生的舞台戏上表演者，压抑的鼓声点缀着哭泣的灵魂，那拙劣的演技与不堪的低沉的喘息声，如履薄冰，蹒跚前行 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:60","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 07 日 没有，只是觉得人性的自私与愚蠢在涉及到自己利益的时候，体现的淋漓尽致；这样有时候为了大家利益着想，偏偏有些人的自私与愚蠢总会迫不及待的展现出来；然后自己气的火大，觉得别人没用脑子想 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:61","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 06 日 如白驹过隙，在素描纸上提笔的瞬间划过，留下淡淡的痕迹 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:62","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 09 月 03 日 或许我们在这条前人已经倒下去很多的路途上，无法增光添彩，做不出成绩，不过我们当初不是因为喜欢才做的么，喜欢是我们自己能够抉择的，如果连自己都嫌弃自己了，当初的味道不也是变了吗，世上无难事只怕有心人，即便难于上青天，不也还有飞机送你上去么，想一下从人类文明史开始到飞机出现也有 5000 多年了，而飞机到现在才 100 年左右，你这点算个啥 嗯嗯，不忘初心 热爱不减 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:63","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 31 日 一曲肛肠断，天涯何处觅知音 赠你条白绫[奸笑] ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:64","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 28 日 雨，该是一滴湿漉漉的灵魂，窗外在喊谁。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:65","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 27 日 终是庄周梦了蝶，你是恩赐也是劫。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:66","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 25 日 陈根未作去年花， 奕奕天姿照碧纱。 慧影精神知绝俗， 美人尤胜洛阳花。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:67","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 24 日 我甚至一秒都没有拥有过你，每次望着你远去的身影，却感觉好像失去了万千次 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:68","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 23 日 突然想起一句话，30岁死掉，别人会说你年轻，而30岁活着，别人会说你年纪不小了 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:69","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 22 日 初期交往，看礼貌 长期交往，看脾气 一生交往，看人品 时间真是个好东西 验证了人心 见证了人性 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:70","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 22 日 如果 忙碌不堪的生活 还剩一点空间 那就用“任性”来填满 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:71","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 22 日 突然想起一句话，你必须要塑造自己，否则你就会消失在阳光底下。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:72","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 22 日 灵魂无法解脱，终究得被困在世俗的枷锁里面，心不安，则人不静。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:73","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 22 日 老哥总是旧人听，越听越不是滋味，愁上心头，情浓 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:74","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 20 日 突然想起一句话，你是一年走过了 365 天，还是走了一天，重复了 365 次 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:75","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 20 日 所谓人生，就是逐渐接受自己普通平凡的事实。努力就会有回报，不过是一句美好，但是无用的客气话。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:76","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 20 日 抱歉，这就是生活 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:77","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 老夫最近也是少女心泛滥 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:78","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 每个人都是人生长河的过路客，无非就是驻足时间的长短不一，并不是留的久的人就是对的人，但是对的人一定能给你留下深刻的印象 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:79","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 这个世界上只有一种真正的英雄主义，那就是认识生活的真相，并且依然热爱它 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:80","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:81","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 成功不易，只希望年老了能笑看风云，能约 3、5 好友，品茶驻足，忆当年，争辉岁月，谁敢沉浮 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:82","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 不是有句老话，种一棵树最好的时间是十年前，其次是现在 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:83","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 路上的美人儿， 行色匆匆的从我身旁儿走过， 在我眨眼的那一瞬间， 已经转身消失在角落不知哪儿去了， 没有留下一片云彩， 却留有余香， 那是青春的味道 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:84","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 会觉得但凡有趣一点，在这个遥远的国度面对着冰冷的微信文字，我也会出现嘴角上扬的表情呀。害~ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:85","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 13 日 真他妈的矛盾。一边要求自己做自己，一边还要强撑着该有的礼貌 人啊~ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:86","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 10 日 怎么说好呢，该来始终回来的吧，我其实一直在期盼着 我相信爱情，虽然我没经历过 还是希望有个人，能够，你的一生我只借一程，这一程便是余生。 也希望能有个人，我看过春风十里，见过夏至末至，试过秋光涟漪，爱过冬日暖阳，全抵不过你一句，我想见你。 懂我的人，一个足矣。 是啊，这种还是得好好的保持着，宁可没有也不要将就，人活着意思 都不容易，一辈子那么长，为何不选择懂你的人，而去选择一个搭伙过日子的人呢 丧偶式的合伙搭居过日子，行尸走肉般的苟者，太痛苦了 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:87","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 10 日 以前总对自己说：你值得被温暖，被疼爱，你终会找到那个让你做回孩子，懂你心事的人。而在那之前，请你务必记得“沉稳，自爱，而后爱人”，你得好好照顾自己，不自卑、不将就，才能给频率相同的人，一个更好的你。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:88","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 10 日 频率相同，才能相融；磁场相同，才能被懂。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:89","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 10 日 不管爱与不爱，我都希望你能够不管在什么时候，都能做你自己 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:90","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 10 日 你不必假装大度，你最该感谢的是，是受伤之后依然没有放弃的自己。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:91","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 09 日 幸而有你，可诉衷肠 有幸有你 年纪相仿 齐疑人生 丧久了，连开心的时候都会怀疑人生，这次不怀疑了，我先睡为敬 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:92","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 09 日 我深怕自己本非美玉，故而不敢加以辛苦琢磨，却又半信自己是块美玉，故有不肯庸庸碌碌，与瓦砾为伍，于是我渐渐脱离凡尘，远离世人结果便是——任愤懑与羞恨日益助长内心那怯弱的自尊心 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:93","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 08 日 就是偶尔看到别人成双成对，遇到问题无人倾述和依靠，就真的很想要有个伴呢 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:94","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。 不必担心你的前方是悬崖还是岩石，珍惜旅途的风景。有好有坏，从容面对 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:95","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 这里有句话赠予你：你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:96","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 现在有时候会发火，会让自己努力静下来，不要去逼性。其实都是一些屁大点事儿 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:97","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 这个世界上一定存在着另外的自己，不要因为别人是否理解和欣赏，去评价自己的兴趣与理想。即便是“万里挑一”，世界上肯定有一个“有趣”的灵魂等待着与你我相遇。你和另外的自己，是时间和空间中一条线段的两个端点，只要你们不断中点前进、不断的扩大自己半径，终究会相遇。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:98","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 正因为我们每个人都自以为是得认为自己拥有了“有趣”的灵魂。我也曾认为自己相当“有趣”，最后才发现，我只不过是个很“有兴趣”的人。真正“有趣”向来来之不易，形象一点的说，你觉得有趣就选了“星爸爸”的杯子，却不知道真正香醇的咖啡该如何享用。这只是有兴趣，真正的有趣的人，是了解你喜欢喝的咖啡的历史，制造，如何品尝，而不是换个杯子和咖啡 “有趣”是少有人走的一条路 再者说，“趣”是由“走”和“取”两个字组成，真正“有趣”的人，要向西天取经一样，走一条少有人走的路。走上一条追求真爱的过程：真正的爱是一种自律，自律是一种成长，成长是一种突破。化茧成蝶也好，鱼跃龙门也好，虎落平阳也罢，也许现实很残酷，我们无法取得物质上的极致享受。 我们所看到的困难是对自己的认知的局限，而你需要做的就是打破他的边界。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:99","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 好看的皮囊千篇一律 有趣的灵魂万里挑一 难得的是频率相同的 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:100","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 如果你曾经遇到过那么一个人，那么其他人都会变成将就，而我，不愿意将就。这是我的一直坚守的执念。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:101","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 表面的幼稚，好玩，不代表我内心也是呀。只是不轻易跟人坦露心声跟内心的想法 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:102","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 需要双方足够的信任。保持的当初在一起的初心。坚贞不渝的信念 起码告诉自己 自己当下选择的已经是最好了的，日后所看到的，觉得他好，也可能是是表面的，再花时间去了解，发现不是自己经历的。再掉头回来，那是不可能的了。不是所有人都会在原地等候着你 信任很重要，更重要的是，能够相知，能够清楚的认知到这样的事实和前提 就像说的，一次的背叛，足以让人跌落谷底了 一次不忠，二次不用嘛 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:103","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 我不想那种过着提线木偶的生活，双方有自己的房间忙自己的事情，也可以一起在一个房间亲热，而不是吵了架还要冷着脸躺在一张床上，这种既独立又在一起生活的婚姻，才是我向往的 安静的时候你可以看你的剧，我看我的书，写我的代码，打你的游戏；热闹的时候可以一起去外面踏青，爬山，拍照，运动，吃饭 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:104","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 有自己热爱的工作，爱好， 就算双方那种可以各玩各的，也可以一起玩，忙的时候各自房间干活，不忙的时候，想对方了，可以一起玩 不要拘束，拘束的夫妻生活是牢笼的开始 但是也要认清一个事实，结婚后会发现其实，还会遇到更好的异性，但是当初决定在一起了的心和意念，不因外在的诱惑而背叛 需要双方有很好的心理承受能力和拒绝诱惑的意志力 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:105","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 就好像，你在看风景 ，他在画画 ，她的风景里有你的画 ，他的画里有你的风景 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:106","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 比起喜欢，更想呗偏爱，没有顾虑的那种纯真 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:107","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 心里有你，何须借酒，有你的日子，快乐犹存 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:108","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 缘分这事能不负对方就好，想要不负此生真的很难。 不负时光，不负卿；不负春光，不负己。 在短暂的一生中，我们永远不知道自己接下来会遇见怎样的未来。专注当下，便不会错过美好。 与其杞人忧天，庸人自扰之，还不如专注的当下的那个我，不迷失不错过 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:109","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 后来的我们什么都有了，却没有了我们 我最大的遗憾就是你的遗憾与我有关。 如果当时你没走，后来的我们会不会不一样？ ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:110","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 06 日 你不试着依靠我一下 怎么知道我有多可靠 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:111","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 06 日 哈哈哈我知道我只要不开口就是冷的。开口了前面的都垮掉了 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:112","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 爱会 爱你不会 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:113","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 07 日 蓝颜的钱可以收，一般男人的钱不能收 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:114","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 08 月 04 日 我对感情不抱太大的向往啦，但希望还是有的。对朋友的要求会高一些，就感觉对我来说 朋友比爱情更热爱哈哈哈哈哈 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:115","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 06 月 05 日 生命不是一个靠拥有而证实的过程,而是一个因失去而证伪的过程。 人这一辈子都在逐渐认识很多人,获得更多事,但只有那些少数的失去,才能让人突然发现生命到底是1么。 之后,才能更加珍惜,要选择与什么样一群人,以什么身份,共同走完以后的路。 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:116","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 05 月 20 日 咋地，长得丑还不许自豪啊 就咱这长相，古代一战，上将军是也 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:117","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"},{"categories":null,"content":"2020 年 05月 07 日 世人皆在争渡，殊不知便是渡了，也不过是蚂蚁里头挑大象，终究挣脱不了这忙忙人世间 ","date":"0001-01-01","objectID":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/:0:118","tags":null,"title":"","uri":"https://www.zhaouncle.com/%E9%9A%8F%E5%8F%A3%E8%83%A1%E8%AF%8C%E4%B9%8B/"}]